MCDC测试用例生成日志
==================================================


==================================================
处理模块: 确定推力控制转速目标值的计算周期
模块中没有if语句，跳过

==================================================
处理模块: 确定选定推力等级
提取到的if条件: ['PLA >= -33 && PLA < 0 && airdis_WOW == 0 && approach_air == 1', 'PLA >= -33 && PLA < 0 && airdis_WOW == 0 && approach_air == 0', 'PLA >= -33 && PLA <= -31 && airdis_WOW == 1', 'PLA > -31 && PLA < -6 && airdis_WOW == 1', 'PLA >= -6 && PLA < 0 && airdis_WOW == 1', 'PLA >= 0 && PLA <= 2 && airdis_WOW == 0 && approach_air == 1', 'PLA >= 0 && PLA <= 2 && airdis_WOW == 0 && approach_air == 0', 'PLA > 2 && PLA < 59', 'PLA >= 59 && PLA <= 61', 'PLA > 61 && PLA < 64', 'PLA >= 64 && PLA <= 66 && TL_require != DCL1 && TL_require!= DCL2', 'PLA >= 64 && PLA <= 66 && TL_require == DCL1', 'PLA >= 64 && PLA <= 66 && TL_require == DCL2', 'PLA > 66 && PLA < 69', 'PLA >= 69 && PLA <= 71', 'PLA > 71 && PLA < 74', 'PLA >= 74 && PLA <= 76 && TL_require!=DTO1 && TL_require!=DTO2 && TL_require!=GA && TL_require!=Bump && (TL_require!=FLEXTO ||  (TL_require == FLEXTO && flex_dT_flag == 0) )', 'PLA >= 74 && PLA <= 76  && TL_require == DTO1', 'PLA >= 74 && PLA <= 76 && TL_require == DTO2', 'PLA >= 74 && PLA <= 76 && TL_require == GA', 'PLA >= 74 && PLA <= 76 && TL_require == FLEXTO && flex_dT_flag == 1', 'PLA >= 74 && PLA <= 76  && TL_require == Bump', 'PLA > 76 && PLA < 81', 'PLA >= 81 && PLA <= 85']

处理条件 1: PLA >= -33 && PLA < 0 && airdis_WOW == 0 && approach_air == 1
解析后的Python条件表达式: PLA >= -33 and PLA < 0 and airdis_WOW == 0 and approach_air == 1
变量及其范围: [{'name': 'airdis_WOW', 'min_value': 0.0, 'max_value': 1.0, 'var_type': 'bool', 'is_last': False, 'original_var': 'airdis_WOW'}, {'name': 'approach_air', 'min_value': 0.0, 'max_value': 1.0, 'var_type': 'bool', 'is_last': False, 'original_var': 'approach_air'}, {'name': 'PLA', 'min_value': -33.0, 'max_value': 85.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PLA'}]
解析后的条件: PLA >= -33 and PLA < 0 and airdis_WOW == 0 and approach_air == 1
识别到的变量: [{'name': 'airdis_WOW', 'min_value': 0.0, 'max_value': 1.0, 'var_type': 'bool', 'is_last': False, 'original_var': 'airdis_WOW'}, {'name': 'approach_air', 'min_value': 0.0, 'max_value': 1.0, 'var_type': 'bool', 'is_last': False, 'original_var': 'approach_air'}, {'name': 'PLA', 'min_value': -33.0, 'max_value': 85.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PLA'}]
处理的变量: ['airdis_WOW', 'approach_air', 'PLA']
预处理后的条件: PLA >= -33 and PLA < 0 and airdis_WOW == 0 and approach_air == 1
提取的原子条件: [('PLA', '>=', '-33'), ('PLA', '<', '0'), ('airdis_WOW', '==', '0'), ('approach_air', '==', '1')]
表达式结构: {'AND_EXPR_0': ('and', ['ATOM_0', 'ATOM_1', 'ATOM_2', 'ATOM_3'])}
根表达式: AND_EXPR_0
警告: 无法解析变量 -33
警告: 无法解析表达式 PLA >= -33
警告: 无法解析变量 0
警告: 无法解析表达式 PLA < 0
警告: 无法解析变量 0
警告: 无法解析表达式 airdis_WOW == 0
警告: 无法解析变量 1
警告: 无法解析表达式 approach_air == 1
构建的Z3表达式: And(True, True, True, True)
警告: 无法解析变量 -33
警告: 无法解析表达式 PLA >= -33
警告: 无法解析变量 0
警告: 无法解析表达式 PLA < 0
警告: 无法解析变量 0
警告: 无法解析表达式 airdis_WOW == 0
警告: 无法解析变量 1
警告: 无法解析表达式 approach_air == 1
生成的MCDC条件数量: 0
生成的MCDC条件数量: 0

处理条件 2: PLA >= -33 && PLA < 0 && airdis_WOW == 0 && approach_air == 0
解析后的Python条件表达式: PLA >= -33 and PLA < 0 and airdis_WOW == 0 and approach_air == 0
变量及其范围: [{'name': 'airdis_WOW', 'min_value': 0.0, 'max_value': 1.0, 'var_type': 'bool', 'is_last': False, 'original_var': 'airdis_WOW'}, {'name': 'approach_air', 'min_value': 0.0, 'max_value': 1.0, 'var_type': 'bool', 'is_last': False, 'original_var': 'approach_air'}, {'name': 'PLA', 'min_value': -33.0, 'max_value': 85.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PLA'}]
解析后的条件: PLA >= -33 and PLA < 0 and airdis_WOW == 0 and approach_air == 0
识别到的变量: [{'name': 'airdis_WOW', 'min_value': 0.0, 'max_value': 1.0, 'var_type': 'bool', 'is_last': False, 'original_var': 'airdis_WOW'}, {'name': 'approach_air', 'min_value': 0.0, 'max_value': 1.0, 'var_type': 'bool', 'is_last': False, 'original_var': 'approach_air'}, {'name': 'PLA', 'min_value': -33.0, 'max_value': 85.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PLA'}]
处理的变量: ['airdis_WOW', 'approach_air', 'PLA']
预处理后的条件: PLA >= -33 and PLA < 0 and airdis_WOW == 0 and approach_air == 0
提取的原子条件: [('PLA', '>=', '-33'), ('PLA', '<', '0'), ('airdis_WOW', '==', '0'), ('approach_air', '==', '0')]
表达式结构: {'AND_EXPR_0': ('and', ['ATOM_0', 'ATOM_1', 'ATOM_2', 'ATOM_3'])}
根表达式: AND_EXPR_0
警告: 无法解析变量 -33
警告: 无法解析表达式 PLA >= -33
警告: 无法解析变量 0
警告: 无法解析表达式 PLA < 0
警告: 无法解析变量 0
警告: 无法解析表达式 airdis_WOW == 0
警告: 无法解析变量 0
警告: 无法解析表达式 approach_air == 0
构建的Z3表达式: And(True, True, True, True)
警告: 无法解析变量 -33
警告: 无法解析表达式 PLA >= -33
警告: 无法解析变量 0
警告: 无法解析表达式 PLA < 0
警告: 无法解析变量 0
警告: 无法解析表达式 airdis_WOW == 0
警告: 无法解析变量 0
警告: 无法解析表达式 approach_air == 0
生成的MCDC条件数量: 0
生成的MCDC条件数量: 0

处理条件 3: PLA >= -33 && PLA <= -31 && airdis_WOW == 1
解析后的Python条件表达式: PLA >= -33 and PLA <= -31 and airdis_WOW == 1
变量及其范围: [{'name': 'airdis_WOW', 'min_value': 0.0, 'max_value': 1.0, 'var_type': 'bool', 'is_last': False, 'original_var': 'airdis_WOW'}, {'name': 'PLA', 'min_value': -33.0, 'max_value': 85.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PLA'}]
解析后的条件: PLA >= -33 and PLA <= -31 and airdis_WOW == 1
识别到的变量: [{'name': 'airdis_WOW', 'min_value': 0.0, 'max_value': 1.0, 'var_type': 'bool', 'is_last': False, 'original_var': 'airdis_WOW'}, {'name': 'PLA', 'min_value': -33.0, 'max_value': 85.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PLA'}]
处理的变量: ['airdis_WOW', 'PLA']
预处理后的条件: PLA >= -33 and PLA <= -31 and airdis_WOW == 1
提取的原子条件: [('PLA', '>=', '-33'), ('PLA', '<=', '-31'), ('airdis_WOW', '==', '1')]
表达式结构: {'AND_EXPR_0': ('and', ['ATOM_0', 'ATOM_1', 'ATOM_2'])}
根表达式: AND_EXPR_0
警告: 无法解析变量 -33
警告: 无法解析表达式 PLA >= -33
警告: 无法解析变量 -31
警告: 无法解析表达式 PLA <= -31
警告: 无法解析变量 1
警告: 无法解析表达式 airdis_WOW == 1
构建的Z3表达式: And(True, True, True)
警告: 无法解析变量 -33
警告: 无法解析表达式 PLA >= -33
警告: 无法解析变量 -31
警告: 无法解析表达式 PLA <= -31
警告: 无法解析变量 1
警告: 无法解析表达式 airdis_WOW == 1
生成的MCDC条件数量: 0
生成的MCDC条件数量: 0

处理条件 4: PLA > -31 && PLA < -6 && airdis_WOW == 1
解析后的Python条件表达式: PLA > -31 and PLA < -6 and airdis_WOW == 1
变量及其范围: [{'name': 'airdis_WOW', 'min_value': 0.0, 'max_value': 1.0, 'var_type': 'bool', 'is_last': False, 'original_var': 'airdis_WOW'}, {'name': 'PLA', 'min_value': -33.0, 'max_value': 85.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PLA'}]
解析后的条件: PLA > -31 and PLA < -6 and airdis_WOW == 1
识别到的变量: [{'name': 'airdis_WOW', 'min_value': 0.0, 'max_value': 1.0, 'var_type': 'bool', 'is_last': False, 'original_var': 'airdis_WOW'}, {'name': 'PLA', 'min_value': -33.0, 'max_value': 85.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PLA'}]
处理的变量: ['airdis_WOW', 'PLA']
预处理后的条件: PLA > -31 and PLA < -6 and airdis_WOW == 1
提取的原子条件: [('PLA', '>', '-31'), ('PLA', '<', '-6'), ('airdis_WOW', '==', '1')]
表达式结构: {'AND_EXPR_0': ('and', ['ATOM_0', 'ATOM_1', 'ATOM_2'])}
根表达式: AND_EXPR_0
警告: 无法解析变量 -31
警告: 无法解析表达式 PLA > -31
警告: 无法解析变量 -6
警告: 无法解析表达式 PLA < -6
警告: 无法解析变量 1
警告: 无法解析表达式 airdis_WOW == 1
构建的Z3表达式: And(True, True, True)
警告: 无法解析变量 -31
警告: 无法解析表达式 PLA > -31
警告: 无法解析变量 -6
警告: 无法解析表达式 PLA < -6
警告: 无法解析变量 1
警告: 无法解析表达式 airdis_WOW == 1
生成的MCDC条件数量: 0
生成的MCDC条件数量: 0

处理条件 5: PLA >= -6 && PLA < 0 && airdis_WOW == 1
解析后的Python条件表达式: PLA >= -6 and PLA < 0 and airdis_WOW == 1
变量及其范围: [{'name': 'airdis_WOW', 'min_value': 0.0, 'max_value': 1.0, 'var_type': 'bool', 'is_last': False, 'original_var': 'airdis_WOW'}, {'name': 'PLA', 'min_value': -33.0, 'max_value': 85.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PLA'}]
解析后的条件: PLA >= -6 and PLA < 0 and airdis_WOW == 1
识别到的变量: [{'name': 'airdis_WOW', 'min_value': 0.0, 'max_value': 1.0, 'var_type': 'bool', 'is_last': False, 'original_var': 'airdis_WOW'}, {'name': 'PLA', 'min_value': -33.0, 'max_value': 85.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PLA'}]
处理的变量: ['airdis_WOW', 'PLA']
预处理后的条件: PLA >= -6 and PLA < 0 and airdis_WOW == 1
提取的原子条件: [('PLA', '>=', '-6'), ('PLA', '<', '0'), ('airdis_WOW', '==', '1')]
表达式结构: {'AND_EXPR_0': ('and', ['ATOM_0', 'ATOM_1', 'ATOM_2'])}
根表达式: AND_EXPR_0
警告: 无法解析变量 -6
警告: 无法解析表达式 PLA >= -6
警告: 无法解析变量 0
警告: 无法解析表达式 PLA < 0
警告: 无法解析变量 1
警告: 无法解析表达式 airdis_WOW == 1
构建的Z3表达式: And(True, True, True)
警告: 无法解析变量 -6
警告: 无法解析表达式 PLA >= -6
警告: 无法解析变量 0
警告: 无法解析表达式 PLA < 0
警告: 无法解析变量 1
警告: 无法解析表达式 airdis_WOW == 1
生成的MCDC条件数量: 0
生成的MCDC条件数量: 0

处理条件 6: PLA >= 0 && PLA <= 2 && airdis_WOW == 0 && approach_air == 1
解析后的Python条件表达式: PLA >= 0 and PLA <= 2 and airdis_WOW == 0 and approach_air == 1
变量及其范围: [{'name': 'airdis_WOW', 'min_value': 0.0, 'max_value': 1.0, 'var_type': 'bool', 'is_last': False, 'original_var': 'airdis_WOW'}, {'name': 'approach_air', 'min_value': 0.0, 'max_value': 1.0, 'var_type': 'bool', 'is_last': False, 'original_var': 'approach_air'}, {'name': 'PLA', 'min_value': -33.0, 'max_value': 85.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PLA'}]
解析后的条件: PLA >= 0 and PLA <= 2 and airdis_WOW == 0 and approach_air == 1
识别到的变量: [{'name': 'airdis_WOW', 'min_value': 0.0, 'max_value': 1.0, 'var_type': 'bool', 'is_last': False, 'original_var': 'airdis_WOW'}, {'name': 'approach_air', 'min_value': 0.0, 'max_value': 1.0, 'var_type': 'bool', 'is_last': False, 'original_var': 'approach_air'}, {'name': 'PLA', 'min_value': -33.0, 'max_value': 85.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PLA'}]
处理的变量: ['airdis_WOW', 'approach_air', 'PLA']
预处理后的条件: PLA >= 0 and PLA <= 2 and airdis_WOW == 0 and approach_air == 1
提取的原子条件: [('PLA', '>=', '0'), ('PLA', '<=', '2'), ('airdis_WOW', '==', '0'), ('approach_air', '==', '1')]
表达式结构: {'AND_EXPR_0': ('and', ['ATOM_0', 'ATOM_1', 'ATOM_2', 'ATOM_3'])}
根表达式: AND_EXPR_0
警告: 无法解析变量 0
警告: 无法解析表达式 PLA >= 0
警告: 无法解析变量 2
警告: 无法解析表达式 PLA <= 2
警告: 无法解析变量 0
警告: 无法解析表达式 airdis_WOW == 0
警告: 无法解析变量 1
警告: 无法解析表达式 approach_air == 1
构建的Z3表达式: And(True, True, True, True)
警告: 无法解析变量 0
警告: 无法解析表达式 PLA >= 0
警告: 无法解析变量 2
警告: 无法解析表达式 PLA <= 2
警告: 无法解析变量 0
警告: 无法解析表达式 airdis_WOW == 0
警告: 无法解析变量 1
警告: 无法解析表达式 approach_air == 1
生成的MCDC条件数量: 0
生成的MCDC条件数量: 0

处理条件 7: PLA >= 0 && PLA <= 2 && airdis_WOW == 0 && approach_air == 0
解析后的Python条件表达式: PLA >= 0 and PLA <= 2 and airdis_WOW == 0 and approach_air == 0
变量及其范围: [{'name': 'airdis_WOW', 'min_value': 0.0, 'max_value': 1.0, 'var_type': 'bool', 'is_last': False, 'original_var': 'airdis_WOW'}, {'name': 'approach_air', 'min_value': 0.0, 'max_value': 1.0, 'var_type': 'bool', 'is_last': False, 'original_var': 'approach_air'}, {'name': 'PLA', 'min_value': -33.0, 'max_value': 85.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PLA'}]
解析后的条件: PLA >= 0 and PLA <= 2 and airdis_WOW == 0 and approach_air == 0
识别到的变量: [{'name': 'airdis_WOW', 'min_value': 0.0, 'max_value': 1.0, 'var_type': 'bool', 'is_last': False, 'original_var': 'airdis_WOW'}, {'name': 'approach_air', 'min_value': 0.0, 'max_value': 1.0, 'var_type': 'bool', 'is_last': False, 'original_var': 'approach_air'}, {'name': 'PLA', 'min_value': -33.0, 'max_value': 85.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PLA'}]
处理的变量: ['airdis_WOW', 'approach_air', 'PLA']
预处理后的条件: PLA >= 0 and PLA <= 2 and airdis_WOW == 0 and approach_air == 0
提取的原子条件: [('PLA', '>=', '0'), ('PLA', '<=', '2'), ('airdis_WOW', '==', '0'), ('approach_air', '==', '0')]
表达式结构: {'AND_EXPR_0': ('and', ['ATOM_0', 'ATOM_1', 'ATOM_2', 'ATOM_3'])}
根表达式: AND_EXPR_0
警告: 无法解析变量 0
警告: 无法解析表达式 PLA >= 0
警告: 无法解析变量 2
警告: 无法解析表达式 PLA <= 2
警告: 无法解析变量 0
警告: 无法解析表达式 airdis_WOW == 0
警告: 无法解析变量 0
警告: 无法解析表达式 approach_air == 0
构建的Z3表达式: And(True, True, True, True)
警告: 无法解析变量 0
警告: 无法解析表达式 PLA >= 0
警告: 无法解析变量 2
警告: 无法解析表达式 PLA <= 2
警告: 无法解析变量 0
警告: 无法解析表达式 airdis_WOW == 0
警告: 无法解析变量 0
警告: 无法解析表达式 approach_air == 0
生成的MCDC条件数量: 0
生成的MCDC条件数量: 0

处理条件 8: PLA > 2 && PLA < 59
解析后的Python条件表达式: PLA > 2 and PLA < 59
变量及其范围: [{'name': 'PLA', 'min_value': -33.0, 'max_value': 85.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PLA'}]
解析后的条件: PLA > 2 and PLA < 59
识别到的变量: [{'name': 'PLA', 'min_value': -33.0, 'max_value': 85.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PLA'}]
处理的变量: ['PLA']
预处理后的条件: PLA > 2 and PLA < 59
提取的原子条件: [('PLA', '>', '2'), ('PLA', '<', '59')]
表达式结构: {'AND_EXPR_0': ('and', ['ATOM_0', 'ATOM_1'])}
根表达式: AND_EXPR_0
警告: 无法解析变量 2
警告: 无法解析表达式 PLA > 2
警告: 无法解析变量 59
警告: 无法解析表达式 PLA < 59
构建的Z3表达式: And(True, True)
警告: 无法解析变量 2
警告: 无法解析表达式 PLA > 2
警告: 无法解析变量 59
警告: 无法解析表达式 PLA < 59
生成的MCDC条件数量: 0
生成的MCDC条件数量: 0

处理条件 9: PLA >= 59 && PLA <= 61
解析后的Python条件表达式: PLA >= 59 and PLA <= 61
变量及其范围: [{'name': 'PLA', 'min_value': -33.0, 'max_value': 85.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PLA'}]
解析后的条件: PLA >= 59 and PLA <= 61
识别到的变量: [{'name': 'PLA', 'min_value': -33.0, 'max_value': 85.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PLA'}]
处理的变量: ['PLA']
预处理后的条件: PLA >= 59 and PLA <= 61
提取的原子条件: [('PLA', '>=', '59'), ('PLA', '<=', '61')]
表达式结构: {'AND_EXPR_0': ('and', ['ATOM_0', 'ATOM_1'])}
根表达式: AND_EXPR_0
警告: 无法解析变量 59
警告: 无法解析表达式 PLA >= 59
警告: 无法解析变量 61
警告: 无法解析表达式 PLA <= 61
构建的Z3表达式: And(True, True)
警告: 无法解析变量 59
警告: 无法解析表达式 PLA >= 59
警告: 无法解析变量 61
警告: 无法解析表达式 PLA <= 61
生成的MCDC条件数量: 0
生成的MCDC条件数量: 0

处理条件 10: PLA > 61 && PLA < 64
解析后的Python条件表达式: PLA > 61 and PLA < 64
变量及其范围: [{'name': 'PLA', 'min_value': -33.0, 'max_value': 85.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PLA'}]
解析后的条件: PLA > 61 and PLA < 64
识别到的变量: [{'name': 'PLA', 'min_value': -33.0, 'max_value': 85.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PLA'}]
处理的变量: ['PLA']
预处理后的条件: PLA > 61 and PLA < 64
提取的原子条件: [('PLA', '>', '61'), ('PLA', '<', '64')]
表达式结构: {'AND_EXPR_0': ('and', ['ATOM_0', 'ATOM_1'])}
根表达式: AND_EXPR_0
警告: 无法解析变量 61
警告: 无法解析表达式 PLA > 61
警告: 无法解析变量 64
警告: 无法解析表达式 PLA < 64
构建的Z3表达式: And(True, True)
警告: 无法解析变量 61
警告: 无法解析表达式 PLA > 61
警告: 无法解析变量 64
警告: 无法解析表达式 PLA < 64
生成的MCDC条件数量: 0
生成的MCDC条件数量: 0

处理条件 11: PLA >= 64 && PLA <= 66 && TL_require != DCL1 && TL_require!= DCL2
解析后的Python条件表达式: PLA >= 64 and PLA <= 66 and TL_require != DCL1 and TL_require != DCL2
变量及其范围: [{'name': 'DCL1', 'min_value': 5.0, 'max_value': 5.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'DCL1', 'constant_value': 5.0}, {'name': 'DCL2', 'min_value': 6.0, 'max_value': 6.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'DCL2', 'constant_value': 6.0}, {'name': 'PLA', 'min_value': -33.0, 'max_value': 85.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PLA'}, {'name': 'TL_require', 'min_value': 0.0, 'max_value': 6.0, 'var_type': 'int', 'is_last': False, 'original_var': 'TL_require'}]
解析后的条件: PLA >= 64 and PLA <= 66 and TL_require != DCL1 and TL_require != DCL2
识别到的变量: [{'name': 'DCL1', 'min_value': 5.0, 'max_value': 5.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'DCL1', 'constant_value': 5.0}, {'name': 'DCL2', 'min_value': 6.0, 'max_value': 6.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'DCL2', 'constant_value': 6.0}, {'name': 'PLA', 'min_value': -33.0, 'max_value': 85.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PLA'}, {'name': 'TL_require', 'min_value': 0.0, 'max_value': 6.0, 'var_type': 'int', 'is_last': False, 'original_var': 'TL_require'}]
处理的变量: ['DCL1', 'DCL2', 'PLA', 'TL_require']
预处理后的条件: PLA >= 64 and PLA <= 66 and TL_require != DCL1 and TL_require != DCL2
提取的原子条件: [('PLA', '>=', '64'), ('PLA', '<=', '66'), ('TL_require', '!=', 'DCL1'), ('TL_require', '!=', 'DCL2')]
表达式结构: {'AND_EXPR_0': ('and', ['ATOM_0', 'ATOM_1', 'ATOM_2', 'ATOM_3'])}
根表达式: AND_EXPR_0
警告: 无法解析变量 64
警告: 无法解析表达式 PLA >= 64
警告: 无法解析变量 66
警告: 无法解析表达式 PLA <= 66
构建的Z3表达式: And(True, True, 5 != TL_require, 6 != TL_require)
警告: 无法解析变量 64
警告: 无法解析表达式 PLA >= 64
警告: 无法解析变量 66
警告: 无法解析表达式 PLA <= 66
为原子条件 'TL_require != DCL1' 生成MCDC测试用例
为原子条件 'TL_require != DCL2' 生成MCDC测试用例
生成的MCDC条件数量: 2
生成的MCDC条件数量: 2

处理条件 12: PLA >= 64 && PLA <= 66 && TL_require == DCL1
解析后的Python条件表达式: PLA >= 64 and PLA <= 66 and TL_require == DCL1
变量及其范围: [{'name': 'DCL1', 'min_value': 5.0, 'max_value': 5.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'DCL1', 'constant_value': 5.0}, {'name': 'PLA', 'min_value': -33.0, 'max_value': 85.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PLA'}, {'name': 'TL_require', 'min_value': 0.0, 'max_value': 6.0, 'var_type': 'int', 'is_last': False, 'original_var': 'TL_require'}]
解析后的条件: PLA >= 64 and PLA <= 66 and TL_require == DCL1
识别到的变量: [{'name': 'DCL1', 'min_value': 5.0, 'max_value': 5.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'DCL1', 'constant_value': 5.0}, {'name': 'PLA', 'min_value': -33.0, 'max_value': 85.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PLA'}, {'name': 'TL_require', 'min_value': 0.0, 'max_value': 6.0, 'var_type': 'int', 'is_last': False, 'original_var': 'TL_require'}]
处理的变量: ['DCL1', 'PLA', 'TL_require']
预处理后的条件: PLA >= 64 and PLA <= 66 and TL_require == DCL1
提取的原子条件: [('PLA', '>=', '64'), ('PLA', '<=', '66'), ('TL_require', '==', 'DCL1')]
表达式结构: {'AND_EXPR_0': ('and', ['ATOM_0', 'ATOM_1', 'ATOM_2'])}
根表达式: AND_EXPR_0
警告: 无法解析变量 64
警告: 无法解析表达式 PLA >= 64
警告: 无法解析变量 66
警告: 无法解析表达式 PLA <= 66
构建的Z3表达式: And(True, True, 5 == TL_require)
警告: 无法解析变量 64
警告: 无法解析表达式 PLA >= 64
警告: 无法解析变量 66
警告: 无法解析表达式 PLA <= 66
为原子条件 'TL_require == DCL1' 生成MCDC测试用例
生成的MCDC条件数量: 1
生成的MCDC条件数量: 1

处理条件 13: PLA >= 64 && PLA <= 66 && TL_require == DCL2
解析后的Python条件表达式: PLA >= 64 and PLA <= 66 and TL_require == DCL2
变量及其范围: [{'name': 'DCL2', 'min_value': 6.0, 'max_value': 6.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'DCL2', 'constant_value': 6.0}, {'name': 'PLA', 'min_value': -33.0, 'max_value': 85.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PLA'}, {'name': 'TL_require', 'min_value': 0.0, 'max_value': 6.0, 'var_type': 'int', 'is_last': False, 'original_var': 'TL_require'}]
解析后的条件: PLA >= 64 and PLA <= 66 and TL_require == DCL2
识别到的变量: [{'name': 'DCL2', 'min_value': 6.0, 'max_value': 6.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'DCL2', 'constant_value': 6.0}, {'name': 'PLA', 'min_value': -33.0, 'max_value': 85.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PLA'}, {'name': 'TL_require', 'min_value': 0.0, 'max_value': 6.0, 'var_type': 'int', 'is_last': False, 'original_var': 'TL_require'}]
处理的变量: ['DCL2', 'PLA', 'TL_require']
预处理后的条件: PLA >= 64 and PLA <= 66 and TL_require == DCL2
提取的原子条件: [('PLA', '>=', '64'), ('PLA', '<=', '66'), ('TL_require', '==', 'DCL2')]
表达式结构: {'AND_EXPR_0': ('and', ['ATOM_0', 'ATOM_1', 'ATOM_2'])}
根表达式: AND_EXPR_0
警告: 无法解析变量 64
警告: 无法解析表达式 PLA >= 64
警告: 无法解析变量 66
警告: 无法解析表达式 PLA <= 66
构建的Z3表达式: And(True, True, 6 == TL_require)
警告: 无法解析变量 64
警告: 无法解析表达式 PLA >= 64
警告: 无法解析变量 66
警告: 无法解析表达式 PLA <= 66
为原子条件 'TL_require == DCL2' 生成MCDC测试用例
生成的MCDC条件数量: 1
生成的MCDC条件数量: 1

处理条件 14: PLA > 66 && PLA < 69
解析后的Python条件表达式: PLA > 66 and PLA < 69
变量及其范围: [{'name': 'PLA', 'min_value': -33.0, 'max_value': 85.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PLA'}]
解析后的条件: PLA > 66 and PLA < 69
识别到的变量: [{'name': 'PLA', 'min_value': -33.0, 'max_value': 85.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PLA'}]
处理的变量: ['PLA']
预处理后的条件: PLA > 66 and PLA < 69
提取的原子条件: [('PLA', '>', '66'), ('PLA', '<', '69')]
表达式结构: {'AND_EXPR_0': ('and', ['ATOM_0', 'ATOM_1'])}
根表达式: AND_EXPR_0
警告: 无法解析变量 66
警告: 无法解析表达式 PLA > 66
警告: 无法解析变量 69
警告: 无法解析表达式 PLA < 69
构建的Z3表达式: And(True, True)
警告: 无法解析变量 66
警告: 无法解析表达式 PLA > 66
警告: 无法解析变量 69
警告: 无法解析表达式 PLA < 69
生成的MCDC条件数量: 0
生成的MCDC条件数量: 0

处理条件 15: PLA >= 69 && PLA <= 71
解析后的Python条件表达式: PLA >= 69 and PLA <= 71
变量及其范围: [{'name': 'PLA', 'min_value': -33.0, 'max_value': 85.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PLA'}]
解析后的条件: PLA >= 69 and PLA <= 71
识别到的变量: [{'name': 'PLA', 'min_value': -33.0, 'max_value': 85.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PLA'}]
处理的变量: ['PLA']
预处理后的条件: PLA >= 69 and PLA <= 71
提取的原子条件: [('PLA', '>=', '69'), ('PLA', '<=', '71')]
表达式结构: {'AND_EXPR_0': ('and', ['ATOM_0', 'ATOM_1'])}
根表达式: AND_EXPR_0
警告: 无法解析变量 69
警告: 无法解析表达式 PLA >= 69
警告: 无法解析变量 71
警告: 无法解析表达式 PLA <= 71
构建的Z3表达式: And(True, True)
警告: 无法解析变量 69
警告: 无法解析表达式 PLA >= 69
警告: 无法解析变量 71
警告: 无法解析表达式 PLA <= 71
生成的MCDC条件数量: 0
生成的MCDC条件数量: 0

处理条件 16: PLA > 71 && PLA < 74
解析后的Python条件表达式: PLA > 71 and PLA < 74
变量及其范围: [{'name': 'PLA', 'min_value': -33.0, 'max_value': 85.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PLA'}]
解析后的条件: PLA > 71 and PLA < 74
识别到的变量: [{'name': 'PLA', 'min_value': -33.0, 'max_value': 85.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PLA'}]
处理的变量: ['PLA']
预处理后的条件: PLA > 71 and PLA < 74
提取的原子条件: [('PLA', '>', '71'), ('PLA', '<', '74')]
表达式结构: {'AND_EXPR_0': ('and', ['ATOM_0', 'ATOM_1'])}
根表达式: AND_EXPR_0
警告: 无法解析变量 71
警告: 无法解析表达式 PLA > 71
警告: 无法解析变量 74
警告: 无法解析表达式 PLA < 74
构建的Z3表达式: And(True, True)
警告: 无法解析变量 71
警告: 无法解析表达式 PLA > 71
警告: 无法解析变量 74
警告: 无法解析表达式 PLA < 74
生成的MCDC条件数量: 0
生成的MCDC条件数量: 0

处理条件 17: PLA >= 74 && PLA <= 76 && TL_require!=DTO1 && TL_require!=DTO2 && TL_require!=GA && TL_require!=Bump && (TL_require!=FLEXTO ||  (TL_require == FLEXTO && flex_dT_flag == 0) )
解析后的Python条件表达式: PLA >= 74 and PLA <= 76 and TL_require != DTO1 and TL_require != DTO2 and TL_require != GA and TL_require != Bump and (TL_require != FLEXTO or (TL_require == FLEXTO and flex_dT_flag == 0))
变量及其范围: [{'name': 'Bump', 'min_value': 3.0, 'max_value': 3.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'Bump', 'constant_value': 3.0}, {'name': 'GA', 'min_value': 2.0, 'max_value': 2.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'GA', 'constant_value': 2.0}, {'name': 'DTO1', 'min_value': 0.0, 'max_value': 0.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'DTO1', 'constant_value': 0.0}, {'name': 'flex_dT_flag', 'min_value': 0.0, 'max_value': 1.0, 'var_type': 'bool', 'is_last': False, 'original_var': 'flex_dT_flag'}, {'name': 'TL_require', 'min_value': 0.0, 'max_value': 6.0, 'var_type': 'int', 'is_last': False, 'original_var': 'TL_require'}, {'name': 'DTO2', 'min_value': 1.0, 'max_value': 1.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'DTO2', 'constant_value': 1.0}, {'name': 'PLA', 'min_value': -33.0, 'max_value': 85.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PLA'}, {'name': 'FLEXTO', 'min_value': 4.0, 'max_value': 4.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'FLEXTO', 'constant_value': 4.0}]
解析后的条件: PLA >= 74 and PLA <= 76 and TL_require != DTO1 and TL_require != DTO2 and TL_require != GA and TL_require != Bump and (TL_require != FLEXTO or (TL_require == FLEXTO and flex_dT_flag == 0))
识别到的变量: [{'name': 'Bump', 'min_value': 3.0, 'max_value': 3.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'Bump', 'constant_value': 3.0}, {'name': 'GA', 'min_value': 2.0, 'max_value': 2.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'GA', 'constant_value': 2.0}, {'name': 'DTO1', 'min_value': 0.0, 'max_value': 0.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'DTO1', 'constant_value': 0.0}, {'name': 'flex_dT_flag', 'min_value': 0.0, 'max_value': 1.0, 'var_type': 'bool', 'is_last': False, 'original_var': 'flex_dT_flag'}, {'name': 'TL_require', 'min_value': 0.0, 'max_value': 6.0, 'var_type': 'int', 'is_last': False, 'original_var': 'TL_require'}, {'name': 'DTO2', 'min_value': 1.0, 'max_value': 1.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'DTO2', 'constant_value': 1.0}, {'name': 'PLA', 'min_value': -33.0, 'max_value': 85.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PLA'}, {'name': 'FLEXTO', 'min_value': 4.0, 'max_value': 4.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'FLEXTO', 'constant_value': 4.0}]
处理的变量: ['Bump', 'GA', 'DTO1', 'flex_dT_flag', 'TL_require', 'DTO2', 'PLA', 'FLEXTO']
预处理后的条件: PLA >= 74 and PLA <= 76 and TL_require != DTO1 and TL_require != DTO2 and TL_require != GA and TL_require != Bump and (TL_require != FLEXTO or (TL_require == FLEXTO and flex_dT_flag == 0))
提取的原子条件: [('PLA', '>=', '74'), ('PLA', '<=', '76'), ('TL_require', '!=', 'DTO1'), ('TL_require', '!=', 'DTO2'), ('TL_require', '!=', 'GA'), ('TL_require', '!=', 'Bump'), ('TL_require', '!=', 'FLEXTO'), ('TL_require', '==', 'FLEXTO'), ('flex_dT_flag', '==', '0')]
表达式结构: {'AND_EXPR_2': ('and', ['ATOM_7', 'ATOM_8']), 'OR_EXPR_1': ('or', ['ATOM_6', 'AND_EXPR_2']), 'AND_EXPR_0': ('and', ['ATOM_0', 'ATOM_1', 'ATOM_2', 'ATOM_3', 'ATOM_4', 'ATOM_5', 'OR_EXPR_1'])}
根表达式: AND_EXPR_0
警告: 无法解析变量 74
警告: 无法解析表达式 PLA >= 74
警告: 无法解析变量 76
警告: 无法解析表达式 PLA <= 76
警告: 无法解析变量 0
警告: 无法解析表达式 flex_dT_flag == 0
构建的Z3表达式: And(True,
    True,
    0 != TL_require,
    1 != TL_require,
    2 != TL_require,
    3 != TL_require,
    Or(4 != TL_require, And(4 == TL_require, True)))
警告: 无法解析变量 74
警告: 无法解析表达式 PLA >= 74
警告: 无法解析变量 76
警告: 无法解析表达式 PLA <= 76
为原子条件 'TL_require != DTO1' 生成MCDC测试用例
为原子条件 'TL_require != DTO2' 生成MCDC测试用例
为原子条件 'TL_require != GA' 生成MCDC测试用例
为原子条件 'TL_require != Bump' 生成MCDC测试用例
为原子条件 'TL_require == FLEXTO' 生成MCDC测试用例
警告: 无法解析变量 0
警告: 无法解析表达式 flex_dT_flag == 0
生成的MCDC条件数量: 5
生成的MCDC条件数量: 5

处理条件 18: PLA >= 74 && PLA <= 76  && TL_require == DTO1
解析后的Python条件表达式: PLA >= 74 and PLA <= 76 and TL_require == DTO1
变量及其范围: [{'name': 'DTO1', 'min_value': 0.0, 'max_value': 0.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'DTO1', 'constant_value': 0.0}, {'name': 'PLA', 'min_value': -33.0, 'max_value': 85.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PLA'}, {'name': 'TL_require', 'min_value': 0.0, 'max_value': 6.0, 'var_type': 'int', 'is_last': False, 'original_var': 'TL_require'}]
解析后的条件: PLA >= 74 and PLA <= 76 and TL_require == DTO1
识别到的变量: [{'name': 'DTO1', 'min_value': 0.0, 'max_value': 0.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'DTO1', 'constant_value': 0.0}, {'name': 'PLA', 'min_value': -33.0, 'max_value': 85.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PLA'}, {'name': 'TL_require', 'min_value': 0.0, 'max_value': 6.0, 'var_type': 'int', 'is_last': False, 'original_var': 'TL_require'}]
处理的变量: ['DTO1', 'PLA', 'TL_require']
预处理后的条件: PLA >= 74 and PLA <= 76 and TL_require == DTO1
提取的原子条件: [('PLA', '>=', '74'), ('PLA', '<=', '76'), ('TL_require', '==', 'DTO1')]
表达式结构: {'AND_EXPR_0': ('and', ['ATOM_0', 'ATOM_1', 'ATOM_2'])}
根表达式: AND_EXPR_0
警告: 无法解析变量 74
警告: 无法解析表达式 PLA >= 74
警告: 无法解析变量 76
警告: 无法解析表达式 PLA <= 76
构建的Z3表达式: And(True, True, 0 == TL_require)
警告: 无法解析变量 74
警告: 无法解析表达式 PLA >= 74
警告: 无法解析变量 76
警告: 无法解析表达式 PLA <= 76
为原子条件 'TL_require == DTO1' 生成MCDC测试用例
生成的MCDC条件数量: 1
生成的MCDC条件数量: 1

处理条件 19: PLA >= 74 && PLA <= 76 && TL_require == DTO2
解析后的Python条件表达式: PLA >= 74 and PLA <= 76 and TL_require == DTO2
变量及其范围: [{'name': 'DTO2', 'min_value': 1.0, 'max_value': 1.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'DTO2', 'constant_value': 1.0}, {'name': 'PLA', 'min_value': -33.0, 'max_value': 85.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PLA'}, {'name': 'TL_require', 'min_value': 0.0, 'max_value': 6.0, 'var_type': 'int', 'is_last': False, 'original_var': 'TL_require'}]
解析后的条件: PLA >= 74 and PLA <= 76 and TL_require == DTO2
识别到的变量: [{'name': 'DTO2', 'min_value': 1.0, 'max_value': 1.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'DTO2', 'constant_value': 1.0}, {'name': 'PLA', 'min_value': -33.0, 'max_value': 85.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PLA'}, {'name': 'TL_require', 'min_value': 0.0, 'max_value': 6.0, 'var_type': 'int', 'is_last': False, 'original_var': 'TL_require'}]
处理的变量: ['DTO2', 'PLA', 'TL_require']
预处理后的条件: PLA >= 74 and PLA <= 76 and TL_require == DTO2
提取的原子条件: [('PLA', '>=', '74'), ('PLA', '<=', '76'), ('TL_require', '==', 'DTO2')]
表达式结构: {'AND_EXPR_0': ('and', ['ATOM_0', 'ATOM_1', 'ATOM_2'])}
根表达式: AND_EXPR_0
警告: 无法解析变量 74
警告: 无法解析表达式 PLA >= 74
警告: 无法解析变量 76
警告: 无法解析表达式 PLA <= 76
构建的Z3表达式: And(True, True, 1 == TL_require)
警告: 无法解析变量 74
警告: 无法解析表达式 PLA >= 74
警告: 无法解析变量 76
警告: 无法解析表达式 PLA <= 76
为原子条件 'TL_require == DTO2' 生成MCDC测试用例
生成的MCDC条件数量: 1
生成的MCDC条件数量: 1

处理条件 20: PLA >= 74 && PLA <= 76 && TL_require == GA
解析后的Python条件表达式: PLA >= 74 and PLA <= 76 and TL_require == GA
变量及其范围: [{'name': 'PLA', 'min_value': -33.0, 'max_value': 85.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PLA'}, {'name': 'TL_require', 'min_value': 0.0, 'max_value': 6.0, 'var_type': 'int', 'is_last': False, 'original_var': 'TL_require'}, {'name': 'GA', 'min_value': 2.0, 'max_value': 2.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'GA', 'constant_value': 2.0}]
解析后的条件: PLA >= 74 and PLA <= 76 and TL_require == GA
识别到的变量: [{'name': 'PLA', 'min_value': -33.0, 'max_value': 85.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PLA'}, {'name': 'TL_require', 'min_value': 0.0, 'max_value': 6.0, 'var_type': 'int', 'is_last': False, 'original_var': 'TL_require'}, {'name': 'GA', 'min_value': 2.0, 'max_value': 2.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'GA', 'constant_value': 2.0}]
处理的变量: ['PLA', 'TL_require', 'GA']
预处理后的条件: PLA >= 74 and PLA <= 76 and TL_require == GA
提取的原子条件: [('PLA', '>=', '74'), ('PLA', '<=', '76'), ('TL_require', '==', 'GA')]
表达式结构: {'AND_EXPR_0': ('and', ['ATOM_0', 'ATOM_1', 'ATOM_2'])}
根表达式: AND_EXPR_0
警告: 无法解析变量 74
警告: 无法解析表达式 PLA >= 74
警告: 无法解析变量 76
警告: 无法解析表达式 PLA <= 76
构建的Z3表达式: And(True, True, 2 == TL_require)
警告: 无法解析变量 74
警告: 无法解析表达式 PLA >= 74
警告: 无法解析变量 76
警告: 无法解析表达式 PLA <= 76
为原子条件 'TL_require == GA' 生成MCDC测试用例
生成的MCDC条件数量: 1
生成的MCDC条件数量: 1

处理条件 21: PLA >= 74 && PLA <= 76 && TL_require == FLEXTO && flex_dT_flag == 1
解析后的Python条件表达式: PLA >= 74 and PLA <= 76 and TL_require == FLEXTO and flex_dT_flag == 1
变量及其范围: [{'name': 'PLA', 'min_value': -33.0, 'max_value': 85.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PLA'}, {'name': 'FLEXTO', 'min_value': 4.0, 'max_value': 4.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'FLEXTO', 'constant_value': 4.0}, {'name': 'flex_dT_flag', 'min_value': 0.0, 'max_value': 1.0, 'var_type': 'bool', 'is_last': False, 'original_var': 'flex_dT_flag'}, {'name': 'TL_require', 'min_value': 0.0, 'max_value': 6.0, 'var_type': 'int', 'is_last': False, 'original_var': 'TL_require'}]
解析后的条件: PLA >= 74 and PLA <= 76 and TL_require == FLEXTO and flex_dT_flag == 1
识别到的变量: [{'name': 'PLA', 'min_value': -33.0, 'max_value': 85.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PLA'}, {'name': 'FLEXTO', 'min_value': 4.0, 'max_value': 4.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'FLEXTO', 'constant_value': 4.0}, {'name': 'flex_dT_flag', 'min_value': 0.0, 'max_value': 1.0, 'var_type': 'bool', 'is_last': False, 'original_var': 'flex_dT_flag'}, {'name': 'TL_require', 'min_value': 0.0, 'max_value': 6.0, 'var_type': 'int', 'is_last': False, 'original_var': 'TL_require'}]
处理的变量: ['PLA', 'FLEXTO', 'flex_dT_flag', 'TL_require']
预处理后的条件: PLA >= 74 and PLA <= 76 and TL_require == FLEXTO and flex_dT_flag == 1
提取的原子条件: [('PLA', '>=', '74'), ('PLA', '<=', '76'), ('TL_require', '==', 'FLEXTO'), ('flex_dT_flag', '==', '1')]
表达式结构: {'AND_EXPR_0': ('and', ['ATOM_0', 'ATOM_1', 'ATOM_2', 'ATOM_3'])}
根表达式: AND_EXPR_0
警告: 无法解析变量 74
警告: 无法解析表达式 PLA >= 74
警告: 无法解析变量 76
警告: 无法解析表达式 PLA <= 76
警告: 无法解析变量 1
警告: 无法解析表达式 flex_dT_flag == 1
构建的Z3表达式: And(True, True, 4 == TL_require, True)
警告: 无法解析变量 74
警告: 无法解析表达式 PLA >= 74
警告: 无法解析变量 76
警告: 无法解析表达式 PLA <= 76
为原子条件 'TL_require == FLEXTO' 生成MCDC测试用例
警告: 无法解析变量 1
警告: 无法解析表达式 flex_dT_flag == 1
生成的MCDC条件数量: 1
生成的MCDC条件数量: 1

处理条件 22: PLA >= 74 && PLA <= 76  && TL_require == Bump
解析后的Python条件表达式: PLA >= 74 and PLA <= 76 and TL_require == Bump
变量及其范围: [{'name': 'Bump', 'min_value': 3.0, 'max_value': 3.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'Bump', 'constant_value': 3.0}, {'name': 'PLA', 'min_value': -33.0, 'max_value': 85.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PLA'}, {'name': 'TL_require', 'min_value': 0.0, 'max_value': 6.0, 'var_type': 'int', 'is_last': False, 'original_var': 'TL_require'}]
解析后的条件: PLA >= 74 and PLA <= 76 and TL_require == Bump
识别到的变量: [{'name': 'Bump', 'min_value': 3.0, 'max_value': 3.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'Bump', 'constant_value': 3.0}, {'name': 'PLA', 'min_value': -33.0, 'max_value': 85.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PLA'}, {'name': 'TL_require', 'min_value': 0.0, 'max_value': 6.0, 'var_type': 'int', 'is_last': False, 'original_var': 'TL_require'}]
处理的变量: ['Bump', 'PLA', 'TL_require']
预处理后的条件: PLA >= 74 and PLA <= 76 and TL_require == Bump
提取的原子条件: [('PLA', '>=', '74'), ('PLA', '<=', '76'), ('TL_require', '==', 'Bump')]
表达式结构: {'AND_EXPR_0': ('and', ['ATOM_0', 'ATOM_1', 'ATOM_2'])}
根表达式: AND_EXPR_0
警告: 无法解析变量 74
警告: 无法解析表达式 PLA >= 74
警告: 无法解析变量 76
警告: 无法解析表达式 PLA <= 76
构建的Z3表达式: And(True, True, 3 == TL_require)
警告: 无法解析变量 74
警告: 无法解析表达式 PLA >= 74
警告: 无法解析变量 76
警告: 无法解析表达式 PLA <= 76
为原子条件 'TL_require == Bump' 生成MCDC测试用例
生成的MCDC条件数量: 1
生成的MCDC条件数量: 1

处理条件 23: PLA > 76 && PLA < 81
解析后的Python条件表达式: PLA > 76 and PLA < 81
变量及其范围: [{'name': 'PLA', 'min_value': -33.0, 'max_value': 85.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PLA'}]
解析后的条件: PLA > 76 and PLA < 81
识别到的变量: [{'name': 'PLA', 'min_value': -33.0, 'max_value': 85.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PLA'}]
处理的变量: ['PLA']
预处理后的条件: PLA > 76 and PLA < 81
提取的原子条件: [('PLA', '>', '76'), ('PLA', '<', '81')]
表达式结构: {'AND_EXPR_0': ('and', ['ATOM_0', 'ATOM_1'])}
根表达式: AND_EXPR_0
警告: 无法解析变量 76
警告: 无法解析表达式 PLA > 76
警告: 无法解析变量 81
警告: 无法解析表达式 PLA < 81
构建的Z3表达式: And(True, True)
警告: 无法解析变量 76
警告: 无法解析表达式 PLA > 76
警告: 无法解析变量 81
警告: 无法解析表达式 PLA < 81
生成的MCDC条件数量: 0
生成的MCDC条件数量: 0

处理条件 24: PLA >= 81 && PLA <= 85
解析后的Python条件表达式: PLA >= 81 and PLA <= 85
变量及其范围: [{'name': 'PLA', 'min_value': -33.0, 'max_value': 85.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PLA'}]
解析后的条件: PLA >= 81 and PLA <= 85
识别到的变量: [{'name': 'PLA', 'min_value': -33.0, 'max_value': 85.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PLA'}]
处理的变量: ['PLA']
预处理后的条件: PLA >= 81 and PLA <= 85
提取的原子条件: [('PLA', '>=', '81'), ('PLA', '<=', '85')]
表达式结构: {'AND_EXPR_0': ('and', ['ATOM_0', 'ATOM_1'])}
根表达式: AND_EXPR_0
警告: 无法解析变量 81
警告: 无法解析表达式 PLA >= 81
警告: 无法解析变量 85
警告: 无法解析表达式 PLA <= 85
构建的Z3表达式: And(True, True)
警告: 无法解析变量 81
警告: 无法解析表达式 PLA >= 81
警告: 无法解析变量 85
警告: 无法解析表达式 PLA <= 85
生成的MCDC条件数量: 0
生成的MCDC条件数量: 0

生成的测试用例:
- 条件: PLA >= 64 && PLA <= 66 && TL_require != DCL1 && TL_require!= DCL2
  测试用例: DCL1=5.0, DCL2=6.0, PLA=0.0, TL_require=0
  预期结果: False
- 条件: PLA >= 64 && PLA <= 66 && TL_require != DCL1 && TL_require!= DCL2
  测试用例: DCL1=5.0, DCL2=6.0, PLA=0.0, TL_require=5
  预期结果: False
- 条件: PLA >= 64 && PLA <= 66 && TL_require != DCL1 && TL_require!= DCL2
  测试用例: DCL1=5.0, DCL2=6.0, PLA=0.0, TL_require=4
  预期结果: False
- 条件: PLA >= 64 && PLA <= 66 && TL_require != DCL1 && TL_require!= DCL2
  测试用例: DCL1=5.0, DCL2=6.0, PLA=0.0, TL_require=6
  预期结果: False
- 条件: PLA >= 64 && PLA <= 66 && TL_require == DCL1
  测试用例: DCL1=5.0, PLA=0.0, TL_require=5
  预期结果: False
- 条件: PLA >= 64 && PLA <= 66 && TL_require == DCL1
  测试用例: DCL1=5.0, PLA=0.0, TL_require=4
  预期结果: False
- 条件: PLA >= 64 && PLA <= 66 && TL_require == DCL2
  测试用例: DCL2=6.0, PLA=0.0, TL_require=6
  预期结果: False
- 条件: PLA >= 64 && PLA <= 66 && TL_require == DCL2
  测试用例: DCL2=6.0, PLA=0.0, TL_require=5
  预期结果: False
- 条件: PLA >= 74 && PLA <= 76 && TL_require!=DTO1 && TL_require!=DTO2 && TL_require!=GA && TL_require!=Bump && (TL_require!=FLEXTO ||  (TL_require == FLEXTO && flex_dT_flag == 0) )
  测试用例: Bump=3.0, DTO1=0.0, DTO2=1.0, FLEXTO=4.0, GA=2.0, PLA=0.0, TL_require=4, flex_dT_flag=0.5
  预期结果: False
- 条件: PLA >= 74 && PLA <= 76 && TL_require!=DTO1 && TL_require!=DTO2 && TL_require!=GA && TL_require!=Bump && (TL_require!=FLEXTO ||  (TL_require == FLEXTO && flex_dT_flag == 0) )
  测试用例: Bump=3.0, DTO1=0.0, DTO2=1.0, FLEXTO=4.0, GA=2.0, PLA=0.0, TL_require=0, flex_dT_flag=0.5
  预期结果: False
- 条件: PLA >= 74 && PLA <= 76 && TL_require!=DTO1 && TL_require!=DTO2 && TL_require!=GA && TL_require!=Bump && (TL_require!=FLEXTO ||  (TL_require == FLEXTO && flex_dT_flag == 0) )
  测试用例: Bump=3.0, DTO1=0.0, DTO2=1.0, FLEXTO=4.0, GA=2.0, PLA=0.0, TL_require=4, flex_dT_flag=0.5
  预期结果: False
- 条件: PLA >= 74 && PLA <= 76 && TL_require!=DTO1 && TL_require!=DTO2 && TL_require!=GA && TL_require!=Bump && (TL_require!=FLEXTO ||  (TL_require == FLEXTO && flex_dT_flag == 0) )
  测试用例: Bump=3.0, DTO1=0.0, DTO2=1.0, FLEXTO=4.0, GA=2.0, PLA=0.0, TL_require=1, flex_dT_flag=0.5
  预期结果: False
- 条件: PLA >= 74 && PLA <= 76 && TL_require!=DTO1 && TL_require!=DTO2 && TL_require!=GA && TL_require!=Bump && (TL_require!=FLEXTO ||  (TL_require == FLEXTO && flex_dT_flag == 0) )
  测试用例: Bump=3.0, DTO1=0.0, DTO2=1.0, FLEXTO=4.0, GA=2.0, PLA=0.0, TL_require=4, flex_dT_flag=0.5
  预期结果: False
- 条件: PLA >= 74 && PLA <= 76 && TL_require!=DTO1 && TL_require!=DTO2 && TL_require!=GA && TL_require!=Bump && (TL_require!=FLEXTO ||  (TL_require == FLEXTO && flex_dT_flag == 0) )
  测试用例: Bump=3.0, DTO1=0.0, DTO2=1.0, FLEXTO=4.0, GA=2.0, PLA=0.0, TL_require=2, flex_dT_flag=0.5
  预期结果: False
- 条件: PLA >= 74 && PLA <= 76 && TL_require!=DTO1 && TL_require!=DTO2 && TL_require!=GA && TL_require!=Bump && (TL_require!=FLEXTO ||  (TL_require == FLEXTO && flex_dT_flag == 0) )
  测试用例: Bump=3.0, DTO1=0.0, DTO2=1.0, FLEXTO=4.0, GA=2.0, PLA=0.0, TL_require=4, flex_dT_flag=0.5
  预期结果: False
- 条件: PLA >= 74 && PLA <= 76 && TL_require!=DTO1 && TL_require!=DTO2 && TL_require!=GA && TL_require!=Bump && (TL_require!=FLEXTO ||  (TL_require == FLEXTO && flex_dT_flag == 0) )
  测试用例: Bump=3.0, DTO1=0.0, DTO2=1.0, FLEXTO=4.0, GA=2.0, PLA=0.0, TL_require=3, flex_dT_flag=0.5
  预期结果: False
- 条件: PLA >= 74 && PLA <= 76 && TL_require!=DTO1 && TL_require!=DTO2 && TL_require!=GA && TL_require!=Bump && (TL_require!=FLEXTO ||  (TL_require == FLEXTO && flex_dT_flag == 0) )
  测试用例: Bump=3.0, DTO1=0.0, DTO2=1.0, FLEXTO=4.0, GA=2.0, PLA=0.0, TL_require=4, flex_dT_flag=0.5
  预期结果: False
- 条件: PLA >= 74 && PLA <= 76 && TL_require!=DTO1 && TL_require!=DTO2 && TL_require!=GA && TL_require!=Bump && (TL_require!=FLEXTO ||  (TL_require == FLEXTO && flex_dT_flag == 0) )
  测试用例: Bump=3.0, DTO1=0.0, DTO2=1.0, FLEXTO=4.0, GA=2.0, PLA=0.0, TL_require=0, flex_dT_flag=0.5
  预期结果: False
- 条件: PLA >= 74 && PLA <= 76  && TL_require == DTO1
  测试用例: DTO1=0.0, PLA=0.0, TL_require=0
  预期结果: False
- 条件: PLA >= 74 && PLA <= 76  && TL_require == DTO1
  测试用例: DTO1=0.0, PLA=0.0, TL_require=1
  预期结果: False
- 条件: PLA >= 74 && PLA <= 76 && TL_require == DTO2
  测试用例: DTO2=1.0, PLA=0.0, TL_require=1
  预期结果: False
- 条件: PLA >= 74 && PLA <= 76 && TL_require == DTO2
  测试用例: DTO2=1.0, PLA=0.0, TL_require=0
  预期结果: False
- 条件: PLA >= 74 && PLA <= 76 && TL_require == GA
  测试用例: GA=2.0, PLA=0.0, TL_require=2
  预期结果: False
- 条件: PLA >= 74 && PLA <= 76 && TL_require == GA
  测试用例: GA=2.0, PLA=0.0, TL_require=1
  预期结果: False
- 条件: PLA >= 74 && PLA <= 76 && TL_require == FLEXTO && flex_dT_flag == 1
  测试用例: FLEXTO=4.0, PLA=0.0, TL_require=4, flex_dT_flag=0.5
  预期结果: False
- 条件: PLA >= 74 && PLA <= 76 && TL_require == FLEXTO && flex_dT_flag == 1
  测试用例: FLEXTO=4.0, PLA=0.0, TL_require=3, flex_dT_flag=0.5
  预期结果: False
- 条件: PLA >= 74 && PLA <= 76  && TL_require == Bump
  测试用例: Bump=3.0, PLA=0.0, TL_require=3
  预期结果: False
- 条件: PLA >= 74 && PLA <= 76  && TL_require == Bump
  测试用例: Bump=3.0, PLA=0.0, TL_require=2
  预期结果: False

==================================================
处理模块: 确定选定推力等级_无指定推力等级
提取到的if条件: ['(engine_state != ES_idle) && (engine_state != ES_above_idle) && (engine_state !=  ES_Hwindmill_start)']

处理条件 1: (engine_state != ES_idle) && (engine_state != ES_above_idle) && (engine_state !=  ES_Hwindmill_start)
解析后的Python条件表达式: (engine_state != ES_idle) and (engine_state != ES_above_idle) and (engine_state != ES_Hwindmill_start)
变量及其范围: [{'name': 'ES_above_idle', 'min_value': 15.0, 'max_value': 15.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'ES_above_idle', 'constant_value': 15.0}, {'name': 'ES_idle', 'min_value': 14.0, 'max_value': 14.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'ES_idle', 'constant_value': 14.0}, {'name': 'engine_state', 'min_value': 0.0, 'max_value': 16.0, 'var_type': 'int', 'is_last': False, 'original_var': 'engine_state'}, {'name': 'ES_Hwindmill_start', 'min_value': 12.0, 'max_value': 12.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'ES_Hwindmill_start', 'constant_value': 12.0}]
解析后的条件: (engine_state != ES_idle) and (engine_state != ES_above_idle) and (engine_state != ES_Hwindmill_start)
识别到的变量: [{'name': 'ES_above_idle', 'min_value': 15.0, 'max_value': 15.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'ES_above_idle', 'constant_value': 15.0}, {'name': 'ES_idle', 'min_value': 14.0, 'max_value': 14.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'ES_idle', 'constant_value': 14.0}, {'name': 'engine_state', 'min_value': 0.0, 'max_value': 16.0, 'var_type': 'int', 'is_last': False, 'original_var': 'engine_state'}, {'name': 'ES_Hwindmill_start', 'min_value': 12.0, 'max_value': 12.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'ES_Hwindmill_start', 'constant_value': 12.0}]
处理的变量: ['ES_above_idle', 'ES_idle', 'engine_state', 'ES_Hwindmill_start']
预处理后的条件: (engine_state != ES_idle) and (engine_state != ES_above_idle) and (engine_state != ES_Hwindmill_start)
提取的原子条件: [('engine_state', '!=', 'ES_idle'), ('engine_state', '!=', 'ES_above_idle'), ('engine_state', '!=', 'ES_Hwindmill_start')]
表达式结构: {'AND_EXPR_0': ('and', ['ATOM_0', 'ATOM_1', 'ATOM_2'])}
根表达式: AND_EXPR_0
构建的Z3表达式: And(14 != engine_state,
    15 != engine_state,
    12 != engine_state)
为原子条件 'engine_state != ES_idle' 生成MCDC测试用例
为原子条件 'engine_state != ES_above_idle' 生成MCDC测试用例
为原子条件 'engine_state != ES_Hwindmill_start' 生成MCDC测试用例
生成的MCDC条件数量: 3
生成的MCDC条件数量: 3

生成的测试用例:
- 条件: (engine_state != ES_idle) && (engine_state != ES_above_idle) && (engine_state !=  ES_Hwindmill_start)
  测试用例: ES_Hwindmill_start=12.0, ES_above_idle=15.0, ES_idle=14.0, engine_state=16
  预期结果: True
- 条件: (engine_state != ES_idle) && (engine_state != ES_above_idle) && (engine_state !=  ES_Hwindmill_start)
  测试用例: ES_Hwindmill_start=12.0, ES_above_idle=15.0, ES_idle=14.0, engine_state=14
  预期结果: False
- 条件: (engine_state != ES_idle) && (engine_state != ES_above_idle) && (engine_state !=  ES_Hwindmill_start)
  测试用例: ES_Hwindmill_start=12.0, ES_above_idle=15.0, ES_idle=14.0, engine_state=11
  预期结果: True
- 条件: (engine_state != ES_idle) && (engine_state != ES_above_idle) && (engine_state !=  ES_Hwindmill_start)
  测试用例: ES_Hwindmill_start=12.0, ES_above_idle=15.0, ES_idle=14.0, engine_state=15
  预期结果: False
- 条件: (engine_state != ES_idle) && (engine_state != ES_above_idle) && (engine_state !=  ES_Hwindmill_start)
  测试用例: ES_Hwindmill_start=12.0, ES_above_idle=15.0, ES_idle=14.0, engine_state=11
  预期结果: True
- 条件: (engine_state != ES_idle) && (engine_state != ES_above_idle) && (engine_state !=  ES_Hwindmill_start)
  测试用例: ES_Hwindmill_start=12.0, ES_above_idle=15.0, ES_idle=14.0, engine_state=12
  预期结果: False

==================================================
处理模块: 高压换算转速控制目标计算_地面慢车
模块中没有if语句，跳过

==================================================
处理模块: 高压换算转速控制目标计算_空中慢车
模块中没有if语句，跳过

==================================================
处理模块: 高压换算转速控制目标计算_进近慢车
模块中没有if语句，跳过

==================================================
处理模块: 高压换算转速控制目标计算_反推慢车
模块中没有if语句，跳过

==================================================
处理模块: N2R25Dem_BAK计算
模块中没有if语句，跳过

==================================================
处理模块: N2R25Dem选择_地面慢车
提取到的if条件: ['thrust_level == level_GI']

处理条件 1: thrust_level == level_GI
解析后的Python条件表达式: thrust_level == level_GI
变量及其范围: [{'name': 'level_GI', 'min_value': 4.0, 'max_value': 4.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_GI', 'constant_value': 4.0}, {'name': 'thrust_level', 'min_value': 0.0, 'max_value': 23.0, 'var_type': 'int', 'is_last': False, 'original_var': 'thrust_level'}]
解析后的条件: thrust_level == level_GI
识别到的变量: [{'name': 'level_GI', 'min_value': 4.0, 'max_value': 4.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_GI', 'constant_value': 4.0}, {'name': 'thrust_level', 'min_value': 0.0, 'max_value': 23.0, 'var_type': 'int', 'is_last': False, 'original_var': 'thrust_level'}]
处理的变量: ['level_GI', 'thrust_level']
预处理后的条件: thrust_level == level_GI
提取的原子条件: [('thrust_level', '==', 'level_GI')]
表达式结构: {}
根表达式: ATOM_0
构建的Z3表达式: 4 == thrust_level
为原子条件 'thrust_level == level_GI' 生成MCDC测试用例
生成的MCDC条件数量: 1
生成的MCDC条件数量: 1

生成的测试用例:
- 条件: thrust_level == level_GI
  测试用例: level_GI=4.0, thrust_level=4
  预期结果: True
- 条件: thrust_level == level_GI
  测试用例: level_GI=4.0, thrust_level=3
  预期结果: False

==================================================
处理模块: N2R25Dem选择_空中慢车
提取到的if条件: ['thrust_level == level_FI']

处理条件 1: thrust_level == level_FI
解析后的Python条件表达式: thrust_level == level_FI
变量及其范围: [{'name': 'thrust_level', 'min_value': 0.0, 'max_value': 23.0, 'var_type': 'int', 'is_last': False, 'original_var': 'thrust_level'}, {'name': 'level_FI', 'min_value': 5.0, 'max_value': 5.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_FI', 'constant_value': 5.0}]
解析后的条件: thrust_level == level_FI
识别到的变量: [{'name': 'thrust_level', 'min_value': 0.0, 'max_value': 23.0, 'var_type': 'int', 'is_last': False, 'original_var': 'thrust_level'}, {'name': 'level_FI', 'min_value': 5.0, 'max_value': 5.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_FI', 'constant_value': 5.0}]
处理的变量: ['thrust_level', 'level_FI']
预处理后的条件: thrust_level == level_FI
提取的原子条件: [('thrust_level', '==', 'level_FI')]
表达式结构: {}
根表达式: ATOM_0
构建的Z3表达式: 5 == thrust_level
为原子条件 'thrust_level == level_FI' 生成MCDC测试用例
生成的MCDC条件数量: 1
生成的MCDC条件数量: 1

生成的测试用例:
- 条件: thrust_level == level_FI
  测试用例: level_FI=5.0, thrust_level=5
  预期结果: True
- 条件: thrust_level == level_FI
  测试用例: level_FI=5.0, thrust_level=4
  预期结果: False

==================================================
处理模块: N2R25Dem选择_进近慢车
提取到的if条件: ['thrust_level == level_AI']

处理条件 1: thrust_level == level_AI
解析后的Python条件表达式: thrust_level == level_AI
变量及其范围: [{'name': 'level_AI', 'min_value': 6.0, 'max_value': 6.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_AI', 'constant_value': 6.0}, {'name': 'thrust_level', 'min_value': 0.0, 'max_value': 23.0, 'var_type': 'int', 'is_last': False, 'original_var': 'thrust_level'}]
解析后的条件: thrust_level == level_AI
识别到的变量: [{'name': 'level_AI', 'min_value': 6.0, 'max_value': 6.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_AI', 'constant_value': 6.0}, {'name': 'thrust_level', 'min_value': 0.0, 'max_value': 23.0, 'var_type': 'int', 'is_last': False, 'original_var': 'thrust_level'}]
处理的变量: ['level_AI', 'thrust_level']
预处理后的条件: thrust_level == level_AI
提取的原子条件: [('thrust_level', '==', 'level_AI')]
表达式结构: {}
根表达式: ATOM_0
构建的Z3表达式: 6 == thrust_level
为原子条件 'thrust_level == level_AI' 生成MCDC测试用例
生成的MCDC条件数量: 1
生成的MCDC条件数量: 1

生成的测试用例:
- 条件: thrust_level == level_AI
  测试用例: level_AI=6.0, thrust_level=6
  预期结果: True
- 条件: thrust_level == level_AI
  测试用例: level_AI=6.0, thrust_level=5
  预期结果: False

==================================================
处理模块: N2R25Dem选择_反推慢车
提取到的if条件: ['thrust_level == level_RI']

处理条件 1: thrust_level == level_RI
解析后的Python条件表达式: thrust_level == level_RI
变量及其范围: [{'name': 'thrust_level', 'min_value': 0.0, 'max_value': 23.0, 'var_type': 'int', 'is_last': False, 'original_var': 'thrust_level'}, {'name': 'level_RI', 'min_value': 3.0, 'max_value': 3.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_RI', 'constant_value': 3.0}]
解析后的条件: thrust_level == level_RI
识别到的变量: [{'name': 'thrust_level', 'min_value': 0.0, 'max_value': 23.0, 'var_type': 'int', 'is_last': False, 'original_var': 'thrust_level'}, {'name': 'level_RI', 'min_value': 3.0, 'max_value': 3.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_RI', 'constant_value': 3.0}]
处理的变量: ['thrust_level', 'level_RI']
预处理后的条件: thrust_level == level_RI
提取的原子条件: [('thrust_level', '==', 'level_RI')]
表达式结构: {}
根表达式: ATOM_0
构建的Z3表达式: 3 == thrust_level
为原子条件 'thrust_level == level_RI' 生成MCDC测试用例
生成的MCDC条件数量: 1
生成的MCDC条件数量: 1

生成的测试用例:
- 条件: thrust_level == level_RI
  测试用例: level_RI=3.0, thrust_level=3
  预期结果: True
- 条件: thrust_level == level_RI
  测试用例: level_RI=3.0, thrust_level=2
  预期结果: False

==================================================
处理模块: N2R25Dem选择_补充1
提取到的if条件: ['thrust_level != level_GI && thrust_level != level_FI && thrust_level != level_AI && thrust_level != level_RI && thrust_level != level_default']

处理条件 1: thrust_level != level_GI && thrust_level != level_FI && thrust_level != level_AI && thrust_level != level_RI && thrust_level != level_default
解析后的Python条件表达式: thrust_level != level_GI and thrust_level != level_FI and thrust_level != level_AI and thrust_level != level_RI and thrust_level != level_default
变量及其范围: [{'name': 'level_default', 'min_value': 0.0, 'max_value': 0.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_default', 'constant_value': 0.0}, {'name': 'level_AI', 'min_value': 6.0, 'max_value': 6.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_AI', 'constant_value': 6.0}, {'name': 'level_RI', 'min_value': 3.0, 'max_value': 3.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_RI', 'constant_value': 3.0}, {'name': 'thrust_level', 'min_value': 0.0, 'max_value': 23.0, 'var_type': 'int', 'is_last': False, 'original_var': 'thrust_level'}, {'name': 'level_GI', 'min_value': 4.0, 'max_value': 4.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_GI', 'constant_value': 4.0}, {'name': 'level_FI', 'min_value': 5.0, 'max_value': 5.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_FI', 'constant_value': 5.0}]
解析后的条件: thrust_level != level_GI and thrust_level != level_FI and thrust_level != level_AI and thrust_level != level_RI and thrust_level != level_default
识别到的变量: [{'name': 'level_default', 'min_value': 0.0, 'max_value': 0.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_default', 'constant_value': 0.0}, {'name': 'level_AI', 'min_value': 6.0, 'max_value': 6.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_AI', 'constant_value': 6.0}, {'name': 'level_RI', 'min_value': 3.0, 'max_value': 3.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_RI', 'constant_value': 3.0}, {'name': 'thrust_level', 'min_value': 0.0, 'max_value': 23.0, 'var_type': 'int', 'is_last': False, 'original_var': 'thrust_level'}, {'name': 'level_GI', 'min_value': 4.0, 'max_value': 4.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_GI', 'constant_value': 4.0}, {'name': 'level_FI', 'min_value': 5.0, 'max_value': 5.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_FI', 'constant_value': 5.0}]
处理的变量: ['level_default', 'level_AI', 'level_RI', 'thrust_level', 'level_GI', 'level_FI']
预处理后的条件: thrust_level != level_GI and thrust_level != level_FI and thrust_level != level_AI and thrust_level != level_RI and thrust_level != level_default
提取的原子条件: [('thrust_level', '!=', 'level_GI'), ('thrust_level', '!=', 'level_FI'), ('thrust_level', '!=', 'level_AI'), ('thrust_level', '!=', 'level_RI'), ('thrust_level', '!=', 'level_default')]
表达式结构: {'AND_EXPR_0': ('and', ['ATOM_0', 'ATOM_1', 'ATOM_2', 'ATOM_3', 'ATOM_4'])}
根表达式: AND_EXPR_0
构建的Z3表达式: And(4 != thrust_level,
    5 != thrust_level,
    6 != thrust_level,
    3 != thrust_level,
    0 != thrust_level)
为原子条件 'thrust_level != level_GI' 生成MCDC测试用例
为原子条件 'thrust_level != level_FI' 生成MCDC测试用例
为原子条件 'thrust_level != level_AI' 生成MCDC测试用例
为原子条件 'thrust_level != level_RI' 生成MCDC测试用例
为原子条件 'thrust_level != level_default' 生成MCDC测试用例
生成的MCDC条件数量: 5
生成的MCDC条件数量: 5

生成的测试用例:
- 条件: thrust_level != level_GI && thrust_level != level_FI && thrust_level != level_AI && thrust_level != level_RI && thrust_level != level_default
  测试用例: level_AI=6.0, level_FI=5.0, level_GI=4.0, level_RI=3.0, level_default=0.0, thrust_level=1
  预期结果: True
- 条件: thrust_level != level_GI && thrust_level != level_FI && thrust_level != level_AI && thrust_level != level_RI && thrust_level != level_default
  测试用例: level_AI=6.0, level_FI=5.0, level_GI=4.0, level_RI=3.0, level_default=0.0, thrust_level=4
  预期结果: False
- 条件: thrust_level != level_GI && thrust_level != level_FI && thrust_level != level_AI && thrust_level != level_RI && thrust_level != level_default
  测试用例: level_AI=6.0, level_FI=5.0, level_GI=4.0, level_RI=3.0, level_default=0.0, thrust_level=2
  预期结果: True
- 条件: thrust_level != level_GI && thrust_level != level_FI && thrust_level != level_AI && thrust_level != level_RI && thrust_level != level_default
  测试用例: level_AI=6.0, level_FI=5.0, level_GI=4.0, level_RI=3.0, level_default=0.0, thrust_level=5
  预期结果: False
- 条件: thrust_level != level_GI && thrust_level != level_FI && thrust_level != level_AI && thrust_level != level_RI && thrust_level != level_default
  测试用例: level_AI=6.0, level_FI=5.0, level_GI=4.0, level_RI=3.0, level_default=0.0, thrust_level=2
  预期结果: True
- 条件: thrust_level != level_GI && thrust_level != level_FI && thrust_level != level_AI && thrust_level != level_RI && thrust_level != level_default
  测试用例: level_AI=6.0, level_FI=5.0, level_GI=4.0, level_RI=3.0, level_default=0.0, thrust_level=6
  预期结果: False
- 条件: thrust_level != level_GI && thrust_level != level_FI && thrust_level != level_AI && thrust_level != level_RI && thrust_level != level_default
  测试用例: level_AI=6.0, level_FI=5.0, level_GI=4.0, level_RI=3.0, level_default=0.0, thrust_level=2
  预期结果: True
- 条件: thrust_level != level_GI && thrust_level != level_FI && thrust_level != level_AI && thrust_level != level_RI && thrust_level != level_default
  测试用例: level_AI=6.0, level_FI=5.0, level_GI=4.0, level_RI=3.0, level_default=0.0, thrust_level=3
  预期结果: False
- 条件: thrust_level != level_GI && thrust_level != level_FI && thrust_level != level_AI && thrust_level != level_RI && thrust_level != level_default
  测试用例: level_AI=6.0, level_FI=5.0, level_GI=4.0, level_RI=3.0, level_default=0.0, thrust_level=2
  预期结果: True
- 条件: thrust_level != level_GI && thrust_level != level_FI && thrust_level != level_AI && thrust_level != level_RI && thrust_level != level_default
  测试用例: level_AI=6.0, level_FI=5.0, level_GI=4.0, level_RI=3.0, level_default=0.0, thrust_level=0
  预期结果: False

==================================================
处理模块: N2R25Dem选择_补充2
提取到的if条件: ['thrust_level == level_default && engine_state == ES_ ground_start']

处理条件 1: thrust_level == level_default && engine_state == ES_ ground_start
解析后的Python条件表达式: thrust_level == level_default and engine_state == ES_ground_start
变量及其范围: [{'name': 'engine_state', 'min_value': 0.0, 'max_value': 16.0, 'var_type': 'int', 'is_last': False, 'original_var': 'engine_state'}, {'name': 'level_default', 'min_value': 0.0, 'max_value': 0.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_default', 'constant_value': 0.0}, {'name': 'thrust_level', 'min_value': 0.0, 'max_value': 23.0, 'var_type': 'int', 'is_last': False, 'original_var': 'thrust_level'}, {'name': 'ES_ground_start', 'min_value': 9.0, 'max_value': 9.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'ES_ground_start', 'constant_value': 9.0}]
解析后的条件: thrust_level == level_default and engine_state == ES_ground_start
识别到的变量: [{'name': 'engine_state', 'min_value': 0.0, 'max_value': 16.0, 'var_type': 'int', 'is_last': False, 'original_var': 'engine_state'}, {'name': 'level_default', 'min_value': 0.0, 'max_value': 0.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_default', 'constant_value': 0.0}, {'name': 'thrust_level', 'min_value': 0.0, 'max_value': 23.0, 'var_type': 'int', 'is_last': False, 'original_var': 'thrust_level'}, {'name': 'ES_ground_start', 'min_value': 9.0, 'max_value': 9.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'ES_ground_start', 'constant_value': 9.0}]
处理的变量: ['engine_state', 'level_default', 'thrust_level', 'ES_ground_start']
预处理后的条件: thrust_level == level_default and engine_state == ES_ground_start
提取的原子条件: [('thrust_level', '==', 'level_default'), ('engine_state', '==', 'ES_ground_start')]
表达式结构: {'AND_EXPR_0': ('and', ['ATOM_0', 'ATOM_1'])}
根表达式: AND_EXPR_0
构建的Z3表达式: And(0 == thrust_level, 9 == engine_state)
为原子条件 'thrust_level == level_default' 生成MCDC测试用例
为原子条件 'engine_state == ES_ground_start' 生成MCDC测试用例
生成的MCDC条件数量: 2
生成的MCDC条件数量: 2

生成的测试用例:
- 条件: thrust_level == level_default && engine_state == ES_ ground_start
  测试用例: ES_ground_start=9.0, engine_state=9, level_default=0.0, thrust_level=0
  预期结果: True
- 条件: thrust_level == level_default && engine_state == ES_ ground_start
  测试用例: ES_ground_start=9.0, engine_state=9, level_default=0.0, thrust_level=1
  预期结果: False
- 条件: thrust_level == level_default && engine_state == ES_ ground_start
  测试用例: ES_ground_start=9.0, engine_state=9, level_default=0.0, thrust_level=0
  预期结果: True
- 条件: thrust_level == level_default && engine_state == ES_ ground_start
  测试用例: ES_ground_start=9.0, engine_state=8, level_default=0.0, thrust_level=0
  预期结果: False

==================================================
处理模块: N2R25Dem选择_补充3
提取到的if条件: ['thrust_level == level_default && (engine_state == ES_windmill_start || engine_state == ES_Qwindmill_start || engine_state == ES_assist_start)']

处理条件 1: thrust_level == level_default && (engine_state == ES_windmill_start || engine_state == ES_Qwindmill_start || engine_state == ES_assist_start)
解析后的Python条件表达式: thrust_level == level_default and (engine_state == ES_windmill_start or engine_state == ES_Qwindmill_start or engine_state == ES_assist_start)
变量及其范围: [{'name': 'level_default', 'min_value': 0.0, 'max_value': 0.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_default', 'constant_value': 0.0}, {'name': 'ES_Qwindmill_start', 'min_value': 13.0, 'max_value': 13.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'ES_Qwindmill_start', 'constant_value': 13.0}, {'name': 'ES_assist_start', 'min_value': 10.0, 'max_value': 10.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'ES_assist_start', 'constant_value': 10.0}, {'name': 'thrust_level', 'min_value': 0.0, 'max_value': 23.0, 'var_type': 'int', 'is_last': False, 'original_var': 'thrust_level'}, {'name': 'engine_state', 'min_value': 0.0, 'max_value': 16.0, 'var_type': 'int', 'is_last': False, 'original_var': 'engine_state'}, {'name': 'ES_windmill_start', 'min_value': 11.0, 'max_value': 11.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'ES_windmill_start', 'constant_value': 11.0}]
解析后的条件: thrust_level == level_default and (engine_state == ES_windmill_start or engine_state == ES_Qwindmill_start or engine_state == ES_assist_start)
识别到的变量: [{'name': 'level_default', 'min_value': 0.0, 'max_value': 0.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_default', 'constant_value': 0.0}, {'name': 'ES_Qwindmill_start', 'min_value': 13.0, 'max_value': 13.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'ES_Qwindmill_start', 'constant_value': 13.0}, {'name': 'ES_assist_start', 'min_value': 10.0, 'max_value': 10.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'ES_assist_start', 'constant_value': 10.0}, {'name': 'thrust_level', 'min_value': 0.0, 'max_value': 23.0, 'var_type': 'int', 'is_last': False, 'original_var': 'thrust_level'}, {'name': 'engine_state', 'min_value': 0.0, 'max_value': 16.0, 'var_type': 'int', 'is_last': False, 'original_var': 'engine_state'}, {'name': 'ES_windmill_start', 'min_value': 11.0, 'max_value': 11.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'ES_windmill_start', 'constant_value': 11.0}]
处理的变量: ['level_default', 'ES_Qwindmill_start', 'ES_assist_start', 'thrust_level', 'engine_state', 'ES_windmill_start']
预处理后的条件: thrust_level == level_default and (engine_state == ES_windmill_start or engine_state == ES_Qwindmill_start or engine_state == ES_assist_start)
提取的原子条件: [('thrust_level', '==', 'level_default'), ('engine_state', '==', 'ES_windmill_start'), ('engine_state', '==', 'ES_Qwindmill_start'), ('engine_state', '==', 'ES_assist_start')]
表达式结构: {'OR_EXPR_1': ('or', ['ATOM_1', 'ATOM_2', 'ATOM_3']), 'AND_EXPR_0': ('and', ['ATOM_0', 'OR_EXPR_1'])}
根表达式: AND_EXPR_0
构建的Z3表达式: And(0 == thrust_level,
    Or(11 == engine_state,
       13 == engine_state,
       10 == engine_state))
为原子条件 'thrust_level == level_default' 生成MCDC测试用例
为原子条件 'engine_state == ES_windmill_start' 生成MCDC测试用例
为原子条件 'engine_state == ES_Qwindmill_start' 生成MCDC测试用例
为原子条件 'engine_state == ES_assist_start' 生成MCDC测试用例
生成的MCDC条件数量: 4
生成的MCDC条件数量: 4

生成的测试用例:
- 条件: thrust_level == level_default && (engine_state == ES_windmill_start || engine_state == ES_Qwindmill_start || engine_state == ES_assist_start)
  测试用例: ES_Qwindmill_start=13.0, ES_assist_start=10.0, ES_windmill_start=11.0, engine_state=10, level_default=0.0, thrust_level=0
  预期结果: True
- 条件: thrust_level == level_default && (engine_state == ES_windmill_start || engine_state == ES_Qwindmill_start || engine_state == ES_assist_start)
  测试用例: ES_Qwindmill_start=13.0, ES_assist_start=10.0, ES_windmill_start=11.0, engine_state=10, level_default=0.0, thrust_level=1
  预期结果: False
- 条件: thrust_level == level_default && (engine_state == ES_windmill_start || engine_state == ES_Qwindmill_start || engine_state == ES_assist_start)
  测试用例: ES_Qwindmill_start=13.0, ES_assist_start=10.0, ES_windmill_start=11.0, engine_state=11, level_default=0.0, thrust_level=0
  预期结果: True
- 条件: thrust_level == level_default && (engine_state == ES_windmill_start || engine_state == ES_Qwindmill_start || engine_state == ES_assist_start)
  测试用例: ES_Qwindmill_start=13.0, ES_assist_start=10.0, ES_windmill_start=11.0, engine_state=9, level_default=0.0, thrust_level=1
  预期结果: False
- 条件: thrust_level == level_default && (engine_state == ES_windmill_start || engine_state == ES_Qwindmill_start || engine_state == ES_assist_start)
  测试用例: ES_Qwindmill_start=13.0, ES_assist_start=10.0, ES_windmill_start=11.0, engine_state=13, level_default=0.0, thrust_level=0
  预期结果: True
- 条件: thrust_level == level_default && (engine_state == ES_windmill_start || engine_state == ES_Qwindmill_start || engine_state == ES_assist_start)
  测试用例: ES_Qwindmill_start=13.0, ES_assist_start=10.0, ES_windmill_start=11.0, engine_state=9, level_default=0.0, thrust_level=1
  预期结果: False
- 条件: thrust_level == level_default && (engine_state == ES_windmill_start || engine_state == ES_Qwindmill_start || engine_state == ES_assist_start)
  测试用例: ES_Qwindmill_start=13.0, ES_assist_start=10.0, ES_windmill_start=11.0, engine_state=10, level_default=0.0, thrust_level=0
  预期结果: True
- 条件: thrust_level == level_default && (engine_state == ES_windmill_start || engine_state == ES_Qwindmill_start || engine_state == ES_assist_start)
  测试用例: ES_Qwindmill_start=13.0, ES_assist_start=10.0, ES_windmill_start=11.0, engine_state=9, level_default=0.0, thrust_level=1
  预期结果: False

==================================================
处理模块: N2R25Dem选择_补充4
提取到的if条件: ['thrust_level == level_default && (engine_state == ES_origin || engine_state == ES_ground_standby || engine_state == ES_flight_standby || engine_state == ES_cold_operation || engine_state == ES_DR_OS_Us || engine_state == ES_normal_stop || engine_state == ES_emergency_stop || engine_state == ES_ground_start_termination || engine_state == ES_flight_start_terminnation )']

处理条件 1: thrust_level == level_default && (engine_state == ES_origin || engine_state == ES_ground_standby || engine_state == ES_flight_standby || engine_state == ES_cold_operation || engine_state == ES_DR_OS_Us || engine_state == ES_normal_stop || engine_state == ES_emergency_stop || engine_state == ES_ground_start_termination || engine_state == ES_flight_start_terminnation )
解析后的Python条件表达式: thrust_level == level_default and (engine_state == ES_origin or engine_state == ES_ground_standby or engine_state == ES_flight_standby or engine_state == ES_cold_operation or engine_state == ES_DR_OS_Us or engine_state == ES_normal_stop or engine_state == ES_emergency_stop or engine_state == ES_ground_start_termination or engine_state == ES_flight_start_terminnation)
变量及其范围: [{'name': 'ES_flight_start_terminnation', 'min_value': 8.0, 'max_value': 8.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'ES_flight_start_terminnation', 'constant_value': 8.0}, {'name': 'ES_origin', 'min_value': 0.0, 'max_value': 0.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'ES_origin', 'constant_value': 0.0}, {'name': 'ES_normal_stop', 'min_value': 5.0, 'max_value': 5.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'ES_normal_stop', 'constant_value': 5.0}, {'name': 'level_default', 'min_value': 0.0, 'max_value': 0.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_default', 'constant_value': 0.0}, {'name': 'ES_emergency_stop', 'min_value': 6.0, 'max_value': 6.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'ES_emergency_stop', 'constant_value': 6.0}, {'name': 'thrust_level', 'min_value': 0.0, 'max_value': 23.0, 'var_type': 'int', 'is_last': False, 'original_var': 'thrust_level'}, {'name': 'ES_ground_standby', 'min_value': 1.0, 'max_value': 1.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'ES_ground_standby', 'constant_value': 1.0}, {'name': 'engine_state', 'min_value': 0.0, 'max_value': 16.0, 'var_type': 'int', 'is_last': False, 'original_var': 'engine_state'}, {'name': 'ES_cold_operation', 'min_value': 3.0, 'max_value': 3.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'ES_cold_operation', 'constant_value': 3.0}, {'name': 'ES_ground_start_termination', 'min_value': 7.0, 'max_value': 7.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'ES_ground_start_termination', 'constant_value': 7.0}, {'name': 'ES_flight_standby', 'min_value': 2.0, 'max_value': 2.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'ES_flight_standby', 'constant_value': 2.0}, {'name': 'ES_DR_OS_Us', 'min_value': 4.0, 'max_value': 4.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'ES_DR_OS_Us', 'constant_value': 4.0}]
解析后的条件: thrust_level == level_default and (engine_state == ES_origin or engine_state == ES_ground_standby or engine_state == ES_flight_standby or engine_state == ES_cold_operation or engine_state == ES_DR_OS_Us or engine_state == ES_normal_stop or engine_state == ES_emergency_stop or engine_state == ES_ground_start_termination or engine_state == ES_flight_start_terminnation)
识别到的变量: [{'name': 'ES_flight_start_terminnation', 'min_value': 8.0, 'max_value': 8.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'ES_flight_start_terminnation', 'constant_value': 8.0}, {'name': 'ES_origin', 'min_value': 0.0, 'max_value': 0.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'ES_origin', 'constant_value': 0.0}, {'name': 'ES_normal_stop', 'min_value': 5.0, 'max_value': 5.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'ES_normal_stop', 'constant_value': 5.0}, {'name': 'level_default', 'min_value': 0.0, 'max_value': 0.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_default', 'constant_value': 0.0}, {'name': 'ES_emergency_stop', 'min_value': 6.0, 'max_value': 6.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'ES_emergency_stop', 'constant_value': 6.0}, {'name': 'thrust_level', 'min_value': 0.0, 'max_value': 23.0, 'var_type': 'int', 'is_last': False, 'original_var': 'thrust_level'}, {'name': 'ES_ground_standby', 'min_value': 1.0, 'max_value': 1.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'ES_ground_standby', 'constant_value': 1.0}, {'name': 'engine_state', 'min_value': 0.0, 'max_value': 16.0, 'var_type': 'int', 'is_last': False, 'original_var': 'engine_state'}, {'name': 'ES_cold_operation', 'min_value': 3.0, 'max_value': 3.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'ES_cold_operation', 'constant_value': 3.0}, {'name': 'ES_ground_start_termination', 'min_value': 7.0, 'max_value': 7.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'ES_ground_start_termination', 'constant_value': 7.0}, {'name': 'ES_flight_standby', 'min_value': 2.0, 'max_value': 2.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'ES_flight_standby', 'constant_value': 2.0}, {'name': 'ES_DR_OS_Us', 'min_value': 4.0, 'max_value': 4.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'ES_DR_OS_Us', 'constant_value': 4.0}]
处理的变量: ['ES_flight_start_terminnation', 'ES_origin', 'ES_normal_stop', 'level_default', 'ES_emergency_stop', 'thrust_level', 'ES_ground_standby', 'engine_state', 'ES_cold_operation', 'ES_ground_start_termination', 'ES_flight_standby', 'ES_DR_OS_Us']
预处理后的条件: thrust_level == level_default and (engine_state == ES_origin or engine_state == ES_ground_standby or engine_state == ES_flight_standby or engine_state == ES_cold_operation or engine_state == ES_DR_OS_Us or engine_state == ES_normal_stop or engine_state == ES_emergency_stop or engine_state == ES_ground_start_termination or engine_state == ES_flight_start_terminnation)
提取的原子条件: [('thrust_level', '==', 'level_default'), ('engine_state', '==', 'ES_origin'), ('engine_state', '==', 'ES_ground_standby'), ('engine_state', '==', 'ES_flight_standby'), ('engine_state', '==', 'ES_cold_operation'), ('engine_state', '==', 'ES_DR_OS_Us'), ('engine_state', '==', 'ES_normal_stop'), ('engine_state', '==', 'ES_emergency_stop'), ('engine_state', '==', 'ES_ground_start_termination'), ('engine_state', '==', 'ES_flight_start_terminnation')]
表达式结构: {'OR_EXPR_1': ('or', ['ATOM_1', 'ATOM_2', 'ATOM_3', 'ATOM_4', 'ATOM_5', 'ATOM_6', 'ATOM_7', 'ATOM_8', 'ATOM_9']), 'AND_EXPR_0': ('and', ['ATOM_0', 'OR_EXPR_1'])}
根表达式: AND_EXPR_0
构建的Z3表达式: And(0 == thrust_level,
    Or(0 == engine_state,
       1 == engine_state,
       2 == engine_state,
       3 == engine_state,
       4 == engine_state,
       5 == engine_state,
       6 == engine_state,
       7 == engine_state,
       8 == engine_state))
为原子条件 'thrust_level == level_default' 生成MCDC测试用例
为原子条件 'engine_state == ES_origin' 生成MCDC测试用例
为原子条件 'engine_state == ES_ground_standby' 生成MCDC测试用例
为原子条件 'engine_state == ES_flight_standby' 生成MCDC测试用例
为原子条件 'engine_state == ES_cold_operation' 生成MCDC测试用例
为原子条件 'engine_state == ES_DR_OS_Us' 生成MCDC测试用例
为原子条件 'engine_state == ES_normal_stop' 生成MCDC测试用例
为原子条件 'engine_state == ES_emergency_stop' 生成MCDC测试用例
为原子条件 'engine_state == ES_ground_start_termination' 生成MCDC测试用例
为原子条件 'engine_state == ES_flight_start_terminnation' 生成MCDC测试用例
生成的MCDC条件数量: 10
生成的MCDC条件数量: 10

生成的测试用例:
- 条件: thrust_level == level_default && (engine_state == ES_origin || engine_state == ES_ground_standby || engine_state == ES_flight_standby || engine_state == ES_cold_operation || engine_state == ES_DR_OS_Us || engine_state == ES_normal_stop || engine_state == ES_emergency_stop || engine_state == ES_ground_start_termination || engine_state == ES_flight_start_terminnation )
  测试用例: ES_DR_OS_Us=4.0, ES_cold_operation=3.0, ES_emergency_stop=6.0, ES_flight_standby=2.0, ES_flight_start_terminnation=8.0, ES_ground_standby=1.0, ES_ground_start_termination=7.0, ES_normal_stop=5.0, ES_origin=0.0, engine_state=0, level_default=0.0, thrust_level=0
  预期结果: True
- 条件: thrust_level == level_default && (engine_state == ES_origin || engine_state == ES_ground_standby || engine_state == ES_flight_standby || engine_state == ES_cold_operation || engine_state == ES_DR_OS_Us || engine_state == ES_normal_stop || engine_state == ES_emergency_stop || engine_state == ES_ground_start_termination || engine_state == ES_flight_start_terminnation )
  测试用例: ES_DR_OS_Us=4.0, ES_cold_operation=3.0, ES_emergency_stop=6.0, ES_flight_standby=2.0, ES_flight_start_terminnation=8.0, ES_ground_standby=1.0, ES_ground_start_termination=7.0, ES_normal_stop=5.0, ES_origin=0.0, engine_state=0, level_default=0.0, thrust_level=1
  预期结果: False
- 条件: thrust_level == level_default && (engine_state == ES_origin || engine_state == ES_ground_standby || engine_state == ES_flight_standby || engine_state == ES_cold_operation || engine_state == ES_DR_OS_Us || engine_state == ES_normal_stop || engine_state == ES_emergency_stop || engine_state == ES_ground_start_termination || engine_state == ES_flight_start_terminnation )
  测试用例: ES_DR_OS_Us=4.0, ES_cold_operation=3.0, ES_emergency_stop=6.0, ES_flight_standby=2.0, ES_flight_start_terminnation=8.0, ES_ground_standby=1.0, ES_ground_start_termination=7.0, ES_normal_stop=5.0, ES_origin=0.0, engine_state=0, level_default=0.0, thrust_level=0
  预期结果: True
- 条件: thrust_level == level_default && (engine_state == ES_origin || engine_state == ES_ground_standby || engine_state == ES_flight_standby || engine_state == ES_cold_operation || engine_state == ES_DR_OS_Us || engine_state == ES_normal_stop || engine_state == ES_emergency_stop || engine_state == ES_ground_start_termination || engine_state == ES_flight_start_terminnation )
  测试用例: ES_DR_OS_Us=4.0, ES_cold_operation=3.0, ES_emergency_stop=6.0, ES_flight_standby=2.0, ES_flight_start_terminnation=8.0, ES_ground_standby=1.0, ES_ground_start_termination=7.0, ES_normal_stop=5.0, ES_origin=0.0, engine_state=1, level_default=0.0, thrust_level=1
  预期结果: False
- 条件: thrust_level == level_default && (engine_state == ES_origin || engine_state == ES_ground_standby || engine_state == ES_flight_standby || engine_state == ES_cold_operation || engine_state == ES_DR_OS_Us || engine_state == ES_normal_stop || engine_state == ES_emergency_stop || engine_state == ES_ground_start_termination || engine_state == ES_flight_start_terminnation )
  测试用例: ES_DR_OS_Us=4.0, ES_cold_operation=3.0, ES_emergency_stop=6.0, ES_flight_standby=2.0, ES_flight_start_terminnation=8.0, ES_ground_standby=1.0, ES_ground_start_termination=7.0, ES_normal_stop=5.0, ES_origin=0.0, engine_state=1, level_default=0.0, thrust_level=0
  预期结果: True
- 条件: thrust_level == level_default && (engine_state == ES_origin || engine_state == ES_ground_standby || engine_state == ES_flight_standby || engine_state == ES_cold_operation || engine_state == ES_DR_OS_Us || engine_state == ES_normal_stop || engine_state == ES_emergency_stop || engine_state == ES_ground_start_termination || engine_state == ES_flight_start_terminnation )
  测试用例: ES_DR_OS_Us=4.0, ES_cold_operation=3.0, ES_emergency_stop=6.0, ES_flight_standby=2.0, ES_flight_start_terminnation=8.0, ES_ground_standby=1.0, ES_ground_start_termination=7.0, ES_normal_stop=5.0, ES_origin=0.0, engine_state=3, level_default=0.0, thrust_level=1
  预期结果: False
- 条件: thrust_level == level_default && (engine_state == ES_origin || engine_state == ES_ground_standby || engine_state == ES_flight_standby || engine_state == ES_cold_operation || engine_state == ES_DR_OS_Us || engine_state == ES_normal_stop || engine_state == ES_emergency_stop || engine_state == ES_ground_start_termination || engine_state == ES_flight_start_terminnation )
  测试用例: ES_DR_OS_Us=4.0, ES_cold_operation=3.0, ES_emergency_stop=6.0, ES_flight_standby=2.0, ES_flight_start_terminnation=8.0, ES_ground_standby=1.0, ES_ground_start_termination=7.0, ES_normal_stop=5.0, ES_origin=0.0, engine_state=2, level_default=0.0, thrust_level=0
  预期结果: True
- 条件: thrust_level == level_default && (engine_state == ES_origin || engine_state == ES_ground_standby || engine_state == ES_flight_standby || engine_state == ES_cold_operation || engine_state == ES_DR_OS_Us || engine_state == ES_normal_stop || engine_state == ES_emergency_stop || engine_state == ES_ground_start_termination || engine_state == ES_flight_start_terminnation )
  测试用例: ES_DR_OS_Us=4.0, ES_cold_operation=3.0, ES_emergency_stop=6.0, ES_flight_standby=2.0, ES_flight_start_terminnation=8.0, ES_ground_standby=1.0, ES_ground_start_termination=7.0, ES_normal_stop=5.0, ES_origin=0.0, engine_state=0, level_default=0.0, thrust_level=1
  预期结果: False
- 条件: thrust_level == level_default && (engine_state == ES_origin || engine_state == ES_ground_standby || engine_state == ES_flight_standby || engine_state == ES_cold_operation || engine_state == ES_DR_OS_Us || engine_state == ES_normal_stop || engine_state == ES_emergency_stop || engine_state == ES_ground_start_termination || engine_state == ES_flight_start_terminnation )
  测试用例: ES_DR_OS_Us=4.0, ES_cold_operation=3.0, ES_emergency_stop=6.0, ES_flight_standby=2.0, ES_flight_start_terminnation=8.0, ES_ground_standby=1.0, ES_ground_start_termination=7.0, ES_normal_stop=5.0, ES_origin=0.0, engine_state=3, level_default=0.0, thrust_level=0
  预期结果: True
- 条件: thrust_level == level_default && (engine_state == ES_origin || engine_state == ES_ground_standby || engine_state == ES_flight_standby || engine_state == ES_cold_operation || engine_state == ES_DR_OS_Us || engine_state == ES_normal_stop || engine_state == ES_emergency_stop || engine_state == ES_ground_start_termination || engine_state == ES_flight_start_terminnation )
  测试用例: ES_DR_OS_Us=4.0, ES_cold_operation=3.0, ES_emergency_stop=6.0, ES_flight_standby=2.0, ES_flight_start_terminnation=8.0, ES_ground_standby=1.0, ES_ground_start_termination=7.0, ES_normal_stop=5.0, ES_origin=0.0, engine_state=0, level_default=0.0, thrust_level=1
  预期结果: False
- 条件: thrust_level == level_default && (engine_state == ES_origin || engine_state == ES_ground_standby || engine_state == ES_flight_standby || engine_state == ES_cold_operation || engine_state == ES_DR_OS_Us || engine_state == ES_normal_stop || engine_state == ES_emergency_stop || engine_state == ES_ground_start_termination || engine_state == ES_flight_start_terminnation )
  测试用例: ES_DR_OS_Us=4.0, ES_cold_operation=3.0, ES_emergency_stop=6.0, ES_flight_standby=2.0, ES_flight_start_terminnation=8.0, ES_ground_standby=1.0, ES_ground_start_termination=7.0, ES_normal_stop=5.0, ES_origin=0.0, engine_state=4, level_default=0.0, thrust_level=0
  预期结果: True
- 条件: thrust_level == level_default && (engine_state == ES_origin || engine_state == ES_ground_standby || engine_state == ES_flight_standby || engine_state == ES_cold_operation || engine_state == ES_DR_OS_Us || engine_state == ES_normal_stop || engine_state == ES_emergency_stop || engine_state == ES_ground_start_termination || engine_state == ES_flight_start_terminnation )
  测试用例: ES_DR_OS_Us=4.0, ES_cold_operation=3.0, ES_emergency_stop=6.0, ES_flight_standby=2.0, ES_flight_start_terminnation=8.0, ES_ground_standby=1.0, ES_ground_start_termination=7.0, ES_normal_stop=5.0, ES_origin=0.0, engine_state=0, level_default=0.0, thrust_level=1
  预期结果: False
- 条件: thrust_level == level_default && (engine_state == ES_origin || engine_state == ES_ground_standby || engine_state == ES_flight_standby || engine_state == ES_cold_operation || engine_state == ES_DR_OS_Us || engine_state == ES_normal_stop || engine_state == ES_emergency_stop || engine_state == ES_ground_start_termination || engine_state == ES_flight_start_terminnation )
  测试用例: ES_DR_OS_Us=4.0, ES_cold_operation=3.0, ES_emergency_stop=6.0, ES_flight_standby=2.0, ES_flight_start_terminnation=8.0, ES_ground_standby=1.0, ES_ground_start_termination=7.0, ES_normal_stop=5.0, ES_origin=0.0, engine_state=5, level_default=0.0, thrust_level=0
  预期结果: True
- 条件: thrust_level == level_default && (engine_state == ES_origin || engine_state == ES_ground_standby || engine_state == ES_flight_standby || engine_state == ES_cold_operation || engine_state == ES_DR_OS_Us || engine_state == ES_normal_stop || engine_state == ES_emergency_stop || engine_state == ES_ground_start_termination || engine_state == ES_flight_start_terminnation )
  测试用例: ES_DR_OS_Us=4.0, ES_cold_operation=3.0, ES_emergency_stop=6.0, ES_flight_standby=2.0, ES_flight_start_terminnation=8.0, ES_ground_standby=1.0, ES_ground_start_termination=7.0, ES_normal_stop=5.0, ES_origin=0.0, engine_state=1, level_default=0.0, thrust_level=1
  预期结果: False
- 条件: thrust_level == level_default && (engine_state == ES_origin || engine_state == ES_ground_standby || engine_state == ES_flight_standby || engine_state == ES_cold_operation || engine_state == ES_DR_OS_Us || engine_state == ES_normal_stop || engine_state == ES_emergency_stop || engine_state == ES_ground_start_termination || engine_state == ES_flight_start_terminnation )
  测试用例: ES_DR_OS_Us=4.0, ES_cold_operation=3.0, ES_emergency_stop=6.0, ES_flight_standby=2.0, ES_flight_start_terminnation=8.0, ES_ground_standby=1.0, ES_ground_start_termination=7.0, ES_normal_stop=5.0, ES_origin=0.0, engine_state=6, level_default=0.0, thrust_level=0
  预期结果: True
- 条件: thrust_level == level_default && (engine_state == ES_origin || engine_state == ES_ground_standby || engine_state == ES_flight_standby || engine_state == ES_cold_operation || engine_state == ES_DR_OS_Us || engine_state == ES_normal_stop || engine_state == ES_emergency_stop || engine_state == ES_ground_start_termination || engine_state == ES_flight_start_terminnation )
  测试用例: ES_DR_OS_Us=4.0, ES_cold_operation=3.0, ES_emergency_stop=6.0, ES_flight_standby=2.0, ES_flight_start_terminnation=8.0, ES_ground_standby=1.0, ES_ground_start_termination=7.0, ES_normal_stop=5.0, ES_origin=0.0, engine_state=0, level_default=0.0, thrust_level=1
  预期结果: False
- 条件: thrust_level == level_default && (engine_state == ES_origin || engine_state == ES_ground_standby || engine_state == ES_flight_standby || engine_state == ES_cold_operation || engine_state == ES_DR_OS_Us || engine_state == ES_normal_stop || engine_state == ES_emergency_stop || engine_state == ES_ground_start_termination || engine_state == ES_flight_start_terminnation )
  测试用例: ES_DR_OS_Us=4.0, ES_cold_operation=3.0, ES_emergency_stop=6.0, ES_flight_standby=2.0, ES_flight_start_terminnation=8.0, ES_ground_standby=1.0, ES_ground_start_termination=7.0, ES_normal_stop=5.0, ES_origin=0.0, engine_state=7, level_default=0.0, thrust_level=0
  预期结果: True
- 条件: thrust_level == level_default && (engine_state == ES_origin || engine_state == ES_ground_standby || engine_state == ES_flight_standby || engine_state == ES_cold_operation || engine_state == ES_DR_OS_Us || engine_state == ES_normal_stop || engine_state == ES_emergency_stop || engine_state == ES_ground_start_termination || engine_state == ES_flight_start_terminnation )
  测试用例: ES_DR_OS_Us=4.0, ES_cold_operation=3.0, ES_emergency_stop=6.0, ES_flight_standby=2.0, ES_flight_start_terminnation=8.0, ES_ground_standby=1.0, ES_ground_start_termination=7.0, ES_normal_stop=5.0, ES_origin=0.0, engine_state=0, level_default=0.0, thrust_level=1
  预期结果: False
- 条件: thrust_level == level_default && (engine_state == ES_origin || engine_state == ES_ground_standby || engine_state == ES_flight_standby || engine_state == ES_cold_operation || engine_state == ES_DR_OS_Us || engine_state == ES_normal_stop || engine_state == ES_emergency_stop || engine_state == ES_ground_start_termination || engine_state == ES_flight_start_terminnation )
  测试用例: ES_DR_OS_Us=4.0, ES_cold_operation=3.0, ES_emergency_stop=6.0, ES_flight_standby=2.0, ES_flight_start_terminnation=8.0, ES_ground_standby=1.0, ES_ground_start_termination=7.0, ES_normal_stop=5.0, ES_origin=0.0, engine_state=8, level_default=0.0, thrust_level=0
  预期结果: True
- 条件: thrust_level == level_default && (engine_state == ES_origin || engine_state == ES_ground_standby || engine_state == ES_flight_standby || engine_state == ES_cold_operation || engine_state == ES_DR_OS_Us || engine_state == ES_normal_stop || engine_state == ES_emergency_stop || engine_state == ES_ground_start_termination || engine_state == ES_flight_start_terminnation )
  测试用例: ES_DR_OS_Us=4.0, ES_cold_operation=3.0, ES_emergency_stop=6.0, ES_flight_standby=2.0, ES_flight_start_terminnation=8.0, ES_ground_standby=1.0, ES_ground_start_termination=7.0, ES_normal_stop=5.0, ES_origin=0.0, engine_state=0, level_default=0.0, thrust_level=1
  预期结果: False

==================================================
处理模块: 设置起飞锁定指令_有效
提取到的if条件: ['airdis_WOW ==1 && CAS > PD_ToLockCASHigh && PLA >71 && PLA <= 76']

处理条件 1: airdis_WOW ==1 && CAS > PD_ToLockCASHigh && PLA >71 && PLA <= 76
解析后的Python条件表达式: airdis_WOW == 1 and CAS > PD_ToLockCASHigh and PLA > 71 and PLA <= 76
变量及其范围: [{'name': 'CAS', 'min_value': -30000.0, 'max_value': 30000.0, 'var_type': 'float', 'is_last': False, 'original_var': 'CAS'}, {'name': 'airdis_WOW', 'min_value': 0.0, 'max_value': 1.0, 'var_type': 'bool', 'is_last': False, 'original_var': 'airdis_WOW'}, {'name': 'PD_ToLockCASHigh', 'min_value': 0.0, 'max_value': 1000.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PD_ToLockCASHigh'}, {'name': 'PLA', 'min_value': -33.0, 'max_value': 85.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PLA'}]
解析后的条件: airdis_WOW == 1 and CAS > PD_ToLockCASHigh and PLA > 71 and PLA <= 76
识别到的变量: [{'name': 'CAS', 'min_value': -30000.0, 'max_value': 30000.0, 'var_type': 'float', 'is_last': False, 'original_var': 'CAS'}, {'name': 'airdis_WOW', 'min_value': 0.0, 'max_value': 1.0, 'var_type': 'bool', 'is_last': False, 'original_var': 'airdis_WOW'}, {'name': 'PD_ToLockCASHigh', 'min_value': 0.0, 'max_value': 1000.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PD_ToLockCASHigh'}, {'name': 'PLA', 'min_value': -33.0, 'max_value': 85.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PLA'}]
处理的变量: ['CAS', 'airdis_WOW', 'PD_ToLockCASHigh', 'PLA']
预处理后的条件: airdis_WOW == 1 and CAS > PD_ToLockCASHigh and PLA > 71 and PLA <= 76
提取的原子条件: [('airdis_WOW', '==', '1'), ('CAS', '>', 'PD_ToLockCASHigh'), ('PLA', '>', '71'), ('PLA', '<=', '76')]
表达式结构: {'AND_EXPR_0': ('and', ['ATOM_0', 'ATOM_1', 'ATOM_2', 'ATOM_3'])}
根表达式: AND_EXPR_0
警告: 无法解析变量 1
警告: 无法解析表达式 airdis_WOW == 1
警告: 无法解析变量 71
警告: 无法解析表达式 PLA > 71
警告: 无法解析变量 76
警告: 无法解析表达式 PLA <= 76
构建的Z3表达式: And(True, CAS > PD_ToLockCASHigh, True, True)
警告: 无法解析变量 1
警告: 无法解析表达式 airdis_WOW == 1
为原子条件 'CAS > PD_ToLockCASHigh' 生成MCDC测试用例
警告: 无法解析变量 71
警告: 无法解析表达式 PLA > 71
警告: 无法解析变量 76
警告: 无法解析表达式 PLA <= 76
生成的MCDC条件数量: 1
生成的MCDC条件数量: 1

生成的测试用例:
- 条件: airdis_WOW ==1 && CAS > PD_ToLockCASHigh && PLA >71 && PLA <= 76
  测试用例: CAS=0.5, PD_ToLockCASHigh=0.0, PLA=0.0, airdis_WOW=0.5
  预期结果: False
- 条件: airdis_WOW ==1 && CAS > PD_ToLockCASHigh && PLA >71 && PLA <= 76
  测试用例: CAS=0.0, PD_ToLockCASHigh=0.0, PLA=0.0, airdis_WOW=0.5
  预期结果: False

==================================================
处理模块: 设置起飞阶段指令_有效
提取到的if条件: ['airdis_WOW == 1 && WOW_ground_time > PD_ToPhaseTime1&&CAS < PD_ToPhaseCASHigh && PLA >71 && PLA <= 76']

处理条件 1: airdis_WOW == 1 && WOW_ground_time > PD_ToPhaseTime1&&CAS < PD_ToPhaseCASHigh && PLA >71 && PLA <= 76
解析后的Python条件表达式: airdis_WOW == 1 and WOW_ground_time > PD_ToPhaseTime1 and CAS < PD_ToPhaseCASHigh and PLA > 71 and PLA <= 76
变量及其范围: [{'name': 'CAS', 'min_value': -30000.0, 'max_value': 30000.0, 'var_type': 'float', 'is_last': False, 'original_var': 'CAS'}, {'name': 'WOW_ground_time', 'min_value': -30000.0, 'max_value': 30000.0, 'var_type': 'float', 'is_last': False, 'original_var': 'WOW_ground_time'}, {'name': 'PD_ToPhaseTime1', 'min_value': -30000.0, 'max_value': 30000.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PD_ToPhaseTime1'}, {'name': 'PD_ToPhaseCASHigh', 'min_value': -30000.0, 'max_value': 30000.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PD_ToPhaseCASHigh'}, {'name': 'PLA', 'min_value': -33.0, 'max_value': 85.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PLA'}, {'name': 'airdis_WOW', 'min_value': 0.0, 'max_value': 1.0, 'var_type': 'bool', 'is_last': False, 'original_var': 'airdis_WOW'}]
解析后的条件: airdis_WOW == 1 and WOW_ground_time > PD_ToPhaseTime1 and CAS < PD_ToPhaseCASHigh and PLA > 71 and PLA <= 76
识别到的变量: [{'name': 'CAS', 'min_value': -30000.0, 'max_value': 30000.0, 'var_type': 'float', 'is_last': False, 'original_var': 'CAS'}, {'name': 'WOW_ground_time', 'min_value': -30000.0, 'max_value': 30000.0, 'var_type': 'float', 'is_last': False, 'original_var': 'WOW_ground_time'}, {'name': 'PD_ToPhaseTime1', 'min_value': -30000.0, 'max_value': 30000.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PD_ToPhaseTime1'}, {'name': 'PD_ToPhaseCASHigh', 'min_value': -30000.0, 'max_value': 30000.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PD_ToPhaseCASHigh'}, {'name': 'PLA', 'min_value': -33.0, 'max_value': 85.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PLA'}, {'name': 'airdis_WOW', 'min_value': 0.0, 'max_value': 1.0, 'var_type': 'bool', 'is_last': False, 'original_var': 'airdis_WOW'}]
处理的变量: ['CAS', 'WOW_ground_time', 'PD_ToPhaseTime1', 'PD_ToPhaseCASHigh', 'PLA', 'airdis_WOW']
预处理后的条件: airdis_WOW == 1 and WOW_ground_time > PD_ToPhaseTime1 and CAS < PD_ToPhaseCASHigh and PLA > 71 and PLA <= 76
提取的原子条件: [('airdis_WOW', '==', '1'), ('WOW_ground_time', '>', 'PD_ToPhaseTime1'), ('CAS', '<', 'PD_ToPhaseCASHigh'), ('PLA', '>', '71'), ('PLA', '<=', '76')]
表达式结构: {'AND_EXPR_0': ('and', ['ATOM_0', 'ATOM_1', 'ATOM_2', 'ATOM_3', 'ATOM_4'])}
根表达式: AND_EXPR_0
警告: 无法解析变量 1
警告: 无法解析表达式 airdis_WOW == 1
警告: 无法解析变量 71
警告: 无法解析表达式 PLA > 71
警告: 无法解析变量 76
警告: 无法解析表达式 PLA <= 76
构建的Z3表达式: And(True,
    WOW_ground_time > PD_ToPhaseTime1,
    CAS < PD_ToPhaseCASHigh,
    True,
    True)
警告: 无法解析变量 1
警告: 无法解析表达式 airdis_WOW == 1
为原子条件 'WOW_ground_time > PD_ToPhaseTime1' 生成MCDC测试用例
为原子条件 'CAS < PD_ToPhaseCASHigh' 生成MCDC测试用例
警告: 无法解析变量 71
警告: 无法解析表达式 PLA > 71
警告: 无法解析变量 76
警告: 无法解析表达式 PLA <= 76
生成的MCDC条件数量: 2
生成的MCDC条件数量: 2

生成的测试用例:
- 条件: airdis_WOW == 1 && WOW_ground_time > PD_ToPhaseTime1&&CAS < PD_ToPhaseCASHigh && PLA >71 && PLA <= 76
  测试用例: CAS=0.0, PD_ToPhaseCASHigh=0.5, PD_ToPhaseTime1=0.0, PLA=0.0, WOW_ground_time=0.5, airdis_WOW=0.5
  预期结果: False
- 条件: airdis_WOW == 1 && WOW_ground_time > PD_ToPhaseTime1&&CAS < PD_ToPhaseCASHigh && PLA >71 && PLA <= 76
  测试用例: CAS=0.0, PD_ToPhaseCASHigh=0.5, PD_ToPhaseTime1=0.0, PLA=0.0, WOW_ground_time=0.0, airdis_WOW=0.5
  预期结果: False
- 条件: airdis_WOW == 1 && WOW_ground_time > PD_ToPhaseTime1&&CAS < PD_ToPhaseCASHigh && PLA >71 && PLA <= 76
  测试用例: CAS=0.0, PD_ToPhaseCASHigh=0.5, PD_ToPhaseTime1=0.0, PLA=0.0, WOW_ground_time=0.5, airdis_WOW=0.5
  预期结果: False
- 条件: airdis_WOW == 1 && WOW_ground_time > PD_ToPhaseTime1&&CAS < PD_ToPhaseCASHigh && PLA >71 && PLA <= 76
  测试用例: CAS=0.0, PD_ToPhaseCASHigh=0.0, PD_ToPhaseTime1=0.0, PLA=0.0, WOW_ground_time=0.5, airdis_WOW=0.5
  预期结果: False

==================================================
处理模块: 起飞锁定指令有效后锁定参数
提取到的if条件: ['to_lock_sig == 1']

处理条件 1: to_lock_sig == 1
解析后的Python条件表达式: to_lock_sig == 1
变量及其范围: [{'name': 'to_lock_sig', 'min_value': 0.0, 'max_value': 1.0, 'var_type': 'bool', 'is_last': False, 'original_var': 'to_lock_sig'}]
解析后的条件: to_lock_sig == 1
识别到的变量: [{'name': 'to_lock_sig', 'min_value': 0.0, 'max_value': 1.0, 'var_type': 'bool', 'is_last': False, 'original_var': 'to_lock_sig'}]
处理的变量: ['to_lock_sig']
预处理后的条件: to_lock_sig == 1
提取的原子条件: [('to_lock_sig', '==', '1')]
表达式结构: {}
根表达式: ATOM_0
警告: 无法解析变量 1
警告: 无法解析表达式 to_lock_sig == 1
构建的Z3表达式: True
警告: 无法解析变量 1
警告: 无法解析表达式 to_lock_sig == 1
生成的MCDC条件数量: 0
生成的MCDC条件数量: 0

==================================================
处理模块: 起飞阶段指令与起飞锁定指令同时无效采用实时参数
提取到的if条件: ['to_lock_sig == 0 && to_phase_sig == 0']

处理条件 1: to_lock_sig == 0 && to_phase_sig == 0
解析后的Python条件表达式: to_lock_sig == 0 and to_phase_sig == 0
变量及其范围: [{'name': 'to_phase_sig', 'min_value': 0.0, 'max_value': 1.0, 'var_type': 'bool', 'is_last': False, 'original_var': 'to_phase_sig'}, {'name': 'to_lock_sig', 'min_value': 0.0, 'max_value': 1.0, 'var_type': 'bool', 'is_last': False, 'original_var': 'to_lock_sig'}]
解析后的条件: to_lock_sig == 0 and to_phase_sig == 0
识别到的变量: [{'name': 'to_phase_sig', 'min_value': 0.0, 'max_value': 1.0, 'var_type': 'bool', 'is_last': False, 'original_var': 'to_phase_sig'}, {'name': 'to_lock_sig', 'min_value': 0.0, 'max_value': 1.0, 'var_type': 'bool', 'is_last': False, 'original_var': 'to_lock_sig'}]
处理的变量: ['to_phase_sig', 'to_lock_sig']
预处理后的条件: to_lock_sig == 0 and to_phase_sig == 0
提取的原子条件: [('to_lock_sig', '==', '0'), ('to_phase_sig', '==', '0')]
表达式结构: {'AND_EXPR_0': ('and', ['ATOM_0', 'ATOM_1'])}
根表达式: AND_EXPR_0
警告: 无法解析变量 0
警告: 无法解析表达式 to_lock_sig == 0
警告: 无法解析变量 0
警告: 无法解析表达式 to_phase_sig == 0
构建的Z3表达式: And(True, True)
警告: 无法解析变量 0
警告: 无法解析表达式 to_lock_sig == 0
警告: 无法解析变量 0
警告: 无法解析表达式 to_phase_sig == 0
生成的MCDC条件数量: 0
生成的MCDC条件数量: 0

==================================================
处理模块: 起飞锁定指令失效后禁止再次启动起飞锁定指令
提取到的if条件: ['to_lock_sig == 0', 'airdis_WOW == 1 && CAS < PD_ToLockCASLow']

处理条件 1: to_lock_sig == 0
解析后的Python条件表达式: to_lock_sig == 0
变量及其范围: [{'name': 'to_lock_sig', 'min_value': 0.0, 'max_value': 1.0, 'var_type': 'bool', 'is_last': False, 'original_var': 'to_lock_sig'}]
解析后的条件: to_lock_sig == 0
识别到的变量: [{'name': 'to_lock_sig', 'min_value': 0.0, 'max_value': 1.0, 'var_type': 'bool', 'is_last': False, 'original_var': 'to_lock_sig'}]
处理的变量: ['to_lock_sig']
预处理后的条件: to_lock_sig == 0
提取的原子条件: [('to_lock_sig', '==', '0')]
表达式结构: {}
根表达式: ATOM_0
警告: 无法解析变量 0
警告: 无法解析表达式 to_lock_sig == 0
构建的Z3表达式: True
警告: 无法解析变量 0
警告: 无法解析表达式 to_lock_sig == 0
生成的MCDC条件数量: 0
生成的MCDC条件数量: 0

处理条件 2: airdis_WOW == 1 && CAS < PD_ToLockCASLow
解析后的Python条件表达式: airdis_WOW == 1 and CAS < PD_ToLockCASLow
变量及其范围: [{'name': 'airdis_WOW', 'min_value': 0.0, 'max_value': 1.0, 'var_type': 'bool', 'is_last': False, 'original_var': 'airdis_WOW'}, {'name': 'CAS', 'min_value': -30000.0, 'max_value': 30000.0, 'var_type': 'float', 'is_last': False, 'original_var': 'CAS'}, {'name': 'PD_ToLockCASLow', 'min_value': 0.0, 'max_value': 1000.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PD_ToLockCASLow'}]
解析后的条件: airdis_WOW == 1 and CAS < PD_ToLockCASLow
识别到的变量: [{'name': 'airdis_WOW', 'min_value': 0.0, 'max_value': 1.0, 'var_type': 'bool', 'is_last': False, 'original_var': 'airdis_WOW'}, {'name': 'CAS', 'min_value': -30000.0, 'max_value': 30000.0, 'var_type': 'float', 'is_last': False, 'original_var': 'CAS'}, {'name': 'PD_ToLockCASLow', 'min_value': 0.0, 'max_value': 1000.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PD_ToLockCASLow'}]
处理的变量: ['airdis_WOW', 'CAS', 'PD_ToLockCASLow']
预处理后的条件: airdis_WOW == 1 and CAS < PD_ToLockCASLow
提取的原子条件: [('airdis_WOW', '==', '1'), ('CAS', '<', 'PD_ToLockCASLow')]
表达式结构: {'AND_EXPR_0': ('and', ['ATOM_0', 'ATOM_1'])}
根表达式: AND_EXPR_0
警告: 无法解析变量 1
警告: 无法解析表达式 airdis_WOW == 1
构建的Z3表达式: And(True, CAS < PD_ToLockCASLow)
警告: 无法解析变量 1
警告: 无法解析表达式 airdis_WOW == 1
为原子条件 'CAS < PD_ToLockCASLow' 生成MCDC测试用例
生成的MCDC条件数量: 1
生成的MCDC条件数量: 1

生成的测试用例:
- 条件: airdis_WOW == 1 && CAS < PD_ToLockCASLow
  测试用例: CAS=-0.5, PD_ToLockCASLow=0.0, airdis_WOW=0.5
  预期结果: False
- 条件: airdis_WOW == 1 && CAS < PD_ToLockCASLow
  测试用例: CAS=0.0, PD_ToLockCASLow=0.0, airdis_WOW=0.5
  预期结果: False

==================================================
处理模块: 起飞阶段指令失效后禁止再次启动起飞阶段指令
提取到的if条件: ['to_phase_sig == 0', 'airdis_WOW == 1 && CAS < PD_ToLockCASLow']

处理条件 1: to_phase_sig == 0
解析后的Python条件表达式: to_phase_sig == 0
变量及其范围: [{'name': 'to_phase_sig', 'min_value': 0.0, 'max_value': 1.0, 'var_type': 'bool', 'is_last': False, 'original_var': 'to_phase_sig'}]
解析后的条件: to_phase_sig == 0
识别到的变量: [{'name': 'to_phase_sig', 'min_value': 0.0, 'max_value': 1.0, 'var_type': 'bool', 'is_last': False, 'original_var': 'to_phase_sig'}]
处理的变量: ['to_phase_sig']
预处理后的条件: to_phase_sig == 0
提取的原子条件: [('to_phase_sig', '==', '0')]
表达式结构: {}
根表达式: ATOM_0
警告: 无法解析变量 0
警告: 无法解析表达式 to_phase_sig == 0
构建的Z3表达式: True
警告: 无法解析变量 0
警告: 无法解析表达式 to_phase_sig == 0
生成的MCDC条件数量: 0
生成的MCDC条件数量: 0

处理条件 2: airdis_WOW == 1 && CAS < PD_ToLockCASLow
解析后的Python条件表达式: airdis_WOW == 1 and CAS < PD_ToLockCASLow
变量及其范围: [{'name': 'airdis_WOW', 'min_value': 0.0, 'max_value': 1.0, 'var_type': 'bool', 'is_last': False, 'original_var': 'airdis_WOW'}, {'name': 'CAS', 'min_value': -30000.0, 'max_value': 30000.0, 'var_type': 'float', 'is_last': False, 'original_var': 'CAS'}, {'name': 'PD_ToLockCASLow', 'min_value': 0.0, 'max_value': 1000.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PD_ToLockCASLow'}]
解析后的条件: airdis_WOW == 1 and CAS < PD_ToLockCASLow
识别到的变量: [{'name': 'airdis_WOW', 'min_value': 0.0, 'max_value': 1.0, 'var_type': 'bool', 'is_last': False, 'original_var': 'airdis_WOW'}, {'name': 'CAS', 'min_value': -30000.0, 'max_value': 30000.0, 'var_type': 'float', 'is_last': False, 'original_var': 'CAS'}, {'name': 'PD_ToLockCASLow', 'min_value': 0.0, 'max_value': 1000.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PD_ToLockCASLow'}]
处理的变量: ['airdis_WOW', 'CAS', 'PD_ToLockCASLow']
预处理后的条件: airdis_WOW == 1 and CAS < PD_ToLockCASLow
提取的原子条件: [('airdis_WOW', '==', '1'), ('CAS', '<', 'PD_ToLockCASLow')]
表达式结构: {'AND_EXPR_0': ('and', ['ATOM_0', 'ATOM_1'])}
根表达式: AND_EXPR_0
警告: 无法解析变量 1
警告: 无法解析表达式 airdis_WOW == 1
构建的Z3表达式: And(True, CAS < PD_ToLockCASLow)
警告: 无法解析变量 1
警告: 无法解析表达式 airdis_WOW == 1
为原子条件 'CAS < PD_ToLockCASLow' 生成MCDC测试用例
生成的MCDC条件数量: 1
生成的MCDC条件数量: 1

生成的测试用例:
- 条件: airdis_WOW == 1 && CAS < PD_ToLockCASLow
  测试用例: CAS=-0.5, PD_ToLockCASLow=0.0, airdis_WOW=0.5
  预期结果: False
- 条件: airdis_WOW == 1 && CAS < PD_ToLockCASLow
  测试用例: CAS=0.0, PD_ToLockCASLow=0.0, airdis_WOW=0.5
  预期结果: False

==================================================
处理模块: 基本推力计划计算_最大起飞（MTO）
模块中没有if语句，跳过

==================================================
处理模块: 基本推力计划计算_复飞（GA）
模块中没有if语句，跳过

==================================================
处理模块: 基本推力计划计算_减推力起飞1（DTO1）
模块中没有if语句，跳过

==================================================
处理模块: 基本推力计划计算_减推力起飞2（DTO2）
模块中没有if语句，跳过

==================================================
处理模块: 基本推力计划计算_增推力起飞（Bump）
模块中没有if语句，跳过

==================================================
处理模块: 基本推力计划计算_ 灵活起飞（FLEXTO）
模块中没有if语句，跳过

==================================================
处理模块: 基本推力计划计算_最大连续（MCT）
模块中没有if语句，跳过

==================================================
处理模块: 基本推力计划计算_最大爬升（MCL）
模块中没有if语句，跳过

==================================================
处理模块: 基本推力计划计算_减推力爬升1
模块中没有if语句，跳过

==================================================
处理模块: 基本推力计划计算_减推力爬升2
模块中没有if语句，跳过

==================================================
处理模块: 基本推力计划计算_最大巡航（MCR）
模块中没有if语句，跳过

==================================================
处理模块: 计算最大起飞正常引气修正
模块中没有if语句，跳过

==================================================
处理模块: 计算最大连续正常引气修正
模块中没有if语句，跳过

==================================================
处理模块: 计算最大爬升正常引气修正
模块中没有if语句，跳过

==================================================
处理模块: 计算最大巡航正常引气修正
模块中没有if语句，跳过

==================================================
处理模块: 计算最大起飞异常低引气修正
模块中没有if语句，跳过

==================================================
处理模块: 计算最大连续异常低引气修正
模块中没有if语句，跳过

==================================================
处理模块: 计算最大爬升异常低引气修正
模块中没有if语句，跳过

==================================================
处理模块: 计算最大巡航异常低引气修正
模块中没有if语句，跳过

==================================================
处理模块: 计算最大起飞异常高引气修正
模块中没有if语句，跳过

==================================================
处理模块: 计算最大连续异常高引气修正
模块中没有if语句，跳过

==================================================
处理模块: 计算最大爬升异常高引气修正
模块中没有if语句，跳过

==================================================
处理模块: 计算最大巡航异常高引气修正
模块中没有if语句，跳过

==================================================
处理模块: 设置ECS参数（无引气）
提取到的if条件: ['ECSBleedCfg == no_bleed']

处理条件 1: ECSBleedCfg == no_bleed
解析后的Python条件表达式: ECSBleedCfg == no_bleed
变量及其范围: [{'name': 'no_bleed', 'min_value': 0.0, 'max_value': 0.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'no_bleed', 'constant_value': 0.0}, {'name': 'ECSBleedCfg', 'min_value': 0.0, 'max_value': 3.0, 'var_type': 'int', 'is_last': False, 'original_var': 'ECSBleedCfg'}]
解析后的条件: ECSBleedCfg == no_bleed
识别到的变量: [{'name': 'no_bleed', 'min_value': 0.0, 'max_value': 0.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'no_bleed', 'constant_value': 0.0}, {'name': 'ECSBleedCfg', 'min_value': 0.0, 'max_value': 3.0, 'var_type': 'int', 'is_last': False, 'original_var': 'ECSBleedCfg'}]
处理的变量: ['no_bleed', 'ECSBleedCfg']
预处理后的条件: ECSBleedCfg == no_bleed
提取的原子条件: [('ECSBleedCfg', '==', 'no_bleed')]
表达式结构: {}
根表达式: ATOM_0
构建的Z3表达式: 0 == ECSBleedCfg
为原子条件 'ECSBleedCfg == no_bleed' 生成MCDC测试用例
生成的MCDC条件数量: 1
生成的MCDC条件数量: 1

生成的测试用例:
- 条件: ECSBleedCfg == no_bleed
  测试用例: ECSBleedCfg=0, no_bleed=0.0
  预期结果: True
- 条件: ECSBleedCfg == no_bleed
  测试用例: ECSBleedCfg=1, no_bleed=0.0
  预期结果: False

==================================================
处理模块: 设置ECS参数（正常引气）
提取到的if条件: ['ECSBleedCfg == norm_bleed']

处理条件 1: ECSBleedCfg == norm_bleed
解析后的Python条件表达式: ECSBleedCfg == norm_bleed
变量及其范围: [{'name': 'norm_bleed', 'min_value': 1.0, 'max_value': 1.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'norm_bleed', 'constant_value': 1.0}, {'name': 'ECSBleedCfg', 'min_value': 0.0, 'max_value': 3.0, 'var_type': 'int', 'is_last': False, 'original_var': 'ECSBleedCfg'}]
解析后的条件: ECSBleedCfg == norm_bleed
识别到的变量: [{'name': 'norm_bleed', 'min_value': 1.0, 'max_value': 1.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'norm_bleed', 'constant_value': 1.0}, {'name': 'ECSBleedCfg', 'min_value': 0.0, 'max_value': 3.0, 'var_type': 'int', 'is_last': False, 'original_var': 'ECSBleedCfg'}]
处理的变量: ['norm_bleed', 'ECSBleedCfg']
预处理后的条件: ECSBleedCfg == norm_bleed
提取的原子条件: [('ECSBleedCfg', '==', 'norm_bleed')]
表达式结构: {}
根表达式: ATOM_0
构建的Z3表达式: 1 == ECSBleedCfg
为原子条件 'ECSBleedCfg == norm_bleed' 生成MCDC测试用例
生成的MCDC条件数量: 1
生成的MCDC条件数量: 1

生成的测试用例:
- 条件: ECSBleedCfg == norm_bleed
  测试用例: ECSBleedCfg=1, norm_bleed=1.0
  预期结果: True
- 条件: ECSBleedCfg == norm_bleed
  测试用例: ECSBleedCfg=0, norm_bleed=1.0
  预期结果: False

==================================================
处理模块: 设置ECS参数（异常低引气）
提取到的if条件: ['ECSBleedCfg == abn_low_bleed']

处理条件 1: ECSBleedCfg == abn_low_bleed
解析后的Python条件表达式: ECSBleedCfg == abn_low_bleed
变量及其范围: [{'name': 'abn_low_bleed', 'min_value': 2.0, 'max_value': 2.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'abn_low_bleed', 'constant_value': 2.0}, {'name': 'ECSBleedCfg', 'min_value': 0.0, 'max_value': 3.0, 'var_type': 'int', 'is_last': False, 'original_var': 'ECSBleedCfg'}]
解析后的条件: ECSBleedCfg == abn_low_bleed
识别到的变量: [{'name': 'abn_low_bleed', 'min_value': 2.0, 'max_value': 2.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'abn_low_bleed', 'constant_value': 2.0}, {'name': 'ECSBleedCfg', 'min_value': 0.0, 'max_value': 3.0, 'var_type': 'int', 'is_last': False, 'original_var': 'ECSBleedCfg'}]
处理的变量: ['abn_low_bleed', 'ECSBleedCfg']
预处理后的条件: ECSBleedCfg == abn_low_bleed
提取的原子条件: [('ECSBleedCfg', '==', 'abn_low_bleed')]
表达式结构: {}
根表达式: ATOM_0
构建的Z3表达式: 2 == ECSBleedCfg
为原子条件 'ECSBleedCfg == abn_low_bleed' 生成MCDC测试用例
生成的MCDC条件数量: 1
生成的MCDC条件数量: 1

生成的测试用例:
- 条件: ECSBleedCfg == abn_low_bleed
  测试用例: ECSBleedCfg=2, abn_low_bleed=2.0
  预期结果: True
- 条件: ECSBleedCfg == abn_low_bleed
  测试用例: ECSBleedCfg=1, abn_low_bleed=2.0
  预期结果: False

==================================================
处理模块: 设置ECS参数（异常高引气）
提取到的if条件: ['ECSBleedCfg == abn_high_bleed']

处理条件 1: ECSBleedCfg == abn_high_bleed
解析后的Python条件表达式: ECSBleedCfg == abn_high_bleed
变量及其范围: [{'name': 'ECSBleedCfg', 'min_value': 0.0, 'max_value': 3.0, 'var_type': 'int', 'is_last': False, 'original_var': 'ECSBleedCfg'}, {'name': 'abn_high_bleed', 'min_value': 3.0, 'max_value': 3.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'abn_high_bleed', 'constant_value': 3.0}]
解析后的条件: ECSBleedCfg == abn_high_bleed
识别到的变量: [{'name': 'ECSBleedCfg', 'min_value': 0.0, 'max_value': 3.0, 'var_type': 'int', 'is_last': False, 'original_var': 'ECSBleedCfg'}, {'name': 'abn_high_bleed', 'min_value': 3.0, 'max_value': 3.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'abn_high_bleed', 'constant_value': 3.0}]
处理的变量: ['ECSBleedCfg', 'abn_high_bleed']
预处理后的条件: ECSBleedCfg == abn_high_bleed
提取的原子条件: [('ECSBleedCfg', '==', 'abn_high_bleed')]
表达式结构: {}
根表达式: ATOM_0
构建的Z3表达式: 3 == ECSBleedCfg
为原子条件 'ECSBleedCfg == abn_high_bleed' 生成MCDC测试用例
生成的MCDC条件数量: 1
生成的MCDC条件数量: 1

生成的测试用例:
- 条件: ECSBleedCfg == abn_high_bleed
  测试用例: ECSBleedCfg=3, abn_high_bleed=3.0
  预期结果: True
- 条件: ECSBleedCfg == abn_high_bleed
  测试用例: ECSBleedCfg=2, abn_high_bleed=3.0
  预期结果: False

==================================================
处理模块: 计算N1RDemWAI1_MTO
模块中没有if语句，跳过

==================================================
处理模块: 计算N1RDemWAI1_MCT
模块中没有if语句，跳过

==================================================
处理模块: 计算N1RDemWAI2_MTO
模块中没有if语句，跳过

==================================================
处理模块: 计算N1RDemWAI2_MCT
模块中没有if语句，跳过

==================================================
处理模块: 计算DN1RWAImcl1
模块中没有if语句，跳过

==================================================
处理模块: 计算DN1RWAImcr1
模块中没有if语句，跳过

==================================================
处理模块: 计算DN1RWAImcl2
模块中没有if语句，跳过

==================================================
处理模块: 计算DN1RWAImcr2
模块中没有if语句，跳过

==================================================
处理模块: 设置WAI参数（无引气）
提取到的if条件: ['WAIBleedCfg == no_bleed']

处理条件 1: WAIBleedCfg == no_bleed
解析后的Python条件表达式: WAIBleedCfg == no_bleed
变量及其范围: [{'name': 'no_bleed', 'min_value': 0.0, 'max_value': 0.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'no_bleed', 'constant_value': 0.0}, {'name': 'WAIBleedCfg', 'min_value': 0.0, 'max_value': 3.0, 'var_type': 'int', 'is_last': False, 'original_var': 'WAIBleedCfg'}]
解析后的条件: WAIBleedCfg == no_bleed
识别到的变量: [{'name': 'no_bleed', 'min_value': 0.0, 'max_value': 0.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'no_bleed', 'constant_value': 0.0}, {'name': 'WAIBleedCfg', 'min_value': 0.0, 'max_value': 3.0, 'var_type': 'int', 'is_last': False, 'original_var': 'WAIBleedCfg'}]
处理的变量: ['no_bleed', 'WAIBleedCfg']
预处理后的条件: WAIBleedCfg == no_bleed
提取的原子条件: [('WAIBleedCfg', '==', 'no_bleed')]
表达式结构: {}
根表达式: ATOM_0
构建的Z3表达式: 0 == WAIBleedCfg
为原子条件 'WAIBleedCfg == no_bleed' 生成MCDC测试用例
生成的MCDC条件数量: 1
生成的MCDC条件数量: 1

生成的测试用例:
- 条件: WAIBleedCfg == no_bleed
  测试用例: WAIBleedCfg=0, no_bleed=0.0
  预期结果: True
- 条件: WAIBleedCfg == no_bleed
  测试用例: WAIBleedCfg=1, no_bleed=0.0
  预期结果: False

==================================================
处理模块: 设置WAI参数（正常引气）
提取到的if条件: ['WAIBleedCfg == norm_bleed']

处理条件 1: WAIBleedCfg == norm_bleed
解析后的Python条件表达式: WAIBleedCfg == norm_bleed
变量及其范围: [{'name': 'norm_bleed', 'min_value': 1.0, 'max_value': 1.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'norm_bleed', 'constant_value': 1.0}, {'name': 'WAIBleedCfg', 'min_value': 0.0, 'max_value': 3.0, 'var_type': 'int', 'is_last': False, 'original_var': 'WAIBleedCfg'}]
解析后的条件: WAIBleedCfg == norm_bleed
识别到的变量: [{'name': 'norm_bleed', 'min_value': 1.0, 'max_value': 1.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'norm_bleed', 'constant_value': 1.0}, {'name': 'WAIBleedCfg', 'min_value': 0.0, 'max_value': 3.0, 'var_type': 'int', 'is_last': False, 'original_var': 'WAIBleedCfg'}]
处理的变量: ['norm_bleed', 'WAIBleedCfg']
预处理后的条件: WAIBleedCfg == norm_bleed
提取的原子条件: [('WAIBleedCfg', '==', 'norm_bleed')]
表达式结构: {}
根表达式: ATOM_0
构建的Z3表达式: 1 == WAIBleedCfg
为原子条件 'WAIBleedCfg == norm_bleed' 生成MCDC测试用例
生成的MCDC条件数量: 1
生成的MCDC条件数量: 1

生成的测试用例:
- 条件: WAIBleedCfg == norm_bleed
  测试用例: WAIBleedCfg=1, norm_bleed=1.0
  预期结果: True
- 条件: WAIBleedCfg == norm_bleed
  测试用例: WAIBleedCfg=0, norm_bleed=1.0
  预期结果: False

==================================================
处理模块: 设置WAI参数（异常高引气）
提取到的if条件: ['WAIBleedCfg == abn_high_bleed']

处理条件 1: WAIBleedCfg == abn_high_bleed
解析后的Python条件表达式: WAIBleedCfg == abn_high_bleed
变量及其范围: [{'name': 'WAIBleedCfg', 'min_value': 0.0, 'max_value': 3.0, 'var_type': 'int', 'is_last': False, 'original_var': 'WAIBleedCfg'}, {'name': 'abn_high_bleed', 'min_value': 3.0, 'max_value': 3.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'abn_high_bleed', 'constant_value': 3.0}]
解析后的条件: WAIBleedCfg == abn_high_bleed
识别到的变量: [{'name': 'WAIBleedCfg', 'min_value': 0.0, 'max_value': 3.0, 'var_type': 'int', 'is_last': False, 'original_var': 'WAIBleedCfg'}, {'name': 'abn_high_bleed', 'min_value': 3.0, 'max_value': 3.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'abn_high_bleed', 'constant_value': 3.0}]
处理的变量: ['WAIBleedCfg', 'abn_high_bleed']
预处理后的条件: WAIBleedCfg == abn_high_bleed
提取的原子条件: [('WAIBleedCfg', '==', 'abn_high_bleed')]
表达式结构: {}
根表达式: ATOM_0
构建的Z3表达式: 3 == WAIBleedCfg
为原子条件 'WAIBleedCfg == abn_high_bleed' 生成MCDC测试用例
生成的MCDC条件数量: 1
生成的MCDC条件数量: 1

生成的测试用例:
- 条件: WAIBleedCfg == abn_high_bleed
  测试用例: WAIBleedCfg=3, abn_high_bleed=3.0
  预期结果: True
- 条件: WAIBleedCfg == abn_high_bleed
  测试用例: WAIBleedCfg=2, abn_high_bleed=3.0
  预期结果: False

==================================================
处理模块: 计算N1RDemNAI1_MTO
模块中没有if语句，跳过

==================================================
处理模块: 计算N1RDemNAI1_MCT
模块中没有if语句，跳过

==================================================
处理模块: 计算DN1RNAImcl1
模块中没有if语句，跳过

==================================================
处理模块: 计算DN1RNAImcr1
模块中没有if语句，跳过

==================================================
处理模块: 设置NAI参数（关闭）
提取到的if条件: ['nai_control == 0']

处理条件 1: nai_control == 0
解析后的Python条件表达式: nai_control == 0
变量及其范围: [{'name': 'nai_control', 'min_value': 0.0, 'max_value': 1.0, 'var_type': 'bool', 'is_last': False, 'original_var': 'nai_control'}]
解析后的条件: nai_control == 0
识别到的变量: [{'name': 'nai_control', 'min_value': 0.0, 'max_value': 1.0, 'var_type': 'bool', 'is_last': False, 'original_var': 'nai_control'}]
处理的变量: ['nai_control']
预处理后的条件: nai_control == 0
提取的原子条件: [('nai_control', '==', '0')]
表达式结构: {}
根表达式: ATOM_0
警告: 无法解析变量 0
警告: 无法解析表达式 nai_control == 0
构建的Z3表达式: True
警告: 无法解析变量 0
警告: 无法解析表达式 nai_control == 0
生成的MCDC条件数量: 0
生成的MCDC条件数量: 0

==================================================
处理模块: 设置NAI参数（打开）
提取到的if条件: ['nai_control == 1']

处理条件 1: nai_control == 1
解析后的Python条件表达式: nai_control == 1
变量及其范围: [{'name': 'nai_control', 'min_value': 0.0, 'max_value': 1.0, 'var_type': 'bool', 'is_last': False, 'original_var': 'nai_control'}]
解析后的条件: nai_control == 1
识别到的变量: [{'name': 'nai_control', 'min_value': 0.0, 'max_value': 1.0, 'var_type': 'bool', 'is_last': False, 'original_var': 'nai_control'}]
处理的变量: ['nai_control']
预处理后的条件: nai_control == 1
提取的原子条件: [('nai_control', '==', '1')]
表达式结构: {}
根表达式: ATOM_0
警告: 无法解析变量 1
警告: 无法解析表达式 nai_control == 1
构建的Z3表达式: True
警告: 无法解析变量 1
警告: 无法解析表达式 nai_control == 1
生成的MCDC条件数量: 0
生成的MCDC条件数量: 0

==================================================
处理模块: 计算最大起飞引气修正量
模块中没有if语句，跳过

==================================================
处理模块: 计算最大连续引气修正量
模块中没有if语句，跳过

==================================================
处理模块: 计算最大爬升引气修正量
模块中没有if语句，跳过

==================================================
处理模块: 计算最大巡航引气修正量
模块中没有if语句，跳过

==================================================
处理模块: 设置减推力起飞DTO1、DTO2、灵活起飞FLEXTO、复飞GA、增推力起飞Bump的引气修正量
模块中没有if语句，跳过

==================================================
处理模块: 设置减推力爬升DCL1、DCL2的引气修正量
模块中没有if语句，跳过

==================================================
处理模块: 推力配平判断
提取到的if条件: ['(N1_trim_enable == 1) && (N1Trim_signal == 1) && (airdis_WOW == 0) && ((thrust_level == level_MCR) || (thrust_level == level_MCT) || (thrust_level == level_MCL) || (thrust_level == level_CR) || (thrust_level == level_CT) || (thrust_level == level_CL) || (thrust_level == level_DCL1) || (thrust_level == level_DCL2)) && ((dspeed_state == 0) || (((dspeed_state == 1) || (dspeed_state == 2)) && (dPLA < PD_atrimpla)))']

处理条件 1: (N1_trim_enable == 1) && (N1Trim_signal == 1) && (airdis_WOW == 0) && ((thrust_level == level_MCR) || (thrust_level == level_MCT) || (thrust_level == level_MCL) || (thrust_level == level_CR) || (thrust_level == level_CT) || (thrust_level == level_CL) || (thrust_level == level_DCL1) || (thrust_level == level_DCL2)) && ((dspeed_state == 0) || (((dspeed_state == 1) || (dspeed_state == 2)) && (dPLA < PD_atrimpla)))
解析后的Python条件表达式: (N1_trim_enable == 1) and (N1Trim_signal == 1) and (airdis_WOW == 0) and ((thrust_level == level_MCR) or (thrust_level == level_MCT) or (thrust_level == level_MCL) or (thrust_level == level_CR) or (thrust_level == level_CT) or (thrust_level == level_CL) or (thrust_level == level_DCL1) or (thrust_level == level_DCL2)) and ((dspeed_state == 0) or (((dspeed_state == 1) or (dspeed_state == 2)) and (dPLA < PD_atrimpla)))
变量及其范围: [{'name': 'level_CT', 'min_value': 13.0, 'max_value': 13.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_CT', 'constant_value': 13.0}, {'name': 'N1Trim_signal', 'min_value': 0.0, 'max_value': 1.0, 'var_type': 'bool', 'is_last': False, 'original_var': 'N1Trim_signal'}, {'name': 'level_CL', 'min_value': 9.0, 'max_value': 9.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_CL', 'constant_value': 9.0}, {'name': 'level_MCT', 'min_value': 14.0, 'max_value': 14.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_MCT', 'constant_value': 14.0}, {'name': 'dPLA', 'min_value': -33.0, 'max_value': 85.0, 'var_type': 'float', 'is_last': False, 'original_var': 'dPLA'}, {'name': 'level_MCL', 'min_value': 10.0, 'max_value': 10.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_MCL', 'constant_value': 10.0}, {'name': 'level_MCR', 'min_value': 8.0, 'max_value': 8.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_MCR', 'constant_value': 8.0}, {'name': 'thrust_level', 'min_value': 0.0, 'max_value': 23.0, 'var_type': 'int', 'is_last': False, 'original_var': 'thrust_level'}, {'name': 'level_CR', 'min_value': 7.0, 'max_value': 7.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_CR', 'constant_value': 7.0}, {'name': 'N1_trim_enable', 'min_value': 0.0, 'max_value': 1.0, 'var_type': 'bool', 'is_last': False, 'original_var': 'N1_trim_enable'}, {'name': 'PD_atrimpla', 'min_value': -33.0, 'max_value': 85.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PD_atrimpla'}, {'name': 'level_DCL1', 'min_value': 11.0, 'max_value': 11.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_DCL1', 'constant_value': 11.0}, {'name': 'airdis_WOW', 'min_value': 0.0, 'max_value': 1.0, 'var_type': 'bool', 'is_last': False, 'original_var': 'airdis_WOW'}, {'name': 'level_DCL2', 'min_value': 12.0, 'max_value': 12.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_DCL2', 'constant_value': 12.0}, {'name': 'dspeed_state', 'min_value': 0.0, 'max_value': 2.0, 'var_type': 'int', 'is_last': False, 'original_var': 'dspeed_state'}]
解析后的条件: (N1_trim_enable == 1) and (N1Trim_signal == 1) and (airdis_WOW == 0) and ((thrust_level == level_MCR) or (thrust_level == level_MCT) or (thrust_level == level_MCL) or (thrust_level == level_CR) or (thrust_level == level_CT) or (thrust_level == level_CL) or (thrust_level == level_DCL1) or (thrust_level == level_DCL2)) and ((dspeed_state == 0) or (((dspeed_state == 1) or (dspeed_state == 2)) and (dPLA < PD_atrimpla)))
识别到的变量: [{'name': 'level_CT', 'min_value': 13.0, 'max_value': 13.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_CT', 'constant_value': 13.0}, {'name': 'N1Trim_signal', 'min_value': 0.0, 'max_value': 1.0, 'var_type': 'bool', 'is_last': False, 'original_var': 'N1Trim_signal'}, {'name': 'level_CL', 'min_value': 9.0, 'max_value': 9.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_CL', 'constant_value': 9.0}, {'name': 'level_MCT', 'min_value': 14.0, 'max_value': 14.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_MCT', 'constant_value': 14.0}, {'name': 'dPLA', 'min_value': -33.0, 'max_value': 85.0, 'var_type': 'float', 'is_last': False, 'original_var': 'dPLA'}, {'name': 'level_MCL', 'min_value': 10.0, 'max_value': 10.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_MCL', 'constant_value': 10.0}, {'name': 'level_MCR', 'min_value': 8.0, 'max_value': 8.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_MCR', 'constant_value': 8.0}, {'name': 'thrust_level', 'min_value': 0.0, 'max_value': 23.0, 'var_type': 'int', 'is_last': False, 'original_var': 'thrust_level'}, {'name': 'level_CR', 'min_value': 7.0, 'max_value': 7.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_CR', 'constant_value': 7.0}, {'name': 'N1_trim_enable', 'min_value': 0.0, 'max_value': 1.0, 'var_type': 'bool', 'is_last': False, 'original_var': 'N1_trim_enable'}, {'name': 'PD_atrimpla', 'min_value': -33.0, 'max_value': 85.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PD_atrimpla'}, {'name': 'level_DCL1', 'min_value': 11.0, 'max_value': 11.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_DCL1', 'constant_value': 11.0}, {'name': 'airdis_WOW', 'min_value': 0.0, 'max_value': 1.0, 'var_type': 'bool', 'is_last': False, 'original_var': 'airdis_WOW'}, {'name': 'level_DCL2', 'min_value': 12.0, 'max_value': 12.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_DCL2', 'constant_value': 12.0}, {'name': 'dspeed_state', 'min_value': 0.0, 'max_value': 2.0, 'var_type': 'int', 'is_last': False, 'original_var': 'dspeed_state'}]
处理的变量: ['level_CT', 'N1Trim_signal', 'level_CL', 'level_MCT', 'dPLA', 'level_MCL', 'level_MCR', 'thrust_level', 'level_CR', 'N1_trim_enable', 'PD_atrimpla', 'level_DCL1', 'airdis_WOW', 'level_DCL2', 'dspeed_state']
预处理后的条件: (N1_trim_enable == 1) and (N1Trim_signal == 1) and (airdis_WOW == 0) and ((thrust_level == level_MCR) or (thrust_level == level_MCT) or (thrust_level == level_MCL) or (thrust_level == level_CR) or (thrust_level == level_CT) or (thrust_level == level_CL) or (thrust_level == level_DCL1) or (thrust_level == level_DCL2)) and ((dspeed_state == 0) or (((dspeed_state == 1) or (dspeed_state == 2)) and (dPLA < PD_atrimpla)))
提取的原子条件: [('N1_trim_enable', '==', '1'), ('N1Trim_signal', '==', '1'), ('airdis_WOW', '==', '0'), ('thrust_level', '==', 'level_MCR'), ('thrust_level', '==', 'level_MCT'), ('thrust_level', '==', 'level_MCL'), ('thrust_level', '==', 'level_CR'), ('thrust_level', '==', 'level_CT'), ('thrust_level', '==', 'level_CL'), ('thrust_level', '==', 'level_DCL1'), ('thrust_level', '==', 'level_DCL2'), ('dspeed_state', '==', '0'), ('dspeed_state', '==', '1'), ('dspeed_state', '==', '2'), ('dPLA', '<', 'PD_atrimpla')]
表达式结构: {'OR_EXPR_1': ('or', ['ATOM_11', 'AND_EXPR_2']), 'OR_EXPR_3': ('or', ['ATOM_12', 'ATOM_13']), 'AND_EXPR_2': ('and', ['OR_EXPR_3', 'ATOM_14']), 'AND_EXPR_0': ('and', ['ATOM_0', 'ATOM_1', 'ATOM_2', 'OR_EXPR_1', 'OR_EXPR_1'])}
根表达式: AND_EXPR_0
警告: 无法解析变量 1
警告: 无法解析表达式 N1_trim_enable == 1
警告: 无法解析变量 1
警告: 无法解析表达式 N1Trim_signal == 1
警告: 无法解析变量 0
警告: 无法解析表达式 airdis_WOW == 0
警告: 无法解析变量 0
警告: 无法解析表达式 dspeed_state == 0
警告: 无法解析变量 1
警告: 无法解析表达式 dspeed_state == 1
警告: 无法解析变量 2
警告: 无法解析表达式 dspeed_state == 2
警告: 无法解析变量 0
警告: 无法解析表达式 dspeed_state == 0
警告: 无法解析变量 1
警告: 无法解析表达式 dspeed_state == 1
警告: 无法解析变量 2
警告: 无法解析表达式 dspeed_state == 2
构建的Z3表达式: And(True,
    True,
    True,
    Or(True, And(Or(True, True), dPLA < PD_atrimpla)),
    Or(True, And(Or(True, True), dPLA < PD_atrimpla)))
警告: 无法解析变量 1
警告: 无法解析表达式 N1_trim_enable == 1
警告: 无法解析变量 1
警告: 无法解析表达式 N1Trim_signal == 1
警告: 无法解析变量 0
警告: 无法解析表达式 airdis_WOW == 0
警告: 无法解析变量 0
警告: 无法解析表达式 dspeed_state == 0
警告: 无法解析变量 1
警告: 无法解析表达式 dspeed_state == 1
警告: 无法解析变量 2
警告: 无法解析表达式 dspeed_state == 2
生成的MCDC条件数量: 0
生成的MCDC条件数量: 0

==================================================
处理模块: 计算推力配平修正量
模块中没有if语句，跳过

==================================================
处理模块: 设置最大巡航、最大爬升、减推力爬升1、减推力爬升2、最大连续的推力配平修正量
模块中没有if语句，跳过

==================================================
处理模块: 设置最大起飞、减推力起飞1、减推力起飞2、复飞、灵活起飞、增推力起飞的推力配平修正量
模块中没有if语句，跳过

==================================================
处理模块: 油门杆插值目标计算-最大起飞
模块中没有if语句，跳过

==================================================
处理模块: 油门杆插值目标计算-复飞
模块中没有if语句，跳过

==================================================
处理模块: 油门杆插值目标计算-减推力起飞1
模块中没有if语句，跳过

==================================================
处理模块: 油门杆插值目标计算-减推力起飞2
模块中没有if语句，跳过

==================================================
处理模块: 油门杆插值目标计算-增推力起飞
模块中没有if语句，跳过

==================================================
处理模块: 油门杆插值目标计算-灵活起飞
模块中没有if语句，跳过

==================================================
处理模块: 油门杆插值目标计算-最大连续
模块中没有if语句，跳过

==================================================
处理模块: 油门杆插值目标计算-最大爬升
模块中没有if语句，跳过

==================================================
处理模块: 油门杆插值目标计算-减推力爬升1
模块中没有if语句，跳过

==================================================
处理模块: 油门杆插值目标计算-减推力爬升2
模块中没有if语句，跳过

==================================================
处理模块: 油门杆插值目标计算-最大巡航
模块中没有if语句，跳过

==================================================
处理模块: 油门杆插值目标计算-最大反推(MREV)
模块中没有if语句，跳过

==================================================
处理模块: 油门杆插值目标计算-最大推力增量计算
模块中没有if语句，跳过

==================================================
处理模块: 油门杆插值目标计算-最大推力计算
模块中没有if语句，跳过

==================================================
处理模块: 油门杆插值目标计算-N1RDem_PLATO计算
提取到的if条件: ['TL_require!=DTO1&&TL_require!=DTO2&&TL_require!=GA&&TL_require!=Bump&&(TL_require!=FLEXTO||(TL_require==FLEXTO&&flex_dT_flag==0))', 'TL_require==DTO1', 'TL_require==DTO2', 'TL_require==GA', 'TL_require==FLEXTO&&flex_dT_flag==1', 'TL_require==Bump']

处理条件 1: TL_require!=DTO1&&TL_require!=DTO2&&TL_require!=GA&&TL_require!=Bump&&(TL_require!=FLEXTO||(TL_require==FLEXTO&&flex_dT_flag==0))
解析后的Python条件表达式: TL_require != DTO1 and TL_require != DTO2 and TL_require != GA and TL_require != Bump and (TL_require != FLEXTO or (TL_require == FLEXTO and flex_dT_flag == 0))
变量及其范围: [{'name': 'Bump', 'min_value': 3.0, 'max_value': 3.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'Bump', 'constant_value': 3.0}, {'name': 'GA', 'min_value': 2.0, 'max_value': 2.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'GA', 'constant_value': 2.0}, {'name': 'DTO1', 'min_value': 0.0, 'max_value': 0.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'DTO1', 'constant_value': 0.0}, {'name': 'flex_dT_flag', 'min_value': 0.0, 'max_value': 1.0, 'var_type': 'bool', 'is_last': False, 'original_var': 'flex_dT_flag'}, {'name': 'TL_require', 'min_value': 0.0, 'max_value': 6.0, 'var_type': 'int', 'is_last': False, 'original_var': 'TL_require'}, {'name': 'DTO2', 'min_value': 1.0, 'max_value': 1.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'DTO2', 'constant_value': 1.0}, {'name': 'FLEXTO', 'min_value': 4.0, 'max_value': 4.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'FLEXTO', 'constant_value': 4.0}]
解析后的条件: TL_require != DTO1 and TL_require != DTO2 and TL_require != GA and TL_require != Bump and (TL_require != FLEXTO or (TL_require == FLEXTO and flex_dT_flag == 0))
识别到的变量: [{'name': 'Bump', 'min_value': 3.0, 'max_value': 3.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'Bump', 'constant_value': 3.0}, {'name': 'GA', 'min_value': 2.0, 'max_value': 2.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'GA', 'constant_value': 2.0}, {'name': 'DTO1', 'min_value': 0.0, 'max_value': 0.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'DTO1', 'constant_value': 0.0}, {'name': 'flex_dT_flag', 'min_value': 0.0, 'max_value': 1.0, 'var_type': 'bool', 'is_last': False, 'original_var': 'flex_dT_flag'}, {'name': 'TL_require', 'min_value': 0.0, 'max_value': 6.0, 'var_type': 'int', 'is_last': False, 'original_var': 'TL_require'}, {'name': 'DTO2', 'min_value': 1.0, 'max_value': 1.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'DTO2', 'constant_value': 1.0}, {'name': 'FLEXTO', 'min_value': 4.0, 'max_value': 4.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'FLEXTO', 'constant_value': 4.0}]
处理的变量: ['Bump', 'GA', 'DTO1', 'flex_dT_flag', 'TL_require', 'DTO2', 'FLEXTO']
预处理后的条件: TL_require != DTO1 and TL_require != DTO2 and TL_require != GA and TL_require != Bump and (TL_require != FLEXTO or (TL_require == FLEXTO and flex_dT_flag == 0))
提取的原子条件: [('TL_require', '!=', 'DTO1'), ('TL_require', '!=', 'DTO2'), ('TL_require', '!=', 'GA'), ('TL_require', '!=', 'Bump'), ('TL_require', '!=', 'FLEXTO'), ('TL_require', '==', 'FLEXTO'), ('flex_dT_flag', '==', '0')]
表达式结构: {'AND_EXPR_2': ('and', ['ATOM_5', 'ATOM_6']), 'OR_EXPR_1': ('or', ['ATOM_4', 'AND_EXPR_2']), 'AND_EXPR_0': ('and', ['ATOM_0', 'ATOM_1', 'ATOM_2', 'ATOM_3', 'OR_EXPR_1'])}
根表达式: AND_EXPR_0
警告: 无法解析变量 0
警告: 无法解析表达式 flex_dT_flag == 0
构建的Z3表达式: And(0 != TL_require,
    1 != TL_require,
    2 != TL_require,
    3 != TL_require,
    Or(4 != TL_require, And(4 == TL_require, True)))
为原子条件 'TL_require != DTO1' 生成MCDC测试用例
为原子条件 'TL_require != DTO2' 生成MCDC测试用例
为原子条件 'TL_require != GA' 生成MCDC测试用例
为原子条件 'TL_require != Bump' 生成MCDC测试用例
为原子条件 'TL_require == FLEXTO' 生成MCDC测试用例
警告: 无法解析变量 0
警告: 无法解析表达式 flex_dT_flag == 0
生成的MCDC条件数量: 5
生成的MCDC条件数量: 5

处理条件 2: TL_require==DTO1
解析后的Python条件表达式: TL_require == DTO1
变量及其范围: [{'name': 'DTO1', 'min_value': 0.0, 'max_value': 0.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'DTO1', 'constant_value': 0.0}, {'name': 'TL_require', 'min_value': 0.0, 'max_value': 6.0, 'var_type': 'int', 'is_last': False, 'original_var': 'TL_require'}]
解析后的条件: TL_require == DTO1
识别到的变量: [{'name': 'DTO1', 'min_value': 0.0, 'max_value': 0.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'DTO1', 'constant_value': 0.0}, {'name': 'TL_require', 'min_value': 0.0, 'max_value': 6.0, 'var_type': 'int', 'is_last': False, 'original_var': 'TL_require'}]
处理的变量: ['DTO1', 'TL_require']
预处理后的条件: TL_require == DTO1
提取的原子条件: [('TL_require', '==', 'DTO1')]
表达式结构: {}
根表达式: ATOM_0
构建的Z3表达式: 0 == TL_require
为原子条件 'TL_require == DTO1' 生成MCDC测试用例
生成的MCDC条件数量: 1
生成的MCDC条件数量: 1

处理条件 3: TL_require==DTO2
解析后的Python条件表达式: TL_require == DTO2
变量及其范围: [{'name': 'DTO2', 'min_value': 1.0, 'max_value': 1.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'DTO2', 'constant_value': 1.0}, {'name': 'TL_require', 'min_value': 0.0, 'max_value': 6.0, 'var_type': 'int', 'is_last': False, 'original_var': 'TL_require'}]
解析后的条件: TL_require == DTO2
识别到的变量: [{'name': 'DTO2', 'min_value': 1.0, 'max_value': 1.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'DTO2', 'constant_value': 1.0}, {'name': 'TL_require', 'min_value': 0.0, 'max_value': 6.0, 'var_type': 'int', 'is_last': False, 'original_var': 'TL_require'}]
处理的变量: ['DTO2', 'TL_require']
预处理后的条件: TL_require == DTO2
提取的原子条件: [('TL_require', '==', 'DTO2')]
表达式结构: {}
根表达式: ATOM_0
构建的Z3表达式: 1 == TL_require
为原子条件 'TL_require == DTO2' 生成MCDC测试用例
生成的MCDC条件数量: 1
生成的MCDC条件数量: 1

处理条件 4: TL_require==GA
解析后的Python条件表达式: TL_require == GA
变量及其范围: [{'name': 'TL_require', 'min_value': 0.0, 'max_value': 6.0, 'var_type': 'int', 'is_last': False, 'original_var': 'TL_require'}, {'name': 'GA', 'min_value': 2.0, 'max_value': 2.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'GA', 'constant_value': 2.0}]
解析后的条件: TL_require == GA
识别到的变量: [{'name': 'TL_require', 'min_value': 0.0, 'max_value': 6.0, 'var_type': 'int', 'is_last': False, 'original_var': 'TL_require'}, {'name': 'GA', 'min_value': 2.0, 'max_value': 2.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'GA', 'constant_value': 2.0}]
处理的变量: ['TL_require', 'GA']
预处理后的条件: TL_require == GA
提取的原子条件: [('TL_require', '==', 'GA')]
表达式结构: {}
根表达式: ATOM_0
构建的Z3表达式: 2 == TL_require
为原子条件 'TL_require == GA' 生成MCDC测试用例
生成的MCDC条件数量: 1
生成的MCDC条件数量: 1

处理条件 5: TL_require==FLEXTO&&flex_dT_flag==1
解析后的Python条件表达式: TL_require == FLEXTO and flex_dT_flag == 1
变量及其范围: [{'name': 'FLEXTO', 'min_value': 4.0, 'max_value': 4.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'FLEXTO', 'constant_value': 4.0}, {'name': 'flex_dT_flag', 'min_value': 0.0, 'max_value': 1.0, 'var_type': 'bool', 'is_last': False, 'original_var': 'flex_dT_flag'}, {'name': 'TL_require', 'min_value': 0.0, 'max_value': 6.0, 'var_type': 'int', 'is_last': False, 'original_var': 'TL_require'}]
解析后的条件: TL_require == FLEXTO and flex_dT_flag == 1
识别到的变量: [{'name': 'FLEXTO', 'min_value': 4.0, 'max_value': 4.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'FLEXTO', 'constant_value': 4.0}, {'name': 'flex_dT_flag', 'min_value': 0.0, 'max_value': 1.0, 'var_type': 'bool', 'is_last': False, 'original_var': 'flex_dT_flag'}, {'name': 'TL_require', 'min_value': 0.0, 'max_value': 6.0, 'var_type': 'int', 'is_last': False, 'original_var': 'TL_require'}]
处理的变量: ['FLEXTO', 'flex_dT_flag', 'TL_require']
预处理后的条件: TL_require == FLEXTO and flex_dT_flag == 1
提取的原子条件: [('TL_require', '==', 'FLEXTO'), ('flex_dT_flag', '==', '1')]
表达式结构: {'AND_EXPR_0': ('and', ['ATOM_0', 'ATOM_1'])}
根表达式: AND_EXPR_0
警告: 无法解析变量 1
警告: 无法解析表达式 flex_dT_flag == 1
构建的Z3表达式: And(4 == TL_require, True)
为原子条件 'TL_require == FLEXTO' 生成MCDC测试用例
警告: 无法解析变量 1
警告: 无法解析表达式 flex_dT_flag == 1
生成的MCDC条件数量: 1
生成的MCDC条件数量: 1

处理条件 6: TL_require==Bump
解析后的Python条件表达式: TL_require == Bump
变量及其范围: [{'name': 'Bump', 'min_value': 3.0, 'max_value': 3.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'Bump', 'constant_value': 3.0}, {'name': 'TL_require', 'min_value': 0.0, 'max_value': 6.0, 'var_type': 'int', 'is_last': False, 'original_var': 'TL_require'}]
解析后的条件: TL_require == Bump
识别到的变量: [{'name': 'Bump', 'min_value': 3.0, 'max_value': 3.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'Bump', 'constant_value': 3.0}, {'name': 'TL_require', 'min_value': 0.0, 'max_value': 6.0, 'var_type': 'int', 'is_last': False, 'original_var': 'TL_require'}]
处理的变量: ['Bump', 'TL_require']
预处理后的条件: TL_require == Bump
提取的原子条件: [('TL_require', '==', 'Bump')]
表达式结构: {}
根表达式: ATOM_0
构建的Z3表达式: 3 == TL_require
为原子条件 'TL_require == Bump' 生成MCDC测试用例
生成的MCDC条件数量: 1
生成的MCDC条件数量: 1

生成的测试用例:
- 条件: TL_require!=DTO1&&TL_require!=DTO2&&TL_require!=GA&&TL_require!=Bump&&(TL_require!=FLEXTO||(TL_require==FLEXTO&&flex_dT_flag==0))
  测试用例: Bump=3.0, DTO1=0.0, DTO2=1.0, FLEXTO=4.0, GA=2.0, TL_require=4, flex_dT_flag=0.5
  预期结果: False
- 条件: TL_require!=DTO1&&TL_require!=DTO2&&TL_require!=GA&&TL_require!=Bump&&(TL_require!=FLEXTO||(TL_require==FLEXTO&&flex_dT_flag==0))
  测试用例: Bump=3.0, DTO1=0.0, DTO2=1.0, FLEXTO=4.0, GA=2.0, TL_require=0, flex_dT_flag=0.5
  预期结果: False
- 条件: TL_require!=DTO1&&TL_require!=DTO2&&TL_require!=GA&&TL_require!=Bump&&(TL_require!=FLEXTO||(TL_require==FLEXTO&&flex_dT_flag==0))
  测试用例: Bump=3.0, DTO1=0.0, DTO2=1.0, FLEXTO=4.0, GA=2.0, TL_require=4, flex_dT_flag=0.5
  预期结果: False
- 条件: TL_require!=DTO1&&TL_require!=DTO2&&TL_require!=GA&&TL_require!=Bump&&(TL_require!=FLEXTO||(TL_require==FLEXTO&&flex_dT_flag==0))
  测试用例: Bump=3.0, DTO1=0.0, DTO2=1.0, FLEXTO=4.0, GA=2.0, TL_require=1, flex_dT_flag=0.5
  预期结果: False
- 条件: TL_require!=DTO1&&TL_require!=DTO2&&TL_require!=GA&&TL_require!=Bump&&(TL_require!=FLEXTO||(TL_require==FLEXTO&&flex_dT_flag==0))
  测试用例: Bump=3.0, DTO1=0.0, DTO2=1.0, FLEXTO=4.0, GA=2.0, TL_require=4, flex_dT_flag=0.5
  预期结果: False
- 条件: TL_require!=DTO1&&TL_require!=DTO2&&TL_require!=GA&&TL_require!=Bump&&(TL_require!=FLEXTO||(TL_require==FLEXTO&&flex_dT_flag==0))
  测试用例: Bump=3.0, DTO1=0.0, DTO2=1.0, FLEXTO=4.0, GA=2.0, TL_require=2, flex_dT_flag=0.5
  预期结果: False
- 条件: TL_require!=DTO1&&TL_require!=DTO2&&TL_require!=GA&&TL_require!=Bump&&(TL_require!=FLEXTO||(TL_require==FLEXTO&&flex_dT_flag==0))
  测试用例: Bump=3.0, DTO1=0.0, DTO2=1.0, FLEXTO=4.0, GA=2.0, TL_require=4, flex_dT_flag=0.5
  预期结果: False
- 条件: TL_require!=DTO1&&TL_require!=DTO2&&TL_require!=GA&&TL_require!=Bump&&(TL_require!=FLEXTO||(TL_require==FLEXTO&&flex_dT_flag==0))
  测试用例: Bump=3.0, DTO1=0.0, DTO2=1.0, FLEXTO=4.0, GA=2.0, TL_require=3, flex_dT_flag=0.5
  预期结果: False
- 条件: TL_require!=DTO1&&TL_require!=DTO2&&TL_require!=GA&&TL_require!=Bump&&(TL_require!=FLEXTO||(TL_require==FLEXTO&&flex_dT_flag==0))
  测试用例: Bump=3.0, DTO1=0.0, DTO2=1.0, FLEXTO=4.0, GA=2.0, TL_require=4, flex_dT_flag=0.5
  预期结果: False
- 条件: TL_require!=DTO1&&TL_require!=DTO2&&TL_require!=GA&&TL_require!=Bump&&(TL_require!=FLEXTO||(TL_require==FLEXTO&&flex_dT_flag==0))
  测试用例: Bump=3.0, DTO1=0.0, DTO2=1.0, FLEXTO=4.0, GA=2.0, TL_require=2, flex_dT_flag=0.5
  预期结果: False
- 条件: TL_require==DTO1
  测试用例: DTO1=0.0, TL_require=0
  预期结果: True
- 条件: TL_require==DTO1
  测试用例: DTO1=0.0, TL_require=1
  预期结果: False
- 条件: TL_require==DTO2
  测试用例: DTO2=1.0, TL_require=1
  预期结果: True
- 条件: TL_require==DTO2
  测试用例: DTO2=1.0, TL_require=0
  预期结果: False
- 条件: TL_require==GA
  测试用例: GA=2.0, TL_require=2
  预期结果: True
- 条件: TL_require==GA
  测试用例: GA=2.0, TL_require=1
  预期结果: False
- 条件: TL_require==FLEXTO&&flex_dT_flag==1
  测试用例: FLEXTO=4.0, TL_require=4, flex_dT_flag=0.5
  预期结果: False
- 条件: TL_require==FLEXTO&&flex_dT_flag==1
  测试用例: FLEXTO=4.0, TL_require=3, flex_dT_flag=0.5
  预期结果: False
- 条件: TL_require==Bump
  测试用例: Bump=3.0, TL_require=3
  预期结果: True
- 条件: TL_require==Bump
  测试用例: Bump=3.0, TL_require=2
  预期结果: False

==================================================
处理模块: 油门杆插值目标计算-N1RDem_PLACL计算
提取到的if条件: ['TL_require!=DCL1&&TL_require!=DCL2', 'TL_require==DCL1', 'TL_require==DCL2']

处理条件 1: TL_require!=DCL1&&TL_require!=DCL2
解析后的Python条件表达式: TL_require != DCL1 and TL_require != DCL2
变量及其范围: [{'name': 'DCL1', 'min_value': 5.0, 'max_value': 5.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'DCL1', 'constant_value': 5.0}, {'name': 'TL_require', 'min_value': 0.0, 'max_value': 6.0, 'var_type': 'int', 'is_last': False, 'original_var': 'TL_require'}, {'name': 'DCL2', 'min_value': 6.0, 'max_value': 6.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'DCL2', 'constant_value': 6.0}]
解析后的条件: TL_require != DCL1 and TL_require != DCL2
识别到的变量: [{'name': 'DCL1', 'min_value': 5.0, 'max_value': 5.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'DCL1', 'constant_value': 5.0}, {'name': 'TL_require', 'min_value': 0.0, 'max_value': 6.0, 'var_type': 'int', 'is_last': False, 'original_var': 'TL_require'}, {'name': 'DCL2', 'min_value': 6.0, 'max_value': 6.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'DCL2', 'constant_value': 6.0}]
处理的变量: ['DCL1', 'TL_require', 'DCL2']
预处理后的条件: TL_require != DCL1 and TL_require != DCL2
提取的原子条件: [('TL_require', '!=', 'DCL1'), ('TL_require', '!=', 'DCL2')]
表达式结构: {'AND_EXPR_0': ('and', ['ATOM_0', 'ATOM_1'])}
根表达式: AND_EXPR_0
构建的Z3表达式: And(5 != TL_require, 6 != TL_require)
为原子条件 'TL_require != DCL1' 生成MCDC测试用例
为原子条件 'TL_require != DCL2' 生成MCDC测试用例
生成的MCDC条件数量: 2
生成的MCDC条件数量: 2

处理条件 2: TL_require==DCL1
解析后的Python条件表达式: TL_require == DCL1
变量及其范围: [{'name': 'DCL1', 'min_value': 5.0, 'max_value': 5.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'DCL1', 'constant_value': 5.0}, {'name': 'TL_require', 'min_value': 0.0, 'max_value': 6.0, 'var_type': 'int', 'is_last': False, 'original_var': 'TL_require'}]
解析后的条件: TL_require == DCL1
识别到的变量: [{'name': 'DCL1', 'min_value': 5.0, 'max_value': 5.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'DCL1', 'constant_value': 5.0}, {'name': 'TL_require', 'min_value': 0.0, 'max_value': 6.0, 'var_type': 'int', 'is_last': False, 'original_var': 'TL_require'}]
处理的变量: ['DCL1', 'TL_require']
预处理后的条件: TL_require == DCL1
提取的原子条件: [('TL_require', '==', 'DCL1')]
表达式结构: {}
根表达式: ATOM_0
构建的Z3表达式: 5 == TL_require
为原子条件 'TL_require == DCL1' 生成MCDC测试用例
生成的MCDC条件数量: 1
生成的MCDC条件数量: 1

处理条件 3: TL_require==DCL2
解析后的Python条件表达式: TL_require == DCL2
变量及其范围: [{'name': 'DCL2', 'min_value': 6.0, 'max_value': 6.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'DCL2', 'constant_value': 6.0}, {'name': 'TL_require', 'min_value': 0.0, 'max_value': 6.0, 'var_type': 'int', 'is_last': False, 'original_var': 'TL_require'}]
解析后的条件: TL_require == DCL2
识别到的变量: [{'name': 'DCL2', 'min_value': 6.0, 'max_value': 6.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'DCL2', 'constant_value': 6.0}, {'name': 'TL_require', 'min_value': 0.0, 'max_value': 6.0, 'var_type': 'int', 'is_last': False, 'original_var': 'TL_require'}]
处理的变量: ['DCL2', 'TL_require']
预处理后的条件: TL_require == DCL2
提取的原子条件: [('TL_require', '==', 'DCL2')]
表达式结构: {}
根表达式: ATOM_0
构建的Z3表达式: 6 == TL_require
为原子条件 'TL_require == DCL2' 生成MCDC测试用例
生成的MCDC条件数量: 1
生成的MCDC条件数量: 1

生成的测试用例:
- 条件: TL_require!=DCL1&&TL_require!=DCL2
  测试用例: DCL1=5.0, DCL2=6.0, TL_require=0
  预期结果: True
- 条件: TL_require!=DCL1&&TL_require!=DCL2
  测试用例: DCL1=5.0, DCL2=6.0, TL_require=5
  预期结果: False
- 条件: TL_require!=DCL1&&TL_require!=DCL2
  测试用例: DCL1=5.0, DCL2=6.0, TL_require=4
  预期结果: True
- 条件: TL_require!=DCL1&&TL_require!=DCL2
  测试用例: DCL1=5.0, DCL2=6.0, TL_require=6
  预期结果: False
- 条件: TL_require==DCL1
  测试用例: DCL1=5.0, TL_require=5
  预期结果: True
- 条件: TL_require==DCL1
  测试用例: DCL1=5.0, TL_require=4
  预期结果: False
- 条件: TL_require==DCL2
  测试用例: DCL2=6.0, TL_require=6
  预期结果: True
- 条件: TL_require==DCL2
  测试用例: DCL2=6.0, TL_require=5
  预期结果: False

==================================================
处理模块: 油门杆插值目标计算-转换点转速N1Rtr计算-慢车域实时N2R25控制目标计算
提取到的if条件: ['airdis_WOW==1&&PLA<0', 'airdis_WOW==1&&PLA>=0', 'airdis_WOW==0&&approach_air==1', 'airdis_WOW==0&&approach_air==0']

处理条件 1: airdis_WOW==1&&PLA<0
解析后的Python条件表达式: airdis_WOW == 1 and PLA < 0
变量及其范围: [{'name': 'airdis_WOW', 'min_value': 0.0, 'max_value': 1.0, 'var_type': 'bool', 'is_last': False, 'original_var': 'airdis_WOW'}, {'name': 'PLA', 'min_value': -33.0, 'max_value': 85.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PLA'}]
解析后的条件: airdis_WOW == 1 and PLA < 0
识别到的变量: [{'name': 'airdis_WOW', 'min_value': 0.0, 'max_value': 1.0, 'var_type': 'bool', 'is_last': False, 'original_var': 'airdis_WOW'}, {'name': 'PLA', 'min_value': -33.0, 'max_value': 85.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PLA'}]
处理的变量: ['airdis_WOW', 'PLA']
预处理后的条件: airdis_WOW == 1 and PLA < 0
提取的原子条件: [('airdis_WOW', '==', '1'), ('PLA', '<', '0')]
表达式结构: {'AND_EXPR_0': ('and', ['ATOM_0', 'ATOM_1'])}
根表达式: AND_EXPR_0
警告: 无法解析变量 1
警告: 无法解析表达式 airdis_WOW == 1
警告: 无法解析变量 0
警告: 无法解析表达式 PLA < 0
构建的Z3表达式: And(True, True)
警告: 无法解析变量 1
警告: 无法解析表达式 airdis_WOW == 1
警告: 无法解析变量 0
警告: 无法解析表达式 PLA < 0
生成的MCDC条件数量: 0
生成的MCDC条件数量: 0

处理条件 2: airdis_WOW==1&&PLA>=0
解析后的Python条件表达式: airdis_WOW == 1 and PLA >= 0
变量及其范围: [{'name': 'airdis_WOW', 'min_value': 0.0, 'max_value': 1.0, 'var_type': 'bool', 'is_last': False, 'original_var': 'airdis_WOW'}, {'name': 'PLA', 'min_value': -33.0, 'max_value': 85.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PLA'}]
解析后的条件: airdis_WOW == 1 and PLA >= 0
识别到的变量: [{'name': 'airdis_WOW', 'min_value': 0.0, 'max_value': 1.0, 'var_type': 'bool', 'is_last': False, 'original_var': 'airdis_WOW'}, {'name': 'PLA', 'min_value': -33.0, 'max_value': 85.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PLA'}]
处理的变量: ['airdis_WOW', 'PLA']
预处理后的条件: airdis_WOW == 1 and PLA >= 0
提取的原子条件: [('airdis_WOW', '==', '1'), ('PLA', '>=', '0')]
表达式结构: {'AND_EXPR_0': ('and', ['ATOM_0', 'ATOM_1'])}
根表达式: AND_EXPR_0
警告: 无法解析变量 1
警告: 无法解析表达式 airdis_WOW == 1
警告: 无法解析变量 0
警告: 无法解析表达式 PLA >= 0
构建的Z3表达式: And(True, True)
警告: 无法解析变量 1
警告: 无法解析表达式 airdis_WOW == 1
警告: 无法解析变量 0
警告: 无法解析表达式 PLA >= 0
生成的MCDC条件数量: 0
生成的MCDC条件数量: 0

处理条件 3: airdis_WOW==0&&approach_air==1
解析后的Python条件表达式: airdis_WOW == 0 and approach_air == 1
变量及其范围: [{'name': 'airdis_WOW', 'min_value': 0.0, 'max_value': 1.0, 'var_type': 'bool', 'is_last': False, 'original_var': 'airdis_WOW'}, {'name': 'approach_air', 'min_value': 0.0, 'max_value': 1.0, 'var_type': 'bool', 'is_last': False, 'original_var': 'approach_air'}]
解析后的条件: airdis_WOW == 0 and approach_air == 1
识别到的变量: [{'name': 'airdis_WOW', 'min_value': 0.0, 'max_value': 1.0, 'var_type': 'bool', 'is_last': False, 'original_var': 'airdis_WOW'}, {'name': 'approach_air', 'min_value': 0.0, 'max_value': 1.0, 'var_type': 'bool', 'is_last': False, 'original_var': 'approach_air'}]
处理的变量: ['airdis_WOW', 'approach_air']
预处理后的条件: airdis_WOW == 0 and approach_air == 1
提取的原子条件: [('airdis_WOW', '==', '0'), ('approach_air', '==', '1')]
表达式结构: {'AND_EXPR_0': ('and', ['ATOM_0', 'ATOM_1'])}
根表达式: AND_EXPR_0
警告: 无法解析变量 0
警告: 无法解析表达式 airdis_WOW == 0
警告: 无法解析变量 1
警告: 无法解析表达式 approach_air == 1
构建的Z3表达式: And(True, True)
警告: 无法解析变量 0
警告: 无法解析表达式 airdis_WOW == 0
警告: 无法解析变量 1
警告: 无法解析表达式 approach_air == 1
生成的MCDC条件数量: 0
生成的MCDC条件数量: 0

处理条件 4: airdis_WOW==0&&approach_air==0
解析后的Python条件表达式: airdis_WOW == 0 and approach_air == 0
变量及其范围: [{'name': 'airdis_WOW', 'min_value': 0.0, 'max_value': 1.0, 'var_type': 'bool', 'is_last': False, 'original_var': 'airdis_WOW'}, {'name': 'approach_air', 'min_value': 0.0, 'max_value': 1.0, 'var_type': 'bool', 'is_last': False, 'original_var': 'approach_air'}]
解析后的条件: airdis_WOW == 0 and approach_air == 0
识别到的变量: [{'name': 'airdis_WOW', 'min_value': 0.0, 'max_value': 1.0, 'var_type': 'bool', 'is_last': False, 'original_var': 'airdis_WOW'}, {'name': 'approach_air', 'min_value': 0.0, 'max_value': 1.0, 'var_type': 'bool', 'is_last': False, 'original_var': 'approach_air'}]
处理的变量: ['airdis_WOW', 'approach_air']
预处理后的条件: airdis_WOW == 0 and approach_air == 0
提取的原子条件: [('airdis_WOW', '==', '0'), ('approach_air', '==', '0')]
表达式结构: {'AND_EXPR_0': ('and', ['ATOM_0', 'ATOM_1'])}
根表达式: AND_EXPR_0
警告: 无法解析变量 0
警告: 无法解析表达式 airdis_WOW == 0
警告: 无法解析变量 0
警告: 无法解析表达式 approach_air == 0
构建的Z3表达式: And(True, True)
警告: 无法解析变量 0
警告: 无法解析表达式 airdis_WOW == 0
警告: 无法解析变量 0
警告: 无法解析表达式 approach_air == 0
生成的MCDC条件数量: 0
生成的MCDC条件数量: 0

==================================================
处理模块: 油门杆插值目标计算-转换点转速N1Rtr计算-高低压换算转速
模块中没有if语句，跳过

==================================================
处理模块: 油门杆插值目标计算-转换点转速N1Rtr计算-N1r-PLAIdle
提取到的if条件: ['N1r>N1RDem_PLAIdle']

处理条件 1: N1r>N1RDem_PLAIdle
解析后的Python条件表达式: N1r > N1RDem_PLAIdle
变量及其范围: [{'name': 'N1RDem_PLAIdle', 'min_value': -30000.0, 'max_value': 30000.0, 'var_type': 'float', 'is_last': False, 'original_var': 'N1RDem_PLAIdle'}, {'name': 'N1r', 'min_value': 0.0, 'max_value': 6000.0, 'var_type': 'float', 'is_last': False, 'original_var': 'N1r'}]
解析后的条件: N1r > N1RDem_PLAIdle
识别到的变量: [{'name': 'N1RDem_PLAIdle', 'min_value': -30000.0, 'max_value': 30000.0, 'var_type': 'float', 'is_last': False, 'original_var': 'N1RDem_PLAIdle'}, {'name': 'N1r', 'min_value': 0.0, 'max_value': 6000.0, 'var_type': 'float', 'is_last': False, 'original_var': 'N1r'}]
处理的变量: ['N1RDem_PLAIdle', 'N1r']
预处理后的条件: N1r > N1RDem_PLAIdle
提取的原子条件: [('N1r', '>', 'N1RDem_PLAIdle')]
表达式结构: {}
根表达式: ATOM_0
构建的Z3表达式: N1r > N1RDem_PLAIdle
为原子条件 'N1r > N1RDem_PLAIdle' 生成MCDC测试用例
生成的MCDC条件数量: 1
生成的MCDC条件数量: 1

生成的测试用例:
- 条件: N1r>N1RDem_PLAIdle
  测试用例: N1RDem_PLAIdle=-1.0, N1r=0.0
  预期结果: True
- 条件: N1r>N1RDem_PLAIdle
  测试用例: N1RDem_PLAIdle=0.0, N1r=0.0
  预期结果: False

==================================================
处理模块: 油门杆插值目标计算-转换点转速N1Rtr计算-MCR
提取到的if条件: ['N2R25Dem_PLAIdle==N2R25Dem_GI||N2R25Dem_PLAIdle==N2R25Dem_FI||N2R25Dem_PLAIdle==N2R25Dem_AI&&(N1Rtr>N1RDem_MCR)']

处理条件 1: N2R25Dem_PLAIdle==N2R25Dem_GI||N2R25Dem_PLAIdle==N2R25Dem_FI||N2R25Dem_PLAIdle==N2R25Dem_AI&&(N1Rtr>N1RDem_MCR)
解析后的Python条件表达式: N2R25Dem_PLAIdle == N2R25Dem_GI or N2R25Dem_PLAIdle == N2R25Dem_FI or N2R25Dem_PLAIdle == N2R25Dem_AI and (N1Rtr > N1RDem_MCR)
变量及其范围: [{'name': 'N1RDem_MCR', 'min_value': -30000.0, 'max_value': 30000.0, 'var_type': 'float', 'is_last': False, 'original_var': 'N1RDem_MCR'}, {'name': 'N2R25Dem_PLAIdle', 'min_value': 0.0, 'max_value': 20000.0, 'var_type': 'float', 'is_last': False, 'original_var': 'N2R25Dem_PLAIdle'}, {'name': 'N2R25Dem_AI', 'min_value': 0.0, 'max_value': 20000.0, 'var_type': 'float', 'is_last': False, 'original_var': 'N2R25Dem_AI'}, {'name': 'N2R25Dem_GI', 'min_value': 0.0, 'max_value': 20000.0, 'var_type': 'float', 'is_last': False, 'original_var': 'N2R25Dem_GI'}, {'name': 'N1Rtr', 'min_value': -30000.0, 'max_value': 30000.0, 'var_type': 'float', 'is_last': False, 'original_var': 'N1Rtr'}, {'name': 'N2R25Dem_FI', 'min_value': 0.0, 'max_value': 20000.0, 'var_type': 'float', 'is_last': False, 'original_var': 'N2R25Dem_FI'}]
解析后的条件: N2R25Dem_PLAIdle == N2R25Dem_GI or N2R25Dem_PLAIdle == N2R25Dem_FI or N2R25Dem_PLAIdle == N2R25Dem_AI and (N1Rtr > N1RDem_MCR)
识别到的变量: [{'name': 'N1RDem_MCR', 'min_value': -30000.0, 'max_value': 30000.0, 'var_type': 'float', 'is_last': False, 'original_var': 'N1RDem_MCR'}, {'name': 'N2R25Dem_PLAIdle', 'min_value': 0.0, 'max_value': 20000.0, 'var_type': 'float', 'is_last': False, 'original_var': 'N2R25Dem_PLAIdle'}, {'name': 'N2R25Dem_AI', 'min_value': 0.0, 'max_value': 20000.0, 'var_type': 'float', 'is_last': False, 'original_var': 'N2R25Dem_AI'}, {'name': 'N2R25Dem_GI', 'min_value': 0.0, 'max_value': 20000.0, 'var_type': 'float', 'is_last': False, 'original_var': 'N2R25Dem_GI'}, {'name': 'N1Rtr', 'min_value': -30000.0, 'max_value': 30000.0, 'var_type': 'float', 'is_last': False, 'original_var': 'N1Rtr'}, {'name': 'N2R25Dem_FI', 'min_value': 0.0, 'max_value': 20000.0, 'var_type': 'float', 'is_last': False, 'original_var': 'N2R25Dem_FI'}]
处理的变量: ['N1RDem_MCR', 'N2R25Dem_PLAIdle', 'N2R25Dem_AI', 'N2R25Dem_GI', 'N1Rtr', 'N2R25Dem_FI']
预处理后的条件: N2R25Dem_PLAIdle == N2R25Dem_GI or N2R25Dem_PLAIdle == N2R25Dem_FI or N2R25Dem_PLAIdle == N2R25Dem_AI and (N1Rtr > N1RDem_MCR)
提取的原子条件: [('N2R25Dem_PLAIdle', '==', 'N2R25Dem_GI'), ('N2R25Dem_PLAIdle', '==', 'N2R25Dem_FI'), ('N2R25Dem_PLAIdle', '==', 'N2R25Dem_AI'), ('N1Rtr', '>', 'N1RDem_MCR')]
表达式结构: {'AND_EXPR_1': ('and', ['ATOM_2', 'ATOM_3']), 'OR_EXPR_0': ('or', ['ATOM_0', 'ATOM_1', 'AND_EXPR_1'])}
根表达式: OR_EXPR_0
构建的Z3表达式: Or(N2R25Dem_PLAIdle == N2R25Dem_GI,
   N2R25Dem_PLAIdle == N2R25Dem_FI,
   And(N2R25Dem_PLAIdle == N2R25Dem_AI, N1Rtr > N1RDem_MCR))
为原子条件 'N2R25Dem_PLAIdle == N2R25Dem_GI' 生成MCDC测试用例
为原子条件 'N2R25Dem_PLAIdle == N2R25Dem_FI' 生成MCDC测试用例
为原子条件 'N2R25Dem_PLAIdle == N2R25Dem_AI' 生成MCDC测试用例
为原子条件 'N1Rtr > N1RDem_MCR' 生成MCDC测试用例
生成的MCDC条件数量: 4
生成的MCDC条件数量: 4

生成的测试用例:
- 条件: N2R25Dem_PLAIdle==N2R25Dem_GI||N2R25Dem_PLAIdle==N2R25Dem_FI||N2R25Dem_PLAIdle==N2R25Dem_AI&&(N1Rtr>N1RDem_MCR)
  测试用例: N1RDem_MCR=0.0, N1Rtr=0.0, N2R25Dem_AI=0.0, N2R25Dem_FI=0.0, N2R25Dem_GI=0.0, N2R25Dem_PLAIdle=0.0
  预期结果: True
- 条件: N2R25Dem_PLAIdle==N2R25Dem_GI||N2R25Dem_PLAIdle==N2R25Dem_FI||N2R25Dem_PLAIdle==N2R25Dem_AI&&(N1Rtr>N1RDem_MCR)
  测试用例: N1RDem_MCR=0.0, N1Rtr=0.0, N2R25Dem_AI=0.0, N2R25Dem_FI=0.5, N2R25Dem_GI=0.0, N2R25Dem_PLAIdle=0.25
  预期结果: False
- 条件: N2R25Dem_PLAIdle==N2R25Dem_GI||N2R25Dem_PLAIdle==N2R25Dem_FI||N2R25Dem_PLAIdle==N2R25Dem_AI&&(N1Rtr>N1RDem_MCR)
  测试用例: N1RDem_MCR=0.0, N1Rtr=0.0, N2R25Dem_AI=0.0, N2R25Dem_FI=0.5, N2R25Dem_GI=0.0, N2R25Dem_PLAIdle=0.5
  预期结果: True
- 条件: N2R25Dem_PLAIdle==N2R25Dem_GI||N2R25Dem_PLAIdle==N2R25Dem_FI||N2R25Dem_PLAIdle==N2R25Dem_AI&&(N1Rtr>N1RDem_MCR)
  测试用例: N1RDem_MCR=0.0, N1Rtr=0.0, N2R25Dem_AI=0.0, N2R25Dem_FI=0.5, N2R25Dem_GI=0.0, N2R25Dem_PLAIdle=0.25
  预期结果: False
- 条件: N2R25Dem_PLAIdle==N2R25Dem_GI||N2R25Dem_PLAIdle==N2R25Dem_FI||N2R25Dem_PLAIdle==N2R25Dem_AI&&(N1Rtr>N1RDem_MCR)
  测试用例: N1RDem_MCR=-0.25, N1Rtr=0.0, N2R25Dem_AI=0.25, N2R25Dem_FI=0.5, N2R25Dem_GI=0.0, N2R25Dem_PLAIdle=0.25
  预期结果: True
- 条件: N2R25Dem_PLAIdle==N2R25Dem_GI||N2R25Dem_PLAIdle==N2R25Dem_FI||N2R25Dem_PLAIdle==N2R25Dem_AI&&(N1Rtr>N1RDem_MCR)
  测试用例: N1RDem_MCR=-0.25, N1Rtr=0.0, N2R25Dem_AI=0.0, N2R25Dem_FI=0.5, N2R25Dem_GI=0.0, N2R25Dem_PLAIdle=0.25
  预期结果: False
- 条件: N2R25Dem_PLAIdle==N2R25Dem_GI||N2R25Dem_PLAIdle==N2R25Dem_FI||N2R25Dem_PLAIdle==N2R25Dem_AI&&(N1Rtr>N1RDem_MCR)
  测试用例: N1RDem_MCR=-0.25, N1Rtr=0.0, N2R25Dem_AI=0.0, N2R25Dem_FI=0.5, N2R25Dem_GI=0.25, N2R25Dem_PLAIdle=0.25
  预期结果: True
- 条件: N2R25Dem_PLAIdle==N2R25Dem_GI||N2R25Dem_PLAIdle==N2R25Dem_FI||N2R25Dem_PLAIdle==N2R25Dem_AI&&(N1Rtr>N1RDem_MCR)
  测试用例: N1RDem_MCR=-0.25, N1Rtr=-0.25, N2R25Dem_AI=0.0, N2R25Dem_FI=0.5, N2R25Dem_GI=0.0, N2R25Dem_PLAIdle=0.25
  预期结果: False

==================================================
处理模块: 油门杆插值目标计算-转换点转速N1Rtr计算-MREV
提取到的if条件: ['N2R25Dem_PLAIdle==N2R25Dem_RI&&N1Rtr>N1RDem_MREV']

处理条件 1: N2R25Dem_PLAIdle==N2R25Dem_RI&&N1Rtr>N1RDem_MREV
解析后的Python条件表达式: N2R25Dem_PLAIdle == N2R25Dem_RI and N1Rtr > N1RDem_MREV
变量及其范围: [{'name': 'N1Rtr', 'min_value': -30000.0, 'max_value': 30000.0, 'var_type': 'float', 'is_last': False, 'original_var': 'N1Rtr'}, {'name': 'N2R25Dem_PLAIdle', 'min_value': 0.0, 'max_value': 20000.0, 'var_type': 'float', 'is_last': False, 'original_var': 'N2R25Dem_PLAIdle'}, {'name': 'N2R25Dem_RI', 'min_value': 0.0, 'max_value': 20000.0, 'var_type': 'float', 'is_last': False, 'original_var': 'N2R25Dem_RI'}, {'name': 'N1RDem_MREV', 'min_value': -30000.0, 'max_value': 30000.0, 'var_type': 'float', 'is_last': False, 'original_var': 'N1RDem_MREV'}]
解析后的条件: N2R25Dem_PLAIdle == N2R25Dem_RI and N1Rtr > N1RDem_MREV
识别到的变量: [{'name': 'N1Rtr', 'min_value': -30000.0, 'max_value': 30000.0, 'var_type': 'float', 'is_last': False, 'original_var': 'N1Rtr'}, {'name': 'N2R25Dem_PLAIdle', 'min_value': 0.0, 'max_value': 20000.0, 'var_type': 'float', 'is_last': False, 'original_var': 'N2R25Dem_PLAIdle'}, {'name': 'N2R25Dem_RI', 'min_value': 0.0, 'max_value': 20000.0, 'var_type': 'float', 'is_last': False, 'original_var': 'N2R25Dem_RI'}, {'name': 'N1RDem_MREV', 'min_value': -30000.0, 'max_value': 30000.0, 'var_type': 'float', 'is_last': False, 'original_var': 'N1RDem_MREV'}]
处理的变量: ['N1Rtr', 'N2R25Dem_PLAIdle', 'N2R25Dem_RI', 'N1RDem_MREV']
预处理后的条件: N2R25Dem_PLAIdle == N2R25Dem_RI and N1Rtr > N1RDem_MREV
提取的原子条件: [('N2R25Dem_PLAIdle', '==', 'N2R25Dem_RI'), ('N1Rtr', '>', 'N1RDem_MREV')]
表达式结构: {'AND_EXPR_0': ('and', ['ATOM_0', 'ATOM_1'])}
根表达式: AND_EXPR_0
构建的Z3表达式: And(N2R25Dem_PLAIdle == N2R25Dem_RI, N1Rtr > N1RDem_MREV)
为原子条件 'N2R25Dem_PLAIdle == N2R25Dem_RI' 生成MCDC测试用例
为原子条件 'N1Rtr > N1RDem_MREV' 生成MCDC测试用例
生成的MCDC条件数量: 2
生成的MCDC条件数量: 2

生成的测试用例:
- 条件: N2R25Dem_PLAIdle==N2R25Dem_RI&&N1Rtr>N1RDem_MREV
  测试用例: N1RDem_MREV=0.0, N1Rtr=0.5, N2R25Dem_PLAIdle=0.0, N2R25Dem_RI=0.0
  预期结果: True
- 条件: N2R25Dem_PLAIdle==N2R25Dem_RI&&N1Rtr>N1RDem_MREV
  测试用例: N1RDem_MREV=0.0, N1Rtr=0.5, N2R25Dem_PLAIdle=0.0, N2R25Dem_RI=0.5
  预期结果: False
- 条件: N2R25Dem_PLAIdle==N2R25Dem_RI&&N1Rtr>N1RDem_MREV
  测试用例: N1RDem_MREV=0.0, N1Rtr=0.5, N2R25Dem_PLAIdle=0.5, N2R25Dem_RI=0.5
  预期结果: True
- 条件: N2R25Dem_PLAIdle==N2R25Dem_RI&&N1Rtr>N1RDem_MREV
  测试用例: N1RDem_MREV=0.0, N1Rtr=0.0, N2R25Dem_PLAIdle=0.5, N2R25Dem_RI=0.5
  预期结果: False

==================================================
处理模块: 油门杆插值目标计算-准最大推力
模块中没有if语句，跳过

==================================================
处理模块: 油门杆插值目标计算-起飞（TO）
模块中没有if语句，跳过

==================================================
处理模块: 油门杆插值目标计算-连续（CT）
模块中没有if语句，跳过

==================================================
处理模块: 油门杆插值目标计算-爬升（CL）
模块中没有if语句，跳过

==================================================
处理模块: 油门杆插值目标计算-巡航（CR）
模块中没有if语句，跳过

==================================================
处理模块: 油门杆插值目标计算-反推（REV）
模块中没有if语句，跳过

==================================================
处理模块: 油门杆插值目标计算-N1RDem_BAK计算
模块中没有if语句，跳过

==================================================
处理模块: N1R指示量N1RDemInd计算（最大反推）
提取到的if条件: ['thrust_level == level_MREV']

处理条件 1: thrust_level == level_MREV
解析后的Python条件表达式: thrust_level == level_MREV
变量及其范围: [{'name': 'thrust_level', 'min_value': 0.0, 'max_value': 23.0, 'var_type': 'int', 'is_last': False, 'original_var': 'thrust_level'}, {'name': 'level_MREV', 'min_value': 1.0, 'max_value': 1.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_MREV', 'constant_value': 1.0}]
解析后的条件: thrust_level == level_MREV
识别到的变量: [{'name': 'thrust_level', 'min_value': 0.0, 'max_value': 23.0, 'var_type': 'int', 'is_last': False, 'original_var': 'thrust_level'}, {'name': 'level_MREV', 'min_value': 1.0, 'max_value': 1.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_MREV', 'constant_value': 1.0}]
处理的变量: ['thrust_level', 'level_MREV']
预处理后的条件: thrust_level == level_MREV
提取的原子条件: [('thrust_level', '==', 'level_MREV')]
表达式结构: {}
根表达式: ATOM_0
构建的Z3表达式: 1 == thrust_level
为原子条件 'thrust_level == level_MREV' 生成MCDC测试用例
生成的MCDC条件数量: 1
生成的MCDC条件数量: 1

生成的测试用例:
- 条件: thrust_level == level_MREV
  测试用例: level_MREV=1.0, thrust_level=1
  预期结果: True
- 条件: thrust_level == level_MREV
  测试用例: level_MREV=1.0, thrust_level=0
  预期结果: False

==================================================
处理模块: N1R指示量N1RDemInd计算（反推）
提取到的if条件: ['thrust_level == level_REV']

处理条件 1: thrust_level == level_REV
解析后的Python条件表达式: thrust_level == level_REV
变量及其范围: [{'name': 'level_REV', 'min_value': 2.0, 'max_value': 2.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_REV', 'constant_value': 2.0}, {'name': 'thrust_level', 'min_value': 0.0, 'max_value': 23.0, 'var_type': 'int', 'is_last': False, 'original_var': 'thrust_level'}]
解析后的条件: thrust_level == level_REV
识别到的变量: [{'name': 'level_REV', 'min_value': 2.0, 'max_value': 2.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_REV', 'constant_value': 2.0}, {'name': 'thrust_level', 'min_value': 0.0, 'max_value': 23.0, 'var_type': 'int', 'is_last': False, 'original_var': 'thrust_level'}]
处理的变量: ['level_REV', 'thrust_level']
预处理后的条件: thrust_level == level_REV
提取的原子条件: [('thrust_level', '==', 'level_REV')]
表达式结构: {}
根表达式: ATOM_0
构建的Z3表达式: 2 == thrust_level
为原子条件 'thrust_level == level_REV' 生成MCDC测试用例
生成的MCDC条件数量: 1
生成的MCDC条件数量: 1

生成的测试用例:
- 条件: thrust_level == level_REV
  测试用例: level_REV=2.0, thrust_level=2
  预期结果: True
- 条件: thrust_level == level_REV
  测试用例: level_REV=2.0, thrust_level=1
  预期结果: False

==================================================
处理模块: N1R指示量N1RDemInd计算（反推慢车、地面慢车、空中慢车、进近慢车）
提取到的if条件: ['thrust_level == level_RI || thrust_level == level_GI || thrust_level == level_FI || thrust_level == level_AI']

处理条件 1: thrust_level == level_RI || thrust_level == level_GI || thrust_level == level_FI || thrust_level == level_AI
解析后的Python条件表达式: thrust_level == level_RI or thrust_level == level_GI or thrust_level == level_FI or thrust_level == level_AI
变量及其范围: [{'name': 'level_AI', 'min_value': 6.0, 'max_value': 6.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_AI', 'constant_value': 6.0}, {'name': 'thrust_level', 'min_value': 0.0, 'max_value': 23.0, 'var_type': 'int', 'is_last': False, 'original_var': 'thrust_level'}, {'name': 'level_RI', 'min_value': 3.0, 'max_value': 3.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_RI', 'constant_value': 3.0}, {'name': 'level_GI', 'min_value': 4.0, 'max_value': 4.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_GI', 'constant_value': 4.0}, {'name': 'level_FI', 'min_value': 5.0, 'max_value': 5.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_FI', 'constant_value': 5.0}]
解析后的条件: thrust_level == level_RI or thrust_level == level_GI or thrust_level == level_FI or thrust_level == level_AI
识别到的变量: [{'name': 'level_AI', 'min_value': 6.0, 'max_value': 6.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_AI', 'constant_value': 6.0}, {'name': 'thrust_level', 'min_value': 0.0, 'max_value': 23.0, 'var_type': 'int', 'is_last': False, 'original_var': 'thrust_level'}, {'name': 'level_RI', 'min_value': 3.0, 'max_value': 3.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_RI', 'constant_value': 3.0}, {'name': 'level_GI', 'min_value': 4.0, 'max_value': 4.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_GI', 'constant_value': 4.0}, {'name': 'level_FI', 'min_value': 5.0, 'max_value': 5.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_FI', 'constant_value': 5.0}]
处理的变量: ['level_AI', 'thrust_level', 'level_RI', 'level_GI', 'level_FI']
预处理后的条件: thrust_level == level_RI or thrust_level == level_GI or thrust_level == level_FI or thrust_level == level_AI
提取的原子条件: [('thrust_level', '==', 'level_RI'), ('thrust_level', '==', 'level_GI'), ('thrust_level', '==', 'level_FI'), ('thrust_level', '==', 'level_AI')]
表达式结构: {'OR_EXPR_0': ('or', ['ATOM_0', 'ATOM_1', 'ATOM_2', 'ATOM_3'])}
根表达式: OR_EXPR_0
构建的Z3表达式: Or(3 == thrust_level,
   4 == thrust_level,
   5 == thrust_level,
   6 == thrust_level)
为原子条件 'thrust_level == level_RI' 生成MCDC测试用例
为原子条件 'thrust_level == level_GI' 生成MCDC测试用例
为原子条件 'thrust_level == level_FI' 生成MCDC测试用例
为原子条件 'thrust_level == level_AI' 生成MCDC测试用例
生成的MCDC条件数量: 4
生成的MCDC条件数量: 4

生成的测试用例:
- 条件: thrust_level == level_RI || thrust_level == level_GI || thrust_level == level_FI || thrust_level == level_AI
  测试用例: level_AI=6.0, level_FI=5.0, level_GI=4.0, level_RI=3.0, thrust_level=3
  预期结果: True
- 条件: thrust_level == level_RI || thrust_level == level_GI || thrust_level == level_FI || thrust_level == level_AI
  测试用例: level_AI=6.0, level_FI=5.0, level_GI=4.0, level_RI=3.0, thrust_level=2
  预期结果: False
- 条件: thrust_level == level_RI || thrust_level == level_GI || thrust_level == level_FI || thrust_level == level_AI
  测试用例: level_AI=6.0, level_FI=5.0, level_GI=4.0, level_RI=3.0, thrust_level=4
  预期结果: True
- 条件: thrust_level == level_RI || thrust_level == level_GI || thrust_level == level_FI || thrust_level == level_AI
  测试用例: level_AI=6.0, level_FI=5.0, level_GI=4.0, level_RI=3.0, thrust_level=2
  预期结果: False
- 条件: thrust_level == level_RI || thrust_level == level_GI || thrust_level == level_FI || thrust_level == level_AI
  测试用例: level_AI=6.0, level_FI=5.0, level_GI=4.0, level_RI=3.0, thrust_level=5
  预期结果: True
- 条件: thrust_level == level_RI || thrust_level == level_GI || thrust_level == level_FI || thrust_level == level_AI
  测试用例: level_AI=6.0, level_FI=5.0, level_GI=4.0, level_RI=3.0, thrust_level=2
  预期结果: False
- 条件: thrust_level == level_RI || thrust_level == level_GI || thrust_level == level_FI || thrust_level == level_AI
  测试用例: level_AI=6.0, level_FI=5.0, level_GI=4.0, level_RI=3.0, thrust_level=6
  预期结果: True
- 条件: thrust_level == level_RI || thrust_level == level_GI || thrust_level == level_FI || thrust_level == level_AI
  测试用例: level_AI=6.0, level_FI=5.0, level_GI=4.0, level_RI=3.0, thrust_level=2
  预期结果: False

==================================================
处理模块: N1R指示量N1RDemInd计算（巡航）
提取到的if条件: ['thrust_level == level_CR']

处理条件 1: thrust_level == level_CR
解析后的Python条件表达式: thrust_level == level_CR
变量及其范围: [{'name': 'thrust_level', 'min_value': 0.0, 'max_value': 23.0, 'var_type': 'int', 'is_last': False, 'original_var': 'thrust_level'}, {'name': 'level_CR', 'min_value': 7.0, 'max_value': 7.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_CR', 'constant_value': 7.0}]
解析后的条件: thrust_level == level_CR
识别到的变量: [{'name': 'thrust_level', 'min_value': 0.0, 'max_value': 23.0, 'var_type': 'int', 'is_last': False, 'original_var': 'thrust_level'}, {'name': 'level_CR', 'min_value': 7.0, 'max_value': 7.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_CR', 'constant_value': 7.0}]
处理的变量: ['thrust_level', 'level_CR']
预处理后的条件: thrust_level == level_CR
提取的原子条件: [('thrust_level', '==', 'level_CR')]
表达式结构: {}
根表达式: ATOM_0
构建的Z3表达式: 7 == thrust_level
为原子条件 'thrust_level == level_CR' 生成MCDC测试用例
生成的MCDC条件数量: 1
生成的MCDC条件数量: 1

生成的测试用例:
- 条件: thrust_level == level_CR
  测试用例: level_CR=7.0, thrust_level=7
  预期结果: True
- 条件: thrust_level == level_CR
  测试用例: level_CR=7.0, thrust_level=6
  预期结果: False

==================================================
处理模块: N1R指示量N1RDemInd计算（最大巡航）
提取到的if条件: ['thrust_level == level_MCR']

处理条件 1: thrust_level == level_MCR
解析后的Python条件表达式: thrust_level == level_MCR
变量及其范围: [{'name': 'level_MCR', 'min_value': 8.0, 'max_value': 8.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_MCR', 'constant_value': 8.0}, {'name': 'thrust_level', 'min_value': 0.0, 'max_value': 23.0, 'var_type': 'int', 'is_last': False, 'original_var': 'thrust_level'}]
解析后的条件: thrust_level == level_MCR
识别到的变量: [{'name': 'level_MCR', 'min_value': 8.0, 'max_value': 8.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_MCR', 'constant_value': 8.0}, {'name': 'thrust_level', 'min_value': 0.0, 'max_value': 23.0, 'var_type': 'int', 'is_last': False, 'original_var': 'thrust_level'}]
处理的变量: ['level_MCR', 'thrust_level']
预处理后的条件: thrust_level == level_MCR
提取的原子条件: [('thrust_level', '==', 'level_MCR')]
表达式结构: {}
根表达式: ATOM_0
构建的Z3表达式: 8 == thrust_level
为原子条件 'thrust_level == level_MCR' 生成MCDC测试用例
生成的MCDC条件数量: 1
生成的MCDC条件数量: 1

生成的测试用例:
- 条件: thrust_level == level_MCR
  测试用例: level_MCR=8.0, thrust_level=8
  预期结果: True
- 条件: thrust_level == level_MCR
  测试用例: level_MCR=8.0, thrust_level=7
  预期结果: False

==================================================
处理模块: N1R指示量N1RDemInd计算（爬升）
提取到的if条件: ['thrust_level == level_CL']

处理条件 1: thrust_level == level_CL
解析后的Python条件表达式: thrust_level == level_CL
变量及其范围: [{'name': 'level_CL', 'min_value': 9.0, 'max_value': 9.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_CL', 'constant_value': 9.0}, {'name': 'thrust_level', 'min_value': 0.0, 'max_value': 23.0, 'var_type': 'int', 'is_last': False, 'original_var': 'thrust_level'}]
解析后的条件: thrust_level == level_CL
识别到的变量: [{'name': 'level_CL', 'min_value': 9.0, 'max_value': 9.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_CL', 'constant_value': 9.0}, {'name': 'thrust_level', 'min_value': 0.0, 'max_value': 23.0, 'var_type': 'int', 'is_last': False, 'original_var': 'thrust_level'}]
处理的变量: ['level_CL', 'thrust_level']
预处理后的条件: thrust_level == level_CL
提取的原子条件: [('thrust_level', '==', 'level_CL')]
表达式结构: {}
根表达式: ATOM_0
构建的Z3表达式: 9 == thrust_level
为原子条件 'thrust_level == level_CL' 生成MCDC测试用例
生成的MCDC条件数量: 1
生成的MCDC条件数量: 1

生成的测试用例:
- 条件: thrust_level == level_CL
  测试用例: level_CL=9.0, thrust_level=9
  预期结果: True
- 条件: thrust_level == level_CL
  测试用例: level_CL=9.0, thrust_level=8
  预期结果: False

==================================================
处理模块: N1R指示量N1RDemInd计算（最大爬升）
提取到的if条件: ['thrust_level == level_MCL']

处理条件 1: thrust_level == level_MCL
解析后的Python条件表达式: thrust_level == level_MCL
变量及其范围: [{'name': 'level_MCL', 'min_value': 10.0, 'max_value': 10.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_MCL', 'constant_value': 10.0}, {'name': 'thrust_level', 'min_value': 0.0, 'max_value': 23.0, 'var_type': 'int', 'is_last': False, 'original_var': 'thrust_level'}]
解析后的条件: thrust_level == level_MCL
识别到的变量: [{'name': 'level_MCL', 'min_value': 10.0, 'max_value': 10.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_MCL', 'constant_value': 10.0}, {'name': 'thrust_level', 'min_value': 0.0, 'max_value': 23.0, 'var_type': 'int', 'is_last': False, 'original_var': 'thrust_level'}]
处理的变量: ['level_MCL', 'thrust_level']
预处理后的条件: thrust_level == level_MCL
提取的原子条件: [('thrust_level', '==', 'level_MCL')]
表达式结构: {}
根表达式: ATOM_0
构建的Z3表达式: 10 == thrust_level
为原子条件 'thrust_level == level_MCL' 生成MCDC测试用例
生成的MCDC条件数量: 1
生成的MCDC条件数量: 1

生成的测试用例:
- 条件: thrust_level == level_MCL
  测试用例: level_MCL=10.0, thrust_level=10
  预期结果: True
- 条件: thrust_level == level_MCL
  测试用例: level_MCL=10.0, thrust_level=9
  预期结果: False

==================================================
处理模块: N1R指示量N1RDemInd计算（减推力爬升1）
提取到的if条件: ['thrust_level == level_DCL1']

处理条件 1: thrust_level == level_DCL1
解析后的Python条件表达式: thrust_level == level_DCL1
变量及其范围: [{'name': 'level_DCL1', 'min_value': 11.0, 'max_value': 11.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_DCL1', 'constant_value': 11.0}, {'name': 'thrust_level', 'min_value': 0.0, 'max_value': 23.0, 'var_type': 'int', 'is_last': False, 'original_var': 'thrust_level'}]
解析后的条件: thrust_level == level_DCL1
识别到的变量: [{'name': 'level_DCL1', 'min_value': 11.0, 'max_value': 11.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_DCL1', 'constant_value': 11.0}, {'name': 'thrust_level', 'min_value': 0.0, 'max_value': 23.0, 'var_type': 'int', 'is_last': False, 'original_var': 'thrust_level'}]
处理的变量: ['level_DCL1', 'thrust_level']
预处理后的条件: thrust_level == level_DCL1
提取的原子条件: [('thrust_level', '==', 'level_DCL1')]
表达式结构: {}
根表达式: ATOM_0
构建的Z3表达式: 11 == thrust_level
为原子条件 'thrust_level == level_DCL1' 生成MCDC测试用例
生成的MCDC条件数量: 1
生成的MCDC条件数量: 1

生成的测试用例:
- 条件: thrust_level == level_DCL1
  测试用例: level_DCL1=11.0, thrust_level=11
  预期结果: True
- 条件: thrust_level == level_DCL1
  测试用例: level_DCL1=11.0, thrust_level=10
  预期结果: False

==================================================
处理模块: N1R指示量N1RDemInd计算（减推力爬升2）
提取到的if条件: ['thrust_level == level_DCL2']

处理条件 1: thrust_level == level_DCL2
解析后的Python条件表达式: thrust_level == level_DCL2
变量及其范围: [{'name': 'level_DCL2', 'min_value': 12.0, 'max_value': 12.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_DCL2', 'constant_value': 12.0}, {'name': 'thrust_level', 'min_value': 0.0, 'max_value': 23.0, 'var_type': 'int', 'is_last': False, 'original_var': 'thrust_level'}]
解析后的条件: thrust_level == level_DCL2
识别到的变量: [{'name': 'level_DCL2', 'min_value': 12.0, 'max_value': 12.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_DCL2', 'constant_value': 12.0}, {'name': 'thrust_level', 'min_value': 0.0, 'max_value': 23.0, 'var_type': 'int', 'is_last': False, 'original_var': 'thrust_level'}]
处理的变量: ['level_DCL2', 'thrust_level']
预处理后的条件: thrust_level == level_DCL2
提取的原子条件: [('thrust_level', '==', 'level_DCL2')]
表达式结构: {}
根表达式: ATOM_0
构建的Z3表达式: 12 == thrust_level
为原子条件 'thrust_level == level_DCL2' 生成MCDC测试用例
生成的MCDC条件数量: 1
生成的MCDC条件数量: 1

生成的测试用例:
- 条件: thrust_level == level_DCL2
  测试用例: level_DCL2=12.0, thrust_level=12
  预期结果: True
- 条件: thrust_level == level_DCL2
  测试用例: level_DCL2=12.0, thrust_level=11
  预期结果: False

==================================================
处理模块: N1R指示量N1RDemInd计算（连续）
提取到的if条件: ['thrust_level == level_CT']

处理条件 1: thrust_level == level_CT
解析后的Python条件表达式: thrust_level == level_CT
变量及其范围: [{'name': 'level_CT', 'min_value': 13.0, 'max_value': 13.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_CT', 'constant_value': 13.0}, {'name': 'thrust_level', 'min_value': 0.0, 'max_value': 23.0, 'var_type': 'int', 'is_last': False, 'original_var': 'thrust_level'}]
解析后的条件: thrust_level == level_CT
识别到的变量: [{'name': 'level_CT', 'min_value': 13.0, 'max_value': 13.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_CT', 'constant_value': 13.0}, {'name': 'thrust_level', 'min_value': 0.0, 'max_value': 23.0, 'var_type': 'int', 'is_last': False, 'original_var': 'thrust_level'}]
处理的变量: ['level_CT', 'thrust_level']
预处理后的条件: thrust_level == level_CT
提取的原子条件: [('thrust_level', '==', 'level_CT')]
表达式结构: {}
根表达式: ATOM_0
构建的Z3表达式: 13 == thrust_level
为原子条件 'thrust_level == level_CT' 生成MCDC测试用例
生成的MCDC条件数量: 1
生成的MCDC条件数量: 1

生成的测试用例:
- 条件: thrust_level == level_CT
  测试用例: level_CT=13.0, thrust_level=13
  预期结果: True
- 条件: thrust_level == level_CT
  测试用例: level_CT=13.0, thrust_level=12
  预期结果: False

==================================================
处理模块: N1R指示量N1RDemInd计算（最大连续）
提取到的if条件: ['thrust_level == level_MCT']

处理条件 1: thrust_level == level_MCT
解析后的Python条件表达式: thrust_level == level_MCT
变量及其范围: [{'name': 'level_MCT', 'min_value': 14.0, 'max_value': 14.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_MCT', 'constant_value': 14.0}, {'name': 'thrust_level', 'min_value': 0.0, 'max_value': 23.0, 'var_type': 'int', 'is_last': False, 'original_var': 'thrust_level'}]
解析后的条件: thrust_level == level_MCT
识别到的变量: [{'name': 'level_MCT', 'min_value': 14.0, 'max_value': 14.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_MCT', 'constant_value': 14.0}, {'name': 'thrust_level', 'min_value': 0.0, 'max_value': 23.0, 'var_type': 'int', 'is_last': False, 'original_var': 'thrust_level'}]
处理的变量: ['level_MCT', 'thrust_level']
预处理后的条件: thrust_level == level_MCT
提取的原子条件: [('thrust_level', '==', 'level_MCT')]
表达式结构: {}
根表达式: ATOM_0
构建的Z3表达式: 14 == thrust_level
为原子条件 'thrust_level == level_MCT' 生成MCDC测试用例
生成的MCDC条件数量: 1
生成的MCDC条件数量: 1

生成的测试用例:
- 条件: thrust_level == level_MCT
  测试用例: level_MCT=14.0, thrust_level=14
  预期结果: True
- 条件: thrust_level == level_MCT
  测试用例: level_MCT=14.0, thrust_level=13
  预期结果: False

==================================================
处理模块: N1R指示量N1RDemInd计算（起飞）
提取到的if条件: ['thrust_level == level_TO']

处理条件 1: thrust_level == level_TO
解析后的Python条件表达式: thrust_level == level_TO
变量及其范围: [{'name': 'level_TO', 'min_value': 15.0, 'max_value': 15.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_TO', 'constant_value': 15.0}, {'name': 'thrust_level', 'min_value': 0.0, 'max_value': 23.0, 'var_type': 'int', 'is_last': False, 'original_var': 'thrust_level'}]
解析后的条件: thrust_level == level_TO
识别到的变量: [{'name': 'level_TO', 'min_value': 15.0, 'max_value': 15.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_TO', 'constant_value': 15.0}, {'name': 'thrust_level', 'min_value': 0.0, 'max_value': 23.0, 'var_type': 'int', 'is_last': False, 'original_var': 'thrust_level'}]
处理的变量: ['level_TO', 'thrust_level']
预处理后的条件: thrust_level == level_TO
提取的原子条件: [('thrust_level', '==', 'level_TO')]
表达式结构: {}
根表达式: ATOM_0
构建的Z3表达式: 15 == thrust_level
为原子条件 'thrust_level == level_TO' 生成MCDC测试用例
生成的MCDC条件数量: 1
生成的MCDC条件数量: 1

生成的测试用例:
- 条件: thrust_level == level_TO
  测试用例: level_TO=15.0, thrust_level=15
  预期结果: True
- 条件: thrust_level == level_TO
  测试用例: level_TO=15.0, thrust_level=14
  预期结果: False

==================================================
处理模块: N1R指示量N1RDemInd计算（最大起飞）
提取到的if条件: ['thrust_level == level_MTO']

处理条件 1: thrust_level == level_MTO
解析后的Python条件表达式: thrust_level == level_MTO
变量及其范围: [{'name': 'level_MTO', 'min_value': 16.0, 'max_value': 16.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_MTO', 'constant_value': 16.0}, {'name': 'thrust_level', 'min_value': 0.0, 'max_value': 23.0, 'var_type': 'int', 'is_last': False, 'original_var': 'thrust_level'}]
解析后的条件: thrust_level == level_MTO
识别到的变量: [{'name': 'level_MTO', 'min_value': 16.0, 'max_value': 16.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_MTO', 'constant_value': 16.0}, {'name': 'thrust_level', 'min_value': 0.0, 'max_value': 23.0, 'var_type': 'int', 'is_last': False, 'original_var': 'thrust_level'}]
处理的变量: ['level_MTO', 'thrust_level']
预处理后的条件: thrust_level == level_MTO
提取的原子条件: [('thrust_level', '==', 'level_MTO')]
表达式结构: {}
根表达式: ATOM_0
构建的Z3表达式: 16 == thrust_level
为原子条件 'thrust_level == level_MTO' 生成MCDC测试用例
生成的MCDC条件数量: 1
生成的MCDC条件数量: 1

生成的测试用例:
- 条件: thrust_level == level_MTO
  测试用例: level_MTO=16.0, thrust_level=16
  预期结果: True
- 条件: thrust_level == level_MTO
  测试用例: level_MTO=16.0, thrust_level=15
  预期结果: False

==================================================
处理模块: N1R指示量N1RDemInd计算（减推力起飞1）
提取到的if条件: ['thrust_level == level_DTO1']

处理条件 1: thrust_level == level_DTO1
解析后的Python条件表达式: thrust_level == level_DTO1
变量及其范围: [{'name': 'level_DTO1', 'min_value': 17.0, 'max_value': 17.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_DTO1', 'constant_value': 17.0}, {'name': 'thrust_level', 'min_value': 0.0, 'max_value': 23.0, 'var_type': 'int', 'is_last': False, 'original_var': 'thrust_level'}]
解析后的条件: thrust_level == level_DTO1
识别到的变量: [{'name': 'level_DTO1', 'min_value': 17.0, 'max_value': 17.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_DTO1', 'constant_value': 17.0}, {'name': 'thrust_level', 'min_value': 0.0, 'max_value': 23.0, 'var_type': 'int', 'is_last': False, 'original_var': 'thrust_level'}]
处理的变量: ['level_DTO1', 'thrust_level']
预处理后的条件: thrust_level == level_DTO1
提取的原子条件: [('thrust_level', '==', 'level_DTO1')]
表达式结构: {}
根表达式: ATOM_0
构建的Z3表达式: 17 == thrust_level
为原子条件 'thrust_level == level_DTO1' 生成MCDC测试用例
生成的MCDC条件数量: 1
生成的MCDC条件数量: 1

生成的测试用例:
- 条件: thrust_level == level_DTO1
  测试用例: level_DTO1=17.0, thrust_level=17
  预期结果: True
- 条件: thrust_level == level_DTO1
  测试用例: level_DTO1=17.0, thrust_level=16
  预期结果: False

==================================================
处理模块: N1R指示量N1RDemInd计算（减推力起飞2）
提取到的if条件: ['thrust_level == level_DTO2']

处理条件 1: thrust_level == level_DTO2
解析后的Python条件表达式: thrust_level == level_DTO2
变量及其范围: [{'name': 'level_DTO2', 'min_value': 18.0, 'max_value': 18.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_DTO2', 'constant_value': 18.0}, {'name': 'thrust_level', 'min_value': 0.0, 'max_value': 23.0, 'var_type': 'int', 'is_last': False, 'original_var': 'thrust_level'}]
解析后的条件: thrust_level == level_DTO2
识别到的变量: [{'name': 'level_DTO2', 'min_value': 18.0, 'max_value': 18.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_DTO2', 'constant_value': 18.0}, {'name': 'thrust_level', 'min_value': 0.0, 'max_value': 23.0, 'var_type': 'int', 'is_last': False, 'original_var': 'thrust_level'}]
处理的变量: ['level_DTO2', 'thrust_level']
预处理后的条件: thrust_level == level_DTO2
提取的原子条件: [('thrust_level', '==', 'level_DTO2')]
表达式结构: {}
根表达式: ATOM_0
构建的Z3表达式: 18 == thrust_level
为原子条件 'thrust_level == level_DTO2' 生成MCDC测试用例
生成的MCDC条件数量: 1
生成的MCDC条件数量: 1

生成的测试用例:
- 条件: thrust_level == level_DTO2
  测试用例: level_DTO2=18.0, thrust_level=18
  预期结果: True
- 条件: thrust_level == level_DTO2
  测试用例: level_DTO2=18.0, thrust_level=17
  预期结果: False

==================================================
处理模块: N1R指示量N1RDemInd计算（复飞）
提取到的if条件: ['thrust_level == level_GA']

处理条件 1: thrust_level == level_GA
解析后的Python条件表达式: thrust_level == level_GA
变量及其范围: [{'name': 'level_GA', 'min_value': 21.0, 'max_value': 21.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_GA', 'constant_value': 21.0}, {'name': 'thrust_level', 'min_value': 0.0, 'max_value': 23.0, 'var_type': 'int', 'is_last': False, 'original_var': 'thrust_level'}]
解析后的条件: thrust_level == level_GA
识别到的变量: [{'name': 'level_GA', 'min_value': 21.0, 'max_value': 21.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_GA', 'constant_value': 21.0}, {'name': 'thrust_level', 'min_value': 0.0, 'max_value': 23.0, 'var_type': 'int', 'is_last': False, 'original_var': 'thrust_level'}]
处理的变量: ['level_GA', 'thrust_level']
预处理后的条件: thrust_level == level_GA
提取的原子条件: [('thrust_level', '==', 'level_GA')]
表达式结构: {}
根表达式: ATOM_0
构建的Z3表达式: 21 == thrust_level
为原子条件 'thrust_level == level_GA' 生成MCDC测试用例
生成的MCDC条件数量: 1
生成的MCDC条件数量: 1

生成的测试用例:
- 条件: thrust_level == level_GA
  测试用例: level_GA=21.0, thrust_level=21
  预期结果: True
- 条件: thrust_level == level_GA
  测试用例: level_GA=21.0, thrust_level=20
  预期结果: False

==================================================
处理模块: N1R指示量N1RDemInd计算（增推力起飞）
提取到的if条件: ['thrust_level == level_Bump']

处理条件 1: thrust_level == level_Bump
解析后的Python条件表达式: thrust_level == level_Bump
变量及其范围: [{'name': 'level_Bump', 'min_value': 19.0, 'max_value': 19.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_Bump', 'constant_value': 19.0}, {'name': 'thrust_level', 'min_value': 0.0, 'max_value': 23.0, 'var_type': 'int', 'is_last': False, 'original_var': 'thrust_level'}]
解析后的条件: thrust_level == level_Bump
识别到的变量: [{'name': 'level_Bump', 'min_value': 19.0, 'max_value': 19.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_Bump', 'constant_value': 19.0}, {'name': 'thrust_level', 'min_value': 0.0, 'max_value': 23.0, 'var_type': 'int', 'is_last': False, 'original_var': 'thrust_level'}]
处理的变量: ['level_Bump', 'thrust_level']
预处理后的条件: thrust_level == level_Bump
提取的原子条件: [('thrust_level', '==', 'level_Bump')]
表达式结构: {}
根表达式: ATOM_0
构建的Z3表达式: 19 == thrust_level
为原子条件 'thrust_level == level_Bump' 生成MCDC测试用例
生成的MCDC条件数量: 1
生成的MCDC条件数量: 1

生成的测试用例:
- 条件: thrust_level == level_Bump
  测试用例: level_Bump=19.0, thrust_level=19
  预期结果: True
- 条件: thrust_level == level_Bump
  测试用例: level_Bump=19.0, thrust_level=18
  预期结果: False

==================================================
处理模块: N1R指示量N1RDemInd计算（灵活起飞）
提取到的if条件: ['thrust_level == level_FLEXTO']

处理条件 1: thrust_level == level_FLEXTO
解析后的Python条件表达式: thrust_level == level_FLEXTO
变量及其范围: [{'name': 'thrust_level', 'min_value': 0.0, 'max_value': 23.0, 'var_type': 'int', 'is_last': False, 'original_var': 'thrust_level'}, {'name': 'level_FLEXTO', 'min_value': 20.0, 'max_value': 20.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_FLEXTO', 'constant_value': 20.0}]
解析后的条件: thrust_level == level_FLEXTO
识别到的变量: [{'name': 'thrust_level', 'min_value': 0.0, 'max_value': 23.0, 'var_type': 'int', 'is_last': False, 'original_var': 'thrust_level'}, {'name': 'level_FLEXTO', 'min_value': 20.0, 'max_value': 20.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_FLEXTO', 'constant_value': 20.0}]
处理的变量: ['thrust_level', 'level_FLEXTO']
预处理后的条件: thrust_level == level_FLEXTO
提取的原子条件: [('thrust_level', '==', 'level_FLEXTO')]
表达式结构: {}
根表达式: ATOM_0
构建的Z3表达式: 20 == thrust_level
为原子条件 'thrust_level == level_FLEXTO' 生成MCDC测试用例
生成的MCDC条件数量: 1
生成的MCDC条件数量: 1

生成的测试用例:
- 条件: thrust_level == level_FLEXTO
  测试用例: level_FLEXTO=20.0, thrust_level=20
  预期结果: True
- 条件: thrust_level == level_FLEXTO
  测试用例: level_FLEXTO=20.0, thrust_level=19
  预期结果: False

==================================================
处理模块: N1R指示量N1RDemInd计算（准最大推力）
提取到的if条件: ['thrust_level == level_TO2MAX']

处理条件 1: thrust_level == level_TO2MAX
解析后的Python条件表达式: thrust_level == level_TO2MAX
变量及其范围: [{'name': 'level_TO2MAX', 'min_value': 23.0, 'max_value': 23.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_TO2MAX', 'constant_value': 23.0}, {'name': 'thrust_level', 'min_value': 0.0, 'max_value': 23.0, 'var_type': 'int', 'is_last': False, 'original_var': 'thrust_level'}]
解析后的条件: thrust_level == level_TO2MAX
识别到的变量: [{'name': 'level_TO2MAX', 'min_value': 23.0, 'max_value': 23.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_TO2MAX', 'constant_value': 23.0}, {'name': 'thrust_level', 'min_value': 0.0, 'max_value': 23.0, 'var_type': 'int', 'is_last': False, 'original_var': 'thrust_level'}]
处理的变量: ['level_TO2MAX', 'thrust_level']
预处理后的条件: thrust_level == level_TO2MAX
提取的原子条件: [('thrust_level', '==', 'level_TO2MAX')]
表达式结构: {}
根表达式: ATOM_0
构建的Z3表达式: 23 == thrust_level
为原子条件 'thrust_level == level_TO2MAX' 生成MCDC测试用例
生成的MCDC条件数量: 1
生成的MCDC条件数量: 1

生成的测试用例:
- 条件: thrust_level == level_TO2MAX
  测试用例: level_TO2MAX=23.0, thrust_level=23
  预期结果: True
- 条件: thrust_level == level_TO2MAX
  测试用例: level_TO2MAX=23.0, thrust_level=22
  预期结果: False

==================================================
处理模块: N1R指示量N1RDemInd计算（最大推力）
提取到的if条件: ['thrust_level == level_MAX']

处理条件 1: thrust_level == level_MAX
解析后的Python条件表达式: thrust_level == level_MAX
变量及其范围: [{'name': 'level_MAX', 'min_value': 22.0, 'max_value': 22.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_MAX', 'constant_value': 22.0}, {'name': 'thrust_level', 'min_value': 0.0, 'max_value': 23.0, 'var_type': 'int', 'is_last': False, 'original_var': 'thrust_level'}]
解析后的条件: thrust_level == level_MAX
识别到的变量: [{'name': 'level_MAX', 'min_value': 22.0, 'max_value': 22.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_MAX', 'constant_value': 22.0}, {'name': 'thrust_level', 'min_value': 0.0, 'max_value': 23.0, 'var_type': 'int', 'is_last': False, 'original_var': 'thrust_level'}]
处理的变量: ['level_MAX', 'thrust_level']
预处理后的条件: thrust_level == level_MAX
提取的原子条件: [('thrust_level', '==', 'level_MAX')]
表达式结构: {}
根表达式: ATOM_0
构建的Z3表达式: 22 == thrust_level
为原子条件 'thrust_level == level_MAX' 生成MCDC测试用例
生成的MCDC条件数量: 1
生成的MCDC条件数量: 1

生成的测试用例:
- 条件: thrust_level == level_MAX
  测试用例: level_MAX=22.0, thrust_level=22
  预期结果: True
- 条件: thrust_level == level_MAX
  测试用例: level_MAX=22.0, thrust_level=21
  预期结果: False

==================================================
处理模块: N1R指示量N1RDemInd计算（无指定推力等级补充1）
提取到的if条件: ['thrust_level == level_default && (engine_state == ES_ground_start || engine_state == ES_windmill_start || engine_state == ES_Qwindmill_start || engine_state == ES_assist_start)']

处理条件 1: thrust_level == level_default && (engine_state == ES_ground_start || engine_state == ES_windmill_start || engine_state == ES_Qwindmill_start || engine_state == ES_assist_start)
解析后的Python条件表达式: thrust_level == level_default and (engine_state == ES_ground_start or engine_state == ES_windmill_start or engine_state == ES_Qwindmill_start or engine_state == ES_assist_start)
变量及其范围: [{'name': 'level_default', 'min_value': 0.0, 'max_value': 0.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_default', 'constant_value': 0.0}, {'name': 'ES_Qwindmill_start', 'min_value': 13.0, 'max_value': 13.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'ES_Qwindmill_start', 'constant_value': 13.0}, {'name': 'ES_assist_start', 'min_value': 10.0, 'max_value': 10.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'ES_assist_start', 'constant_value': 10.0}, {'name': 'thrust_level', 'min_value': 0.0, 'max_value': 23.0, 'var_type': 'int', 'is_last': False, 'original_var': 'thrust_level'}, {'name': 'engine_state', 'min_value': 0.0, 'max_value': 16.0, 'var_type': 'int', 'is_last': False, 'original_var': 'engine_state'}, {'name': 'ES_windmill_start', 'min_value': 11.0, 'max_value': 11.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'ES_windmill_start', 'constant_value': 11.0}, {'name': 'ES_ground_start', 'min_value': 9.0, 'max_value': 9.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'ES_ground_start', 'constant_value': 9.0}]
解析后的条件: thrust_level == level_default and (engine_state == ES_ground_start or engine_state == ES_windmill_start or engine_state == ES_Qwindmill_start or engine_state == ES_assist_start)
识别到的变量: [{'name': 'level_default', 'min_value': 0.0, 'max_value': 0.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_default', 'constant_value': 0.0}, {'name': 'ES_Qwindmill_start', 'min_value': 13.0, 'max_value': 13.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'ES_Qwindmill_start', 'constant_value': 13.0}, {'name': 'ES_assist_start', 'min_value': 10.0, 'max_value': 10.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'ES_assist_start', 'constant_value': 10.0}, {'name': 'thrust_level', 'min_value': 0.0, 'max_value': 23.0, 'var_type': 'int', 'is_last': False, 'original_var': 'thrust_level'}, {'name': 'engine_state', 'min_value': 0.0, 'max_value': 16.0, 'var_type': 'int', 'is_last': False, 'original_var': 'engine_state'}, {'name': 'ES_windmill_start', 'min_value': 11.0, 'max_value': 11.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'ES_windmill_start', 'constant_value': 11.0}, {'name': 'ES_ground_start', 'min_value': 9.0, 'max_value': 9.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'ES_ground_start', 'constant_value': 9.0}]
处理的变量: ['level_default', 'ES_Qwindmill_start', 'ES_assist_start', 'thrust_level', 'engine_state', 'ES_windmill_start', 'ES_ground_start']
预处理后的条件: thrust_level == level_default and (engine_state == ES_ground_start or engine_state == ES_windmill_start or engine_state == ES_Qwindmill_start or engine_state == ES_assist_start)
提取的原子条件: [('thrust_level', '==', 'level_default'), ('engine_state', '==', 'ES_ground_start'), ('engine_state', '==', 'ES_windmill_start'), ('engine_state', '==', 'ES_Qwindmill_start'), ('engine_state', '==', 'ES_assist_start')]
表达式结构: {'OR_EXPR_1': ('or', ['ATOM_1', 'ATOM_2', 'ATOM_3', 'ATOM_4']), 'AND_EXPR_0': ('and', ['ATOM_0', 'OR_EXPR_1'])}
根表达式: AND_EXPR_0
构建的Z3表达式: And(0 == thrust_level,
    Or(9 == engine_state,
       11 == engine_state,
       13 == engine_state,
       10 == engine_state))
为原子条件 'thrust_level == level_default' 生成MCDC测试用例
为原子条件 'engine_state == ES_ground_start' 生成MCDC测试用例
为原子条件 'engine_state == ES_windmill_start' 生成MCDC测试用例
为原子条件 'engine_state == ES_Qwindmill_start' 生成MCDC测试用例
为原子条件 'engine_state == ES_assist_start' 生成MCDC测试用例
生成的MCDC条件数量: 5
生成的MCDC条件数量: 5

生成的测试用例:
- 条件: thrust_level == level_default && (engine_state == ES_ground_start || engine_state == ES_windmill_start || engine_state == ES_Qwindmill_start || engine_state == ES_assist_start)
  测试用例: ES_Qwindmill_start=13.0, ES_assist_start=10.0, ES_ground_start=9.0, ES_windmill_start=11.0, engine_state=9, level_default=0.0, thrust_level=0
  预期结果: True
- 条件: thrust_level == level_default && (engine_state == ES_ground_start || engine_state == ES_windmill_start || engine_state == ES_Qwindmill_start || engine_state == ES_assist_start)
  测试用例: ES_Qwindmill_start=13.0, ES_assist_start=10.0, ES_ground_start=9.0, ES_windmill_start=11.0, engine_state=9, level_default=0.0, thrust_level=1
  预期结果: False
- 条件: thrust_level == level_default && (engine_state == ES_ground_start || engine_state == ES_windmill_start || engine_state == ES_Qwindmill_start || engine_state == ES_assist_start)
  测试用例: ES_Qwindmill_start=13.0, ES_assist_start=10.0, ES_ground_start=9.0, ES_windmill_start=11.0, engine_state=9, level_default=0.0, thrust_level=0
  预期结果: True
- 条件: thrust_level == level_default && (engine_state == ES_ground_start || engine_state == ES_windmill_start || engine_state == ES_Qwindmill_start || engine_state == ES_assist_start)
  测试用例: ES_Qwindmill_start=13.0, ES_assist_start=10.0, ES_ground_start=9.0, ES_windmill_start=11.0, engine_state=8, level_default=0.0, thrust_level=1
  预期结果: False
- 条件: thrust_level == level_default && (engine_state == ES_ground_start || engine_state == ES_windmill_start || engine_state == ES_Qwindmill_start || engine_state == ES_assist_start)
  测试用例: ES_Qwindmill_start=13.0, ES_assist_start=10.0, ES_ground_start=9.0, ES_windmill_start=11.0, engine_state=11, level_default=0.0, thrust_level=0
  预期结果: True
- 条件: thrust_level == level_default && (engine_state == ES_ground_start || engine_state == ES_windmill_start || engine_state == ES_Qwindmill_start || engine_state == ES_assist_start)
  测试用例: ES_Qwindmill_start=13.0, ES_assist_start=10.0, ES_ground_start=9.0, ES_windmill_start=11.0, engine_state=8, level_default=0.0, thrust_level=1
  预期结果: False
- 条件: thrust_level == level_default && (engine_state == ES_ground_start || engine_state == ES_windmill_start || engine_state == ES_Qwindmill_start || engine_state == ES_assist_start)
  测试用例: ES_Qwindmill_start=13.0, ES_assist_start=10.0, ES_ground_start=9.0, ES_windmill_start=11.0, engine_state=13, level_default=0.0, thrust_level=0
  预期结果: True
- 条件: thrust_level == level_default && (engine_state == ES_ground_start || engine_state == ES_windmill_start || engine_state == ES_Qwindmill_start || engine_state == ES_assist_start)
  测试用例: ES_Qwindmill_start=13.0, ES_assist_start=10.0, ES_ground_start=9.0, ES_windmill_start=11.0, engine_state=8, level_default=0.0, thrust_level=1
  预期结果: False
- 条件: thrust_level == level_default && (engine_state == ES_ground_start || engine_state == ES_windmill_start || engine_state == ES_Qwindmill_start || engine_state == ES_assist_start)
  测试用例: ES_Qwindmill_start=13.0, ES_assist_start=10.0, ES_ground_start=9.0, ES_windmill_start=11.0, engine_state=10, level_default=0.0, thrust_level=0
  预期结果: True
- 条件: thrust_level == level_default && (engine_state == ES_ground_start || engine_state == ES_windmill_start || engine_state == ES_Qwindmill_start || engine_state == ES_assist_start)
  测试用例: ES_Qwindmill_start=13.0, ES_assist_start=10.0, ES_ground_start=9.0, ES_windmill_start=11.0, engine_state=8, level_default=0.0, thrust_level=1
  预期结果: False

==================================================
处理模块: N1R指示量N1RDemInd计算（无指定推力等级补充2）
提取到的if条件: ['thrust_level == level_default && (engine_state == ES_origin || engine_state == ES_ground_standby || engine_state == ES_flight_standby || engine_state == ES_cold_operation || engine_state == ES_DR_OS_Us || engine_state == ES_normal_stop || engine_state == ES_emergency_stop || engine_state == ES_ground_start_termination || engine_state == ES_flight_start_terminnation)']

处理条件 1: thrust_level == level_default && (engine_state == ES_origin || engine_state == ES_ground_standby || engine_state == ES_flight_standby || engine_state == ES_cold_operation || engine_state == ES_DR_OS_Us || engine_state == ES_normal_stop || engine_state == ES_emergency_stop || engine_state == ES_ground_start_termination || engine_state == ES_flight_start_terminnation)
解析后的Python条件表达式: thrust_level == level_default and (engine_state == ES_origin or engine_state == ES_ground_standby or engine_state == ES_flight_standby or engine_state == ES_cold_operation or engine_state == ES_DR_OS_Us or engine_state == ES_normal_stop or engine_state == ES_emergency_stop or engine_state == ES_ground_start_termination or engine_state == ES_flight_start_terminnation)
变量及其范围: [{'name': 'ES_flight_start_terminnation', 'min_value': 8.0, 'max_value': 8.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'ES_flight_start_terminnation', 'constant_value': 8.0}, {'name': 'ES_origin', 'min_value': 0.0, 'max_value': 0.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'ES_origin', 'constant_value': 0.0}, {'name': 'ES_normal_stop', 'min_value': 5.0, 'max_value': 5.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'ES_normal_stop', 'constant_value': 5.0}, {'name': 'level_default', 'min_value': 0.0, 'max_value': 0.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_default', 'constant_value': 0.0}, {'name': 'ES_emergency_stop', 'min_value': 6.0, 'max_value': 6.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'ES_emergency_stop', 'constant_value': 6.0}, {'name': 'thrust_level', 'min_value': 0.0, 'max_value': 23.0, 'var_type': 'int', 'is_last': False, 'original_var': 'thrust_level'}, {'name': 'ES_ground_standby', 'min_value': 1.0, 'max_value': 1.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'ES_ground_standby', 'constant_value': 1.0}, {'name': 'engine_state', 'min_value': 0.0, 'max_value': 16.0, 'var_type': 'int', 'is_last': False, 'original_var': 'engine_state'}, {'name': 'ES_cold_operation', 'min_value': 3.0, 'max_value': 3.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'ES_cold_operation', 'constant_value': 3.0}, {'name': 'ES_ground_start_termination', 'min_value': 7.0, 'max_value': 7.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'ES_ground_start_termination', 'constant_value': 7.0}, {'name': 'ES_flight_standby', 'min_value': 2.0, 'max_value': 2.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'ES_flight_standby', 'constant_value': 2.0}, {'name': 'ES_DR_OS_Us', 'min_value': 4.0, 'max_value': 4.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'ES_DR_OS_Us', 'constant_value': 4.0}]
解析后的条件: thrust_level == level_default and (engine_state == ES_origin or engine_state == ES_ground_standby or engine_state == ES_flight_standby or engine_state == ES_cold_operation or engine_state == ES_DR_OS_Us or engine_state == ES_normal_stop or engine_state == ES_emergency_stop or engine_state == ES_ground_start_termination or engine_state == ES_flight_start_terminnation)
识别到的变量: [{'name': 'ES_flight_start_terminnation', 'min_value': 8.0, 'max_value': 8.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'ES_flight_start_terminnation', 'constant_value': 8.0}, {'name': 'ES_origin', 'min_value': 0.0, 'max_value': 0.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'ES_origin', 'constant_value': 0.0}, {'name': 'ES_normal_stop', 'min_value': 5.0, 'max_value': 5.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'ES_normal_stop', 'constant_value': 5.0}, {'name': 'level_default', 'min_value': 0.0, 'max_value': 0.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_default', 'constant_value': 0.0}, {'name': 'ES_emergency_stop', 'min_value': 6.0, 'max_value': 6.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'ES_emergency_stop', 'constant_value': 6.0}, {'name': 'thrust_level', 'min_value': 0.0, 'max_value': 23.0, 'var_type': 'int', 'is_last': False, 'original_var': 'thrust_level'}, {'name': 'ES_ground_standby', 'min_value': 1.0, 'max_value': 1.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'ES_ground_standby', 'constant_value': 1.0}, {'name': 'engine_state', 'min_value': 0.0, 'max_value': 16.0, 'var_type': 'int', 'is_last': False, 'original_var': 'engine_state'}, {'name': 'ES_cold_operation', 'min_value': 3.0, 'max_value': 3.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'ES_cold_operation', 'constant_value': 3.0}, {'name': 'ES_ground_start_termination', 'min_value': 7.0, 'max_value': 7.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'ES_ground_start_termination', 'constant_value': 7.0}, {'name': 'ES_flight_standby', 'min_value': 2.0, 'max_value': 2.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'ES_flight_standby', 'constant_value': 2.0}, {'name': 'ES_DR_OS_Us', 'min_value': 4.0, 'max_value': 4.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'ES_DR_OS_Us', 'constant_value': 4.0}]
处理的变量: ['ES_flight_start_terminnation', 'ES_origin', 'ES_normal_stop', 'level_default', 'ES_emergency_stop', 'thrust_level', 'ES_ground_standby', 'engine_state', 'ES_cold_operation', 'ES_ground_start_termination', 'ES_flight_standby', 'ES_DR_OS_Us']
预处理后的条件: thrust_level == level_default and (engine_state == ES_origin or engine_state == ES_ground_standby or engine_state == ES_flight_standby or engine_state == ES_cold_operation or engine_state == ES_DR_OS_Us or engine_state == ES_normal_stop or engine_state == ES_emergency_stop or engine_state == ES_ground_start_termination or engine_state == ES_flight_start_terminnation)
提取的原子条件: [('thrust_level', '==', 'level_default'), ('engine_state', '==', 'ES_origin'), ('engine_state', '==', 'ES_ground_standby'), ('engine_state', '==', 'ES_flight_standby'), ('engine_state', '==', 'ES_cold_operation'), ('engine_state', '==', 'ES_DR_OS_Us'), ('engine_state', '==', 'ES_normal_stop'), ('engine_state', '==', 'ES_emergency_stop'), ('engine_state', '==', 'ES_ground_start_termination'), ('engine_state', '==', 'ES_flight_start_terminnation')]
表达式结构: {'OR_EXPR_1': ('or', ['ATOM_1', 'ATOM_2', 'ATOM_3', 'ATOM_4', 'ATOM_5', 'ATOM_6', 'ATOM_7', 'ATOM_8', 'ATOM_9']), 'AND_EXPR_0': ('and', ['ATOM_0', 'OR_EXPR_1'])}
根表达式: AND_EXPR_0
构建的Z3表达式: And(0 == thrust_level,
    Or(0 == engine_state,
       1 == engine_state,
       2 == engine_state,
       3 == engine_state,
       4 == engine_state,
       5 == engine_state,
       6 == engine_state,
       7 == engine_state,
       8 == engine_state))
为原子条件 'thrust_level == level_default' 生成MCDC测试用例
为原子条件 'engine_state == ES_origin' 生成MCDC测试用例
为原子条件 'engine_state == ES_ground_standby' 生成MCDC测试用例
为原子条件 'engine_state == ES_flight_standby' 生成MCDC测试用例
为原子条件 'engine_state == ES_cold_operation' 生成MCDC测试用例
为原子条件 'engine_state == ES_DR_OS_Us' 生成MCDC测试用例
为原子条件 'engine_state == ES_normal_stop' 生成MCDC测试用例
为原子条件 'engine_state == ES_emergency_stop' 生成MCDC测试用例
为原子条件 'engine_state == ES_ground_start_termination' 生成MCDC测试用例
为原子条件 'engine_state == ES_flight_start_terminnation' 生成MCDC测试用例
生成的MCDC条件数量: 10
生成的MCDC条件数量: 10

生成的测试用例:
- 条件: thrust_level == level_default && (engine_state == ES_origin || engine_state == ES_ground_standby || engine_state == ES_flight_standby || engine_state == ES_cold_operation || engine_state == ES_DR_OS_Us || engine_state == ES_normal_stop || engine_state == ES_emergency_stop || engine_state == ES_ground_start_termination || engine_state == ES_flight_start_terminnation)
  测试用例: ES_DR_OS_Us=4.0, ES_cold_operation=3.0, ES_emergency_stop=6.0, ES_flight_standby=2.0, ES_flight_start_terminnation=8.0, ES_ground_standby=1.0, ES_ground_start_termination=7.0, ES_normal_stop=5.0, ES_origin=0.0, engine_state=0, level_default=0.0, thrust_level=0
  预期结果: True
- 条件: thrust_level == level_default && (engine_state == ES_origin || engine_state == ES_ground_standby || engine_state == ES_flight_standby || engine_state == ES_cold_operation || engine_state == ES_DR_OS_Us || engine_state == ES_normal_stop || engine_state == ES_emergency_stop || engine_state == ES_ground_start_termination || engine_state == ES_flight_start_terminnation)
  测试用例: ES_DR_OS_Us=4.0, ES_cold_operation=3.0, ES_emergency_stop=6.0, ES_flight_standby=2.0, ES_flight_start_terminnation=8.0, ES_ground_standby=1.0, ES_ground_start_termination=7.0, ES_normal_stop=5.0, ES_origin=0.0, engine_state=0, level_default=0.0, thrust_level=1
  预期结果: False
- 条件: thrust_level == level_default && (engine_state == ES_origin || engine_state == ES_ground_standby || engine_state == ES_flight_standby || engine_state == ES_cold_operation || engine_state == ES_DR_OS_Us || engine_state == ES_normal_stop || engine_state == ES_emergency_stop || engine_state == ES_ground_start_termination || engine_state == ES_flight_start_terminnation)
  测试用例: ES_DR_OS_Us=4.0, ES_cold_operation=3.0, ES_emergency_stop=6.0, ES_flight_standby=2.0, ES_flight_start_terminnation=8.0, ES_ground_standby=1.0, ES_ground_start_termination=7.0, ES_normal_stop=5.0, ES_origin=0.0, engine_state=0, level_default=0.0, thrust_level=0
  预期结果: True
- 条件: thrust_level == level_default && (engine_state == ES_origin || engine_state == ES_ground_standby || engine_state == ES_flight_standby || engine_state == ES_cold_operation || engine_state == ES_DR_OS_Us || engine_state == ES_normal_stop || engine_state == ES_emergency_stop || engine_state == ES_ground_start_termination || engine_state == ES_flight_start_terminnation)
  测试用例: ES_DR_OS_Us=4.0, ES_cold_operation=3.0, ES_emergency_stop=6.0, ES_flight_standby=2.0, ES_flight_start_terminnation=8.0, ES_ground_standby=1.0, ES_ground_start_termination=7.0, ES_normal_stop=5.0, ES_origin=0.0, engine_state=1, level_default=0.0, thrust_level=1
  预期结果: False
- 条件: thrust_level == level_default && (engine_state == ES_origin || engine_state == ES_ground_standby || engine_state == ES_flight_standby || engine_state == ES_cold_operation || engine_state == ES_DR_OS_Us || engine_state == ES_normal_stop || engine_state == ES_emergency_stop || engine_state == ES_ground_start_termination || engine_state == ES_flight_start_terminnation)
  测试用例: ES_DR_OS_Us=4.0, ES_cold_operation=3.0, ES_emergency_stop=6.0, ES_flight_standby=2.0, ES_flight_start_terminnation=8.0, ES_ground_standby=1.0, ES_ground_start_termination=7.0, ES_normal_stop=5.0, ES_origin=0.0, engine_state=1, level_default=0.0, thrust_level=0
  预期结果: True
- 条件: thrust_level == level_default && (engine_state == ES_origin || engine_state == ES_ground_standby || engine_state == ES_flight_standby || engine_state == ES_cold_operation || engine_state == ES_DR_OS_Us || engine_state == ES_normal_stop || engine_state == ES_emergency_stop || engine_state == ES_ground_start_termination || engine_state == ES_flight_start_terminnation)
  测试用例: ES_DR_OS_Us=4.0, ES_cold_operation=3.0, ES_emergency_stop=6.0, ES_flight_standby=2.0, ES_flight_start_terminnation=8.0, ES_ground_standby=1.0, ES_ground_start_termination=7.0, ES_normal_stop=5.0, ES_origin=0.0, engine_state=4, level_default=0.0, thrust_level=1
  预期结果: False
- 条件: thrust_level == level_default && (engine_state == ES_origin || engine_state == ES_ground_standby || engine_state == ES_flight_standby || engine_state == ES_cold_operation || engine_state == ES_DR_OS_Us || engine_state == ES_normal_stop || engine_state == ES_emergency_stop || engine_state == ES_ground_start_termination || engine_state == ES_flight_start_terminnation)
  测试用例: ES_DR_OS_Us=4.0, ES_cold_operation=3.0, ES_emergency_stop=6.0, ES_flight_standby=2.0, ES_flight_start_terminnation=8.0, ES_ground_standby=1.0, ES_ground_start_termination=7.0, ES_normal_stop=5.0, ES_origin=0.0, engine_state=2, level_default=0.0, thrust_level=0
  预期结果: True
- 条件: thrust_level == level_default && (engine_state == ES_origin || engine_state == ES_ground_standby || engine_state == ES_flight_standby || engine_state == ES_cold_operation || engine_state == ES_DR_OS_Us || engine_state == ES_normal_stop || engine_state == ES_emergency_stop || engine_state == ES_ground_start_termination || engine_state == ES_flight_start_terminnation)
  测试用例: ES_DR_OS_Us=4.0, ES_cold_operation=3.0, ES_emergency_stop=6.0, ES_flight_standby=2.0, ES_flight_start_terminnation=8.0, ES_ground_standby=1.0, ES_ground_start_termination=7.0, ES_normal_stop=5.0, ES_origin=0.0, engine_state=0, level_default=0.0, thrust_level=1
  预期结果: False
- 条件: thrust_level == level_default && (engine_state == ES_origin || engine_state == ES_ground_standby || engine_state == ES_flight_standby || engine_state == ES_cold_operation || engine_state == ES_DR_OS_Us || engine_state == ES_normal_stop || engine_state == ES_emergency_stop || engine_state == ES_ground_start_termination || engine_state == ES_flight_start_terminnation)
  测试用例: ES_DR_OS_Us=4.0, ES_cold_operation=3.0, ES_emergency_stop=6.0, ES_flight_standby=2.0, ES_flight_start_terminnation=8.0, ES_ground_standby=1.0, ES_ground_start_termination=7.0, ES_normal_stop=5.0, ES_origin=0.0, engine_state=3, level_default=0.0, thrust_level=0
  预期结果: True
- 条件: thrust_level == level_default && (engine_state == ES_origin || engine_state == ES_ground_standby || engine_state == ES_flight_standby || engine_state == ES_cold_operation || engine_state == ES_DR_OS_Us || engine_state == ES_normal_stop || engine_state == ES_emergency_stop || engine_state == ES_ground_start_termination || engine_state == ES_flight_start_terminnation)
  测试用例: ES_DR_OS_Us=4.0, ES_cold_operation=3.0, ES_emergency_stop=6.0, ES_flight_standby=2.0, ES_flight_start_terminnation=8.0, ES_ground_standby=1.0, ES_ground_start_termination=7.0, ES_normal_stop=5.0, ES_origin=0.0, engine_state=1, level_default=0.0, thrust_level=1
  预期结果: False
- 条件: thrust_level == level_default && (engine_state == ES_origin || engine_state == ES_ground_standby || engine_state == ES_flight_standby || engine_state == ES_cold_operation || engine_state == ES_DR_OS_Us || engine_state == ES_normal_stop || engine_state == ES_emergency_stop || engine_state == ES_ground_start_termination || engine_state == ES_flight_start_terminnation)
  测试用例: ES_DR_OS_Us=4.0, ES_cold_operation=3.0, ES_emergency_stop=6.0, ES_flight_standby=2.0, ES_flight_start_terminnation=8.0, ES_ground_standby=1.0, ES_ground_start_termination=7.0, ES_normal_stop=5.0, ES_origin=0.0, engine_state=4, level_default=0.0, thrust_level=0
  预期结果: True
- 条件: thrust_level == level_default && (engine_state == ES_origin || engine_state == ES_ground_standby || engine_state == ES_flight_standby || engine_state == ES_cold_operation || engine_state == ES_DR_OS_Us || engine_state == ES_normal_stop || engine_state == ES_emergency_stop || engine_state == ES_ground_start_termination || engine_state == ES_flight_start_terminnation)
  测试用例: ES_DR_OS_Us=4.0, ES_cold_operation=3.0, ES_emergency_stop=6.0, ES_flight_standby=2.0, ES_flight_start_terminnation=8.0, ES_ground_standby=1.0, ES_ground_start_termination=7.0, ES_normal_stop=5.0, ES_origin=0.0, engine_state=0, level_default=0.0, thrust_level=1
  预期结果: False
- 条件: thrust_level == level_default && (engine_state == ES_origin || engine_state == ES_ground_standby || engine_state == ES_flight_standby || engine_state == ES_cold_operation || engine_state == ES_DR_OS_Us || engine_state == ES_normal_stop || engine_state == ES_emergency_stop || engine_state == ES_ground_start_termination || engine_state == ES_flight_start_terminnation)
  测试用例: ES_DR_OS_Us=4.0, ES_cold_operation=3.0, ES_emergency_stop=6.0, ES_flight_standby=2.0, ES_flight_start_terminnation=8.0, ES_ground_standby=1.0, ES_ground_start_termination=7.0, ES_normal_stop=5.0, ES_origin=0.0, engine_state=5, level_default=0.0, thrust_level=0
  预期结果: True
- 条件: thrust_level == level_default && (engine_state == ES_origin || engine_state == ES_ground_standby || engine_state == ES_flight_standby || engine_state == ES_cold_operation || engine_state == ES_DR_OS_Us || engine_state == ES_normal_stop || engine_state == ES_emergency_stop || engine_state == ES_ground_start_termination || engine_state == ES_flight_start_terminnation)
  测试用例: ES_DR_OS_Us=4.0, ES_cold_operation=3.0, ES_emergency_stop=6.0, ES_flight_standby=2.0, ES_flight_start_terminnation=8.0, ES_ground_standby=1.0, ES_ground_start_termination=7.0, ES_normal_stop=5.0, ES_origin=0.0, engine_state=0, level_default=0.0, thrust_level=1
  预期结果: False
- 条件: thrust_level == level_default && (engine_state == ES_origin || engine_state == ES_ground_standby || engine_state == ES_flight_standby || engine_state == ES_cold_operation || engine_state == ES_DR_OS_Us || engine_state == ES_normal_stop || engine_state == ES_emergency_stop || engine_state == ES_ground_start_termination || engine_state == ES_flight_start_terminnation)
  测试用例: ES_DR_OS_Us=4.0, ES_cold_operation=3.0, ES_emergency_stop=6.0, ES_flight_standby=2.0, ES_flight_start_terminnation=8.0, ES_ground_standby=1.0, ES_ground_start_termination=7.0, ES_normal_stop=5.0, ES_origin=0.0, engine_state=6, level_default=0.0, thrust_level=0
  预期结果: True
- 条件: thrust_level == level_default && (engine_state == ES_origin || engine_state == ES_ground_standby || engine_state == ES_flight_standby || engine_state == ES_cold_operation || engine_state == ES_DR_OS_Us || engine_state == ES_normal_stop || engine_state == ES_emergency_stop || engine_state == ES_ground_start_termination || engine_state == ES_flight_start_terminnation)
  测试用例: ES_DR_OS_Us=4.0, ES_cold_operation=3.0, ES_emergency_stop=6.0, ES_flight_standby=2.0, ES_flight_start_terminnation=8.0, ES_ground_standby=1.0, ES_ground_start_termination=7.0, ES_normal_stop=5.0, ES_origin=0.0, engine_state=0, level_default=0.0, thrust_level=1
  预期结果: False
- 条件: thrust_level == level_default && (engine_state == ES_origin || engine_state == ES_ground_standby || engine_state == ES_flight_standby || engine_state == ES_cold_operation || engine_state == ES_DR_OS_Us || engine_state == ES_normal_stop || engine_state == ES_emergency_stop || engine_state == ES_ground_start_termination || engine_state == ES_flight_start_terminnation)
  测试用例: ES_DR_OS_Us=4.0, ES_cold_operation=3.0, ES_emergency_stop=6.0, ES_flight_standby=2.0, ES_flight_start_terminnation=8.0, ES_ground_standby=1.0, ES_ground_start_termination=7.0, ES_normal_stop=5.0, ES_origin=0.0, engine_state=7, level_default=0.0, thrust_level=0
  预期结果: True
- 条件: thrust_level == level_default && (engine_state == ES_origin || engine_state == ES_ground_standby || engine_state == ES_flight_standby || engine_state == ES_cold_operation || engine_state == ES_DR_OS_Us || engine_state == ES_normal_stop || engine_state == ES_emergency_stop || engine_state == ES_ground_start_termination || engine_state == ES_flight_start_terminnation)
  测试用例: ES_DR_OS_Us=4.0, ES_cold_operation=3.0, ES_emergency_stop=6.0, ES_flight_standby=2.0, ES_flight_start_terminnation=8.0, ES_ground_standby=1.0, ES_ground_start_termination=7.0, ES_normal_stop=5.0, ES_origin=0.0, engine_state=0, level_default=0.0, thrust_level=1
  预期结果: False
- 条件: thrust_level == level_default && (engine_state == ES_origin || engine_state == ES_ground_standby || engine_state == ES_flight_standby || engine_state == ES_cold_operation || engine_state == ES_DR_OS_Us || engine_state == ES_normal_stop || engine_state == ES_emergency_stop || engine_state == ES_ground_start_termination || engine_state == ES_flight_start_terminnation)
  测试用例: ES_DR_OS_Us=4.0, ES_cold_operation=3.0, ES_emergency_stop=6.0, ES_flight_standby=2.0, ES_flight_start_terminnation=8.0, ES_ground_standby=1.0, ES_ground_start_termination=7.0, ES_normal_stop=5.0, ES_origin=0.0, engine_state=8, level_default=0.0, thrust_level=0
  预期结果: True
- 条件: thrust_level == level_default && (engine_state == ES_origin || engine_state == ES_ground_standby || engine_state == ES_flight_standby || engine_state == ES_cold_operation || engine_state == ES_DR_OS_Us || engine_state == ES_normal_stop || engine_state == ES_emergency_stop || engine_state == ES_ground_start_termination || engine_state == ES_flight_start_terminnation)
  测试用例: ES_DR_OS_Us=4.0, ES_cold_operation=3.0, ES_emergency_stop=6.0, ES_flight_standby=2.0, ES_flight_start_terminnation=8.0, ES_ground_standby=1.0, ES_ground_start_termination=7.0, ES_normal_stop=5.0, ES_origin=0.0, engine_state=0, level_default=0.0, thrust_level=1
  预期结果: False

==================================================
处理模块: N1公差修正量计算
模块中没有if语句，跳过

==================================================
处理模块: N1R控制量N1RDem计算（推力等级为无指定推力等级、最大反推、反推、反推慢车、地面慢车、空中慢车、进近慢车、巡航、最大巡航、最大推力）
提取到的if条件: ['thrust_level == level_default || thrust_level == level_MREV || thrust_level == level_REV || thrust_level == level_RI || thrust_level == level_GI || thrust_level == level_FI || thrust_level == level_AI || thrust_level == level_CR || thrust_level == level_MCR || thrust_level == level_MAX']

处理条件 1: thrust_level == level_default || thrust_level == level_MREV || thrust_level == level_REV || thrust_level == level_RI || thrust_level == level_GI || thrust_level == level_FI || thrust_level == level_AI || thrust_level == level_CR || thrust_level == level_MCR || thrust_level == level_MAX
解析后的Python条件表达式: thrust_level == level_default or thrust_level == level_MREV or thrust_level == level_REV or thrust_level == level_RI or thrust_level == level_GI or thrust_level == level_FI or thrust_level == level_AI or thrust_level == level_CR or thrust_level == level_MCR or thrust_level == level_MAX
变量及其范围: [{'name': 'level_MAX', 'min_value': 22.0, 'max_value': 22.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_MAX', 'constant_value': 22.0}, {'name': 'level_default', 'min_value': 0.0, 'max_value': 0.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_default', 'constant_value': 0.0}, {'name': 'level_MCR', 'min_value': 8.0, 'max_value': 8.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_MCR', 'constant_value': 8.0}, {'name': 'thrust_level', 'min_value': 0.0, 'max_value': 23.0, 'var_type': 'int', 'is_last': False, 'original_var': 'thrust_level'}, {'name': 'level_RI', 'min_value': 3.0, 'max_value': 3.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_RI', 'constant_value': 3.0}, {'name': 'level_AI', 'min_value': 6.0, 'max_value': 6.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_AI', 'constant_value': 6.0}, {'name': 'level_CR', 'min_value': 7.0, 'max_value': 7.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_CR', 'constant_value': 7.0}, {'name': 'level_MREV', 'min_value': 1.0, 'max_value': 1.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_MREV', 'constant_value': 1.0}, {'name': 'level_REV', 'min_value': 2.0, 'max_value': 2.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_REV', 'constant_value': 2.0}, {'name': 'level_GI', 'min_value': 4.0, 'max_value': 4.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_GI', 'constant_value': 4.0}, {'name': 'level_FI', 'min_value': 5.0, 'max_value': 5.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_FI', 'constant_value': 5.0}]
解析后的条件: thrust_level == level_default or thrust_level == level_MREV or thrust_level == level_REV or thrust_level == level_RI or thrust_level == level_GI or thrust_level == level_FI or thrust_level == level_AI or thrust_level == level_CR or thrust_level == level_MCR or thrust_level == level_MAX
识别到的变量: [{'name': 'level_MAX', 'min_value': 22.0, 'max_value': 22.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_MAX', 'constant_value': 22.0}, {'name': 'level_default', 'min_value': 0.0, 'max_value': 0.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_default', 'constant_value': 0.0}, {'name': 'level_MCR', 'min_value': 8.0, 'max_value': 8.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_MCR', 'constant_value': 8.0}, {'name': 'thrust_level', 'min_value': 0.0, 'max_value': 23.0, 'var_type': 'int', 'is_last': False, 'original_var': 'thrust_level'}, {'name': 'level_RI', 'min_value': 3.0, 'max_value': 3.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_RI', 'constant_value': 3.0}, {'name': 'level_AI', 'min_value': 6.0, 'max_value': 6.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_AI', 'constant_value': 6.0}, {'name': 'level_CR', 'min_value': 7.0, 'max_value': 7.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_CR', 'constant_value': 7.0}, {'name': 'level_MREV', 'min_value': 1.0, 'max_value': 1.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_MREV', 'constant_value': 1.0}, {'name': 'level_REV', 'min_value': 2.0, 'max_value': 2.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_REV', 'constant_value': 2.0}, {'name': 'level_GI', 'min_value': 4.0, 'max_value': 4.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_GI', 'constant_value': 4.0}, {'name': 'level_FI', 'min_value': 5.0, 'max_value': 5.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_FI', 'constant_value': 5.0}]
处理的变量: ['level_MAX', 'level_default', 'level_MCR', 'thrust_level', 'level_RI', 'level_AI', 'level_CR', 'level_MREV', 'level_REV', 'level_GI', 'level_FI']
预处理后的条件: thrust_level == level_default or thrust_level == level_MREV or thrust_level == level_REV or thrust_level == level_RI or thrust_level == level_GI or thrust_level == level_FI or thrust_level == level_AI or thrust_level == level_CR or thrust_level == level_MCR or thrust_level == level_MAX
提取的原子条件: [('thrust_level', '==', 'level_default'), ('thrust_level', '==', 'level_MREV'), ('thrust_level', '==', 'level_REV'), ('thrust_level', '==', 'level_RI'), ('thrust_level', '==', 'level_GI'), ('thrust_level', '==', 'level_FI'), ('thrust_level', '==', 'level_AI'), ('thrust_level', '==', 'level_CR'), ('thrust_level', '==', 'level_MCR'), ('thrust_level', '==', 'level_MAX')]
表达式结构: {'OR_EXPR_0': ('or', ['ATOM_0', 'ATOM_1', 'ATOM_2', 'ATOM_3', 'ATOM_4', 'ATOM_5', 'ATOM_6', 'ATOM_7', 'ATOM_8', 'ATOM_9'])}
根表达式: OR_EXPR_0
构建的Z3表达式: Or(0 == thrust_level,
   1 == thrust_level,
   2 == thrust_level,
   3 == thrust_level,
   4 == thrust_level,
   5 == thrust_level,
   6 == thrust_level,
   7 == thrust_level,
   8 == thrust_level,
   22 == thrust_level)
为原子条件 'thrust_level == level_default' 生成MCDC测试用例
为原子条件 'thrust_level == level_MREV' 生成MCDC测试用例
为原子条件 'thrust_level == level_REV' 生成MCDC测试用例
为原子条件 'thrust_level == level_RI' 生成MCDC测试用例
为原子条件 'thrust_level == level_GI' 生成MCDC测试用例
为原子条件 'thrust_level == level_FI' 生成MCDC测试用例
为原子条件 'thrust_level == level_AI' 生成MCDC测试用例
为原子条件 'thrust_level == level_CR' 生成MCDC测试用例
为原子条件 'thrust_level == level_MCR' 生成MCDC测试用例
为原子条件 'thrust_level == level_MAX' 生成MCDC测试用例
生成的MCDC条件数量: 10
生成的MCDC条件数量: 10

生成的测试用例:
- 条件: thrust_level == level_default || thrust_level == level_MREV || thrust_level == level_REV || thrust_level == level_RI || thrust_level == level_GI || thrust_level == level_FI || thrust_level == level_AI || thrust_level == level_CR || thrust_level == level_MCR || thrust_level == level_MAX
  测试用例: level_AI=6.0, level_CR=7.0, level_FI=5.0, level_GI=4.0, level_MAX=22.0, level_MCR=8.0, level_MREV=1.0, level_REV=2.0, level_RI=3.0, level_default=0.0, thrust_level=0
  预期结果: True
- 条件: thrust_level == level_default || thrust_level == level_MREV || thrust_level == level_REV || thrust_level == level_RI || thrust_level == level_GI || thrust_level == level_FI || thrust_level == level_AI || thrust_level == level_CR || thrust_level == level_MCR || thrust_level == level_MAX
  测试用例: level_AI=6.0, level_CR=7.0, level_FI=5.0, level_GI=4.0, level_MAX=22.0, level_MCR=8.0, level_MREV=1.0, level_REV=2.0, level_RI=3.0, level_default=0.0, thrust_level=9
  预期结果: False
- 条件: thrust_level == level_default || thrust_level == level_MREV || thrust_level == level_REV || thrust_level == level_RI || thrust_level == level_GI || thrust_level == level_FI || thrust_level == level_AI || thrust_level == level_CR || thrust_level == level_MCR || thrust_level == level_MAX
  测试用例: level_AI=6.0, level_CR=7.0, level_FI=5.0, level_GI=4.0, level_MAX=22.0, level_MCR=8.0, level_MREV=1.0, level_REV=2.0, level_RI=3.0, level_default=0.0, thrust_level=1
  预期结果: True
- 条件: thrust_level == level_default || thrust_level == level_MREV || thrust_level == level_REV || thrust_level == level_RI || thrust_level == level_GI || thrust_level == level_FI || thrust_level == level_AI || thrust_level == level_CR || thrust_level == level_MCR || thrust_level == level_MAX
  测试用例: level_AI=6.0, level_CR=7.0, level_FI=5.0, level_GI=4.0, level_MAX=22.0, level_MCR=8.0, level_MREV=1.0, level_REV=2.0, level_RI=3.0, level_default=0.0, thrust_level=9
  预期结果: False
- 条件: thrust_level == level_default || thrust_level == level_MREV || thrust_level == level_REV || thrust_level == level_RI || thrust_level == level_GI || thrust_level == level_FI || thrust_level == level_AI || thrust_level == level_CR || thrust_level == level_MCR || thrust_level == level_MAX
  测试用例: level_AI=6.0, level_CR=7.0, level_FI=5.0, level_GI=4.0, level_MAX=22.0, level_MCR=8.0, level_MREV=1.0, level_REV=2.0, level_RI=3.0, level_default=0.0, thrust_level=2
  预期结果: True
- 条件: thrust_level == level_default || thrust_level == level_MREV || thrust_level == level_REV || thrust_level == level_RI || thrust_level == level_GI || thrust_level == level_FI || thrust_level == level_AI || thrust_level == level_CR || thrust_level == level_MCR || thrust_level == level_MAX
  测试用例: level_AI=6.0, level_CR=7.0, level_FI=5.0, level_GI=4.0, level_MAX=22.0, level_MCR=8.0, level_MREV=1.0, level_REV=2.0, level_RI=3.0, level_default=0.0, thrust_level=9
  预期结果: False
- 条件: thrust_level == level_default || thrust_level == level_MREV || thrust_level == level_REV || thrust_level == level_RI || thrust_level == level_GI || thrust_level == level_FI || thrust_level == level_AI || thrust_level == level_CR || thrust_level == level_MCR || thrust_level == level_MAX
  测试用例: level_AI=6.0, level_CR=7.0, level_FI=5.0, level_GI=4.0, level_MAX=22.0, level_MCR=8.0, level_MREV=1.0, level_REV=2.0, level_RI=3.0, level_default=0.0, thrust_level=3
  预期结果: True
- 条件: thrust_level == level_default || thrust_level == level_MREV || thrust_level == level_REV || thrust_level == level_RI || thrust_level == level_GI || thrust_level == level_FI || thrust_level == level_AI || thrust_level == level_CR || thrust_level == level_MCR || thrust_level == level_MAX
  测试用例: level_AI=6.0, level_CR=7.0, level_FI=5.0, level_GI=4.0, level_MAX=22.0, level_MCR=8.0, level_MREV=1.0, level_REV=2.0, level_RI=3.0, level_default=0.0, thrust_level=9
  预期结果: False
- 条件: thrust_level == level_default || thrust_level == level_MREV || thrust_level == level_REV || thrust_level == level_RI || thrust_level == level_GI || thrust_level == level_FI || thrust_level == level_AI || thrust_level == level_CR || thrust_level == level_MCR || thrust_level == level_MAX
  测试用例: level_AI=6.0, level_CR=7.0, level_FI=5.0, level_GI=4.0, level_MAX=22.0, level_MCR=8.0, level_MREV=1.0, level_REV=2.0, level_RI=3.0, level_default=0.0, thrust_level=4
  预期结果: True
- 条件: thrust_level == level_default || thrust_level == level_MREV || thrust_level == level_REV || thrust_level == level_RI || thrust_level == level_GI || thrust_level == level_FI || thrust_level == level_AI || thrust_level == level_CR || thrust_level == level_MCR || thrust_level == level_MAX
  测试用例: level_AI=6.0, level_CR=7.0, level_FI=5.0, level_GI=4.0, level_MAX=22.0, level_MCR=8.0, level_MREV=1.0, level_REV=2.0, level_RI=3.0, level_default=0.0, thrust_level=9
  预期结果: False
- 条件: thrust_level == level_default || thrust_level == level_MREV || thrust_level == level_REV || thrust_level == level_RI || thrust_level == level_GI || thrust_level == level_FI || thrust_level == level_AI || thrust_level == level_CR || thrust_level == level_MCR || thrust_level == level_MAX
  测试用例: level_AI=6.0, level_CR=7.0, level_FI=5.0, level_GI=4.0, level_MAX=22.0, level_MCR=8.0, level_MREV=1.0, level_REV=2.0, level_RI=3.0, level_default=0.0, thrust_level=5
  预期结果: True
- 条件: thrust_level == level_default || thrust_level == level_MREV || thrust_level == level_REV || thrust_level == level_RI || thrust_level == level_GI || thrust_level == level_FI || thrust_level == level_AI || thrust_level == level_CR || thrust_level == level_MCR || thrust_level == level_MAX
  测试用例: level_AI=6.0, level_CR=7.0, level_FI=5.0, level_GI=4.0, level_MAX=22.0, level_MCR=8.0, level_MREV=1.0, level_REV=2.0, level_RI=3.0, level_default=0.0, thrust_level=9
  预期结果: False
- 条件: thrust_level == level_default || thrust_level == level_MREV || thrust_level == level_REV || thrust_level == level_RI || thrust_level == level_GI || thrust_level == level_FI || thrust_level == level_AI || thrust_level == level_CR || thrust_level == level_MCR || thrust_level == level_MAX
  测试用例: level_AI=6.0, level_CR=7.0, level_FI=5.0, level_GI=4.0, level_MAX=22.0, level_MCR=8.0, level_MREV=1.0, level_REV=2.0, level_RI=3.0, level_default=0.0, thrust_level=6
  预期结果: True
- 条件: thrust_level == level_default || thrust_level == level_MREV || thrust_level == level_REV || thrust_level == level_RI || thrust_level == level_GI || thrust_level == level_FI || thrust_level == level_AI || thrust_level == level_CR || thrust_level == level_MCR || thrust_level == level_MAX
  测试用例: level_AI=6.0, level_CR=7.0, level_FI=5.0, level_GI=4.0, level_MAX=22.0, level_MCR=8.0, level_MREV=1.0, level_REV=2.0, level_RI=3.0, level_default=0.0, thrust_level=9
  预期结果: False
- 条件: thrust_level == level_default || thrust_level == level_MREV || thrust_level == level_REV || thrust_level == level_RI || thrust_level == level_GI || thrust_level == level_FI || thrust_level == level_AI || thrust_level == level_CR || thrust_level == level_MCR || thrust_level == level_MAX
  测试用例: level_AI=6.0, level_CR=7.0, level_FI=5.0, level_GI=4.0, level_MAX=22.0, level_MCR=8.0, level_MREV=1.0, level_REV=2.0, level_RI=3.0, level_default=0.0, thrust_level=7
  预期结果: True
- 条件: thrust_level == level_default || thrust_level == level_MREV || thrust_level == level_REV || thrust_level == level_RI || thrust_level == level_GI || thrust_level == level_FI || thrust_level == level_AI || thrust_level == level_CR || thrust_level == level_MCR || thrust_level == level_MAX
  测试用例: level_AI=6.0, level_CR=7.0, level_FI=5.0, level_GI=4.0, level_MAX=22.0, level_MCR=8.0, level_MREV=1.0, level_REV=2.0, level_RI=3.0, level_default=0.0, thrust_level=9
  预期结果: False
- 条件: thrust_level == level_default || thrust_level == level_MREV || thrust_level == level_REV || thrust_level == level_RI || thrust_level == level_GI || thrust_level == level_FI || thrust_level == level_AI || thrust_level == level_CR || thrust_level == level_MCR || thrust_level == level_MAX
  测试用例: level_AI=6.0, level_CR=7.0, level_FI=5.0, level_GI=4.0, level_MAX=22.0, level_MCR=8.0, level_MREV=1.0, level_REV=2.0, level_RI=3.0, level_default=0.0, thrust_level=8
  预期结果: True
- 条件: thrust_level == level_default || thrust_level == level_MREV || thrust_level == level_REV || thrust_level == level_RI || thrust_level == level_GI || thrust_level == level_FI || thrust_level == level_AI || thrust_level == level_CR || thrust_level == level_MCR || thrust_level == level_MAX
  测试用例: level_AI=6.0, level_CR=7.0, level_FI=5.0, level_GI=4.0, level_MAX=22.0, level_MCR=8.0, level_MREV=1.0, level_REV=2.0, level_RI=3.0, level_default=0.0, thrust_level=9
  预期结果: False
- 条件: thrust_level == level_default || thrust_level == level_MREV || thrust_level == level_REV || thrust_level == level_RI || thrust_level == level_GI || thrust_level == level_FI || thrust_level == level_AI || thrust_level == level_CR || thrust_level == level_MCR || thrust_level == level_MAX
  测试用例: level_AI=6.0, level_CR=7.0, level_FI=5.0, level_GI=4.0, level_MAX=22.0, level_MCR=8.0, level_MREV=1.0, level_REV=2.0, level_RI=3.0, level_default=0.0, thrust_level=22
  预期结果: True
- 条件: thrust_level == level_default || thrust_level == level_MREV || thrust_level == level_REV || thrust_level == level_RI || thrust_level == level_GI || thrust_level == level_FI || thrust_level == level_AI || thrust_level == level_CR || thrust_level == level_MCR || thrust_level == level_MAX
  测试用例: level_AI=6.0, level_CR=7.0, level_FI=5.0, level_GI=4.0, level_MAX=22.0, level_MCR=8.0, level_MREV=1.0, level_REV=2.0, level_RI=3.0, level_default=0.0, thrust_level=21
  预期结果: False

==================================================
处理模块: N1R控制量N1RDem计算（推力等级为最大爬升、减推力爬升1、减推力爬升2、连续、最大连续、起飞、最大起飞、减推力起飞1、减推力起飞2、复飞、增推力起飞、灵活起飞）
提取到的if条件: ['thrust_level == level_MCL || thrust_level == level_DCL1 || thrust_level == level_DCL2 || thrust_level == level_CT || thrust_level == level_MCT || thrust_level == level_TO || thrust_level == level_MTO || thrust_level == level_DTO1 || thrust_level == level_DTO2 || thrust_level == level_GA || thrust_level == level_Bump || thrust_level == level_FLEXTO']

处理条件 1: thrust_level == level_MCL || thrust_level == level_DCL1 || thrust_level == level_DCL2 || thrust_level == level_CT || thrust_level == level_MCT || thrust_level == level_TO || thrust_level == level_MTO || thrust_level == level_DTO1 || thrust_level == level_DTO2 || thrust_level == level_GA || thrust_level == level_Bump || thrust_level == level_FLEXTO
解析后的Python条件表达式: thrust_level == level_MCL or thrust_level == level_DCL1 or thrust_level == level_DCL2 or thrust_level == level_CT or thrust_level == level_MCT or thrust_level == level_TO or thrust_level == level_MTO or thrust_level == level_DTO1 or thrust_level == level_DTO2 or thrust_level == level_GA or thrust_level == level_Bump or thrust_level == level_FLEXTO
变量及其范围: [{'name': 'level_TO', 'min_value': 15.0, 'max_value': 15.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_TO', 'constant_value': 15.0}, {'name': 'level_DTO2', 'min_value': 18.0, 'max_value': 18.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_DTO2', 'constant_value': 18.0}, {'name': 'level_MCT', 'min_value': 14.0, 'max_value': 14.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_MCT', 'constant_value': 14.0}, {'name': 'level_MTO', 'min_value': 16.0, 'max_value': 16.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_MTO', 'constant_value': 16.0}, {'name': 'level_MCL', 'min_value': 10.0, 'max_value': 10.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_MCL', 'constant_value': 10.0}, {'name': 'level_DCL1', 'min_value': 11.0, 'max_value': 11.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_DCL1', 'constant_value': 11.0}, {'name': 'thrust_level', 'min_value': 0.0, 'max_value': 23.0, 'var_type': 'int', 'is_last': False, 'original_var': 'thrust_level'}, {'name': 'level_DCL2', 'min_value': 12.0, 'max_value': 12.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_DCL2', 'constant_value': 12.0}, {'name': 'level_DTO1', 'min_value': 17.0, 'max_value': 17.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_DTO1', 'constant_value': 17.0}, {'name': 'level_FLEXTO', 'min_value': 20.0, 'max_value': 20.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_FLEXTO', 'constant_value': 20.0}, {'name': 'level_CT', 'min_value': 13.0, 'max_value': 13.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_CT', 'constant_value': 13.0}, {'name': 'level_Bump', 'min_value': 19.0, 'max_value': 19.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_Bump', 'constant_value': 19.0}, {'name': 'level_GA', 'min_value': 21.0, 'max_value': 21.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_GA', 'constant_value': 21.0}]
解析后的条件: thrust_level == level_MCL or thrust_level == level_DCL1 or thrust_level == level_DCL2 or thrust_level == level_CT or thrust_level == level_MCT or thrust_level == level_TO or thrust_level == level_MTO or thrust_level == level_DTO1 or thrust_level == level_DTO2 or thrust_level == level_GA or thrust_level == level_Bump or thrust_level == level_FLEXTO
识别到的变量: [{'name': 'level_TO', 'min_value': 15.0, 'max_value': 15.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_TO', 'constant_value': 15.0}, {'name': 'level_DTO2', 'min_value': 18.0, 'max_value': 18.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_DTO2', 'constant_value': 18.0}, {'name': 'level_MCT', 'min_value': 14.0, 'max_value': 14.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_MCT', 'constant_value': 14.0}, {'name': 'level_MTO', 'min_value': 16.0, 'max_value': 16.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_MTO', 'constant_value': 16.0}, {'name': 'level_MCL', 'min_value': 10.0, 'max_value': 10.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_MCL', 'constant_value': 10.0}, {'name': 'level_DCL1', 'min_value': 11.0, 'max_value': 11.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_DCL1', 'constant_value': 11.0}, {'name': 'thrust_level', 'min_value': 0.0, 'max_value': 23.0, 'var_type': 'int', 'is_last': False, 'original_var': 'thrust_level'}, {'name': 'level_DCL2', 'min_value': 12.0, 'max_value': 12.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_DCL2', 'constant_value': 12.0}, {'name': 'level_DTO1', 'min_value': 17.0, 'max_value': 17.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_DTO1', 'constant_value': 17.0}, {'name': 'level_FLEXTO', 'min_value': 20.0, 'max_value': 20.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_FLEXTO', 'constant_value': 20.0}, {'name': 'level_CT', 'min_value': 13.0, 'max_value': 13.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_CT', 'constant_value': 13.0}, {'name': 'level_Bump', 'min_value': 19.0, 'max_value': 19.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_Bump', 'constant_value': 19.0}, {'name': 'level_GA', 'min_value': 21.0, 'max_value': 21.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_GA', 'constant_value': 21.0}]
处理的变量: ['level_TO', 'level_DTO2', 'level_MCT', 'level_MTO', 'level_MCL', 'level_DCL1', 'thrust_level', 'level_DCL2', 'level_DTO1', 'level_FLEXTO', 'level_CT', 'level_Bump', 'level_GA']
预处理后的条件: thrust_level == level_MCL or thrust_level == level_DCL1 or thrust_level == level_DCL2 or thrust_level == level_CT or thrust_level == level_MCT or thrust_level == level_TO or thrust_level == level_MTO or thrust_level == level_DTO1 or thrust_level == level_DTO2 or thrust_level == level_GA or thrust_level == level_Bump or thrust_level == level_FLEXTO
提取的原子条件: [('thrust_level', '==', 'level_MCL'), ('thrust_level', '==', 'level_DCL1'), ('thrust_level', '==', 'level_DCL2'), ('thrust_level', '==', 'level_CT'), ('thrust_level', '==', 'level_MCT'), ('thrust_level', '==', 'level_TO'), ('thrust_level', '==', 'level_MTO'), ('thrust_level', '==', 'level_DTO1'), ('thrust_level', '==', 'level_DTO2'), ('thrust_level', '==', 'level_GA'), ('thrust_level', '==', 'level_Bump'), ('thrust_level', '==', 'level_FLEXTO')]
表达式结构: {'OR_EXPR_0': ('or', ['ATOM_0', 'ATOM_1', 'ATOM_2', 'ATOM_3', 'ATOM_4', 'ATOM_5', 'ATOM_6', 'ATOM_7', 'ATOM_8', 'ATOM_9', 'ATOM_10', 'ATOM_11'])}
根表达式: OR_EXPR_0
构建的Z3表达式: Or(10 == thrust_level,
   11 == thrust_level,
   12 == thrust_level,
   13 == thrust_level,
   14 == thrust_level,
   15 == thrust_level,
   16 == thrust_level,
   17 == thrust_level,
   18 == thrust_level,
   21 == thrust_level,
   19 == thrust_level,
   20 == thrust_level)
为原子条件 'thrust_level == level_MCL' 生成MCDC测试用例
为原子条件 'thrust_level == level_DCL1' 生成MCDC测试用例
为原子条件 'thrust_level == level_DCL2' 生成MCDC测试用例
为原子条件 'thrust_level == level_CT' 生成MCDC测试用例
为原子条件 'thrust_level == level_MCT' 生成MCDC测试用例
为原子条件 'thrust_level == level_TO' 生成MCDC测试用例
为原子条件 'thrust_level == level_MTO' 生成MCDC测试用例
为原子条件 'thrust_level == level_DTO1' 生成MCDC测试用例
为原子条件 'thrust_level == level_DTO2' 生成MCDC测试用例
为原子条件 'thrust_level == level_GA' 生成MCDC测试用例
为原子条件 'thrust_level == level_Bump' 生成MCDC测试用例
为原子条件 'thrust_level == level_FLEXTO' 生成MCDC测试用例
生成的MCDC条件数量: 12
生成的MCDC条件数量: 12

生成的测试用例:
- 条件: thrust_level == level_MCL || thrust_level == level_DCL1 || thrust_level == level_DCL2 || thrust_level == level_CT || thrust_level == level_MCT || thrust_level == level_TO || thrust_level == level_MTO || thrust_level == level_DTO1 || thrust_level == level_DTO2 || thrust_level == level_GA || thrust_level == level_Bump || thrust_level == level_FLEXTO
  测试用例: level_Bump=19.0, level_CT=13.0, level_DCL1=11.0, level_DCL2=12.0, level_DTO1=17.0, level_DTO2=18.0, level_FLEXTO=20.0, level_GA=21.0, level_MCL=10.0, level_MCT=14.0, level_MTO=16.0, level_TO=15.0, thrust_level=10
  预期结果: True
- 条件: thrust_level == level_MCL || thrust_level == level_DCL1 || thrust_level == level_DCL2 || thrust_level == level_CT || thrust_level == level_MCT || thrust_level == level_TO || thrust_level == level_MTO || thrust_level == level_DTO1 || thrust_level == level_DTO2 || thrust_level == level_GA || thrust_level == level_Bump || thrust_level == level_FLEXTO
  测试用例: level_Bump=19.0, level_CT=13.0, level_DCL1=11.0, level_DCL2=12.0, level_DTO1=17.0, level_DTO2=18.0, level_FLEXTO=20.0, level_GA=21.0, level_MCL=10.0, level_MCT=14.0, level_MTO=16.0, level_TO=15.0, thrust_level=9
  预期结果: False
- 条件: thrust_level == level_MCL || thrust_level == level_DCL1 || thrust_level == level_DCL2 || thrust_level == level_CT || thrust_level == level_MCT || thrust_level == level_TO || thrust_level == level_MTO || thrust_level == level_DTO1 || thrust_level == level_DTO2 || thrust_level == level_GA || thrust_level == level_Bump || thrust_level == level_FLEXTO
  测试用例: level_Bump=19.0, level_CT=13.0, level_DCL1=11.0, level_DCL2=12.0, level_DTO1=17.0, level_DTO2=18.0, level_FLEXTO=20.0, level_GA=21.0, level_MCL=10.0, level_MCT=14.0, level_MTO=16.0, level_TO=15.0, thrust_level=11
  预期结果: True
- 条件: thrust_level == level_MCL || thrust_level == level_DCL1 || thrust_level == level_DCL2 || thrust_level == level_CT || thrust_level == level_MCT || thrust_level == level_TO || thrust_level == level_MTO || thrust_level == level_DTO1 || thrust_level == level_DTO2 || thrust_level == level_GA || thrust_level == level_Bump || thrust_level == level_FLEXTO
  测试用例: level_Bump=19.0, level_CT=13.0, level_DCL1=11.0, level_DCL2=12.0, level_DTO1=17.0, level_DTO2=18.0, level_FLEXTO=20.0, level_GA=21.0, level_MCL=10.0, level_MCT=14.0, level_MTO=16.0, level_TO=15.0, thrust_level=9
  预期结果: False
- 条件: thrust_level == level_MCL || thrust_level == level_DCL1 || thrust_level == level_DCL2 || thrust_level == level_CT || thrust_level == level_MCT || thrust_level == level_TO || thrust_level == level_MTO || thrust_level == level_DTO1 || thrust_level == level_DTO2 || thrust_level == level_GA || thrust_level == level_Bump || thrust_level == level_FLEXTO
  测试用例: level_Bump=19.0, level_CT=13.0, level_DCL1=11.0, level_DCL2=12.0, level_DTO1=17.0, level_DTO2=18.0, level_FLEXTO=20.0, level_GA=21.0, level_MCL=10.0, level_MCT=14.0, level_MTO=16.0, level_TO=15.0, thrust_level=12
  预期结果: True
- 条件: thrust_level == level_MCL || thrust_level == level_DCL1 || thrust_level == level_DCL2 || thrust_level == level_CT || thrust_level == level_MCT || thrust_level == level_TO || thrust_level == level_MTO || thrust_level == level_DTO1 || thrust_level == level_DTO2 || thrust_level == level_GA || thrust_level == level_Bump || thrust_level == level_FLEXTO
  测试用例: level_Bump=19.0, level_CT=13.0, level_DCL1=11.0, level_DCL2=12.0, level_DTO1=17.0, level_DTO2=18.0, level_FLEXTO=20.0, level_GA=21.0, level_MCL=10.0, level_MCT=14.0, level_MTO=16.0, level_TO=15.0, thrust_level=9
  预期结果: False
- 条件: thrust_level == level_MCL || thrust_level == level_DCL1 || thrust_level == level_DCL2 || thrust_level == level_CT || thrust_level == level_MCT || thrust_level == level_TO || thrust_level == level_MTO || thrust_level == level_DTO1 || thrust_level == level_DTO2 || thrust_level == level_GA || thrust_level == level_Bump || thrust_level == level_FLEXTO
  测试用例: level_Bump=19.0, level_CT=13.0, level_DCL1=11.0, level_DCL2=12.0, level_DTO1=17.0, level_DTO2=18.0, level_FLEXTO=20.0, level_GA=21.0, level_MCL=10.0, level_MCT=14.0, level_MTO=16.0, level_TO=15.0, thrust_level=13
  预期结果: True
- 条件: thrust_level == level_MCL || thrust_level == level_DCL1 || thrust_level == level_DCL2 || thrust_level == level_CT || thrust_level == level_MCT || thrust_level == level_TO || thrust_level == level_MTO || thrust_level == level_DTO1 || thrust_level == level_DTO2 || thrust_level == level_GA || thrust_level == level_Bump || thrust_level == level_FLEXTO
  测试用例: level_Bump=19.0, level_CT=13.0, level_DCL1=11.0, level_DCL2=12.0, level_DTO1=17.0, level_DTO2=18.0, level_FLEXTO=20.0, level_GA=21.0, level_MCL=10.0, level_MCT=14.0, level_MTO=16.0, level_TO=15.0, thrust_level=9
  预期结果: False
- 条件: thrust_level == level_MCL || thrust_level == level_DCL1 || thrust_level == level_DCL2 || thrust_level == level_CT || thrust_level == level_MCT || thrust_level == level_TO || thrust_level == level_MTO || thrust_level == level_DTO1 || thrust_level == level_DTO2 || thrust_level == level_GA || thrust_level == level_Bump || thrust_level == level_FLEXTO
  测试用例: level_Bump=19.0, level_CT=13.0, level_DCL1=11.0, level_DCL2=12.0, level_DTO1=17.0, level_DTO2=18.0, level_FLEXTO=20.0, level_GA=21.0, level_MCL=10.0, level_MCT=14.0, level_MTO=16.0, level_TO=15.0, thrust_level=14
  预期结果: True
- 条件: thrust_level == level_MCL || thrust_level == level_DCL1 || thrust_level == level_DCL2 || thrust_level == level_CT || thrust_level == level_MCT || thrust_level == level_TO || thrust_level == level_MTO || thrust_level == level_DTO1 || thrust_level == level_DTO2 || thrust_level == level_GA || thrust_level == level_Bump || thrust_level == level_FLEXTO
  测试用例: level_Bump=19.0, level_CT=13.0, level_DCL1=11.0, level_DCL2=12.0, level_DTO1=17.0, level_DTO2=18.0, level_FLEXTO=20.0, level_GA=21.0, level_MCL=10.0, level_MCT=14.0, level_MTO=16.0, level_TO=15.0, thrust_level=9
  预期结果: False
- 条件: thrust_level == level_MCL || thrust_level == level_DCL1 || thrust_level == level_DCL2 || thrust_level == level_CT || thrust_level == level_MCT || thrust_level == level_TO || thrust_level == level_MTO || thrust_level == level_DTO1 || thrust_level == level_DTO2 || thrust_level == level_GA || thrust_level == level_Bump || thrust_level == level_FLEXTO
  测试用例: level_Bump=19.0, level_CT=13.0, level_DCL1=11.0, level_DCL2=12.0, level_DTO1=17.0, level_DTO2=18.0, level_FLEXTO=20.0, level_GA=21.0, level_MCL=10.0, level_MCT=14.0, level_MTO=16.0, level_TO=15.0, thrust_level=15
  预期结果: True
- 条件: thrust_level == level_MCL || thrust_level == level_DCL1 || thrust_level == level_DCL2 || thrust_level == level_CT || thrust_level == level_MCT || thrust_level == level_TO || thrust_level == level_MTO || thrust_level == level_DTO1 || thrust_level == level_DTO2 || thrust_level == level_GA || thrust_level == level_Bump || thrust_level == level_FLEXTO
  测试用例: level_Bump=19.0, level_CT=13.0, level_DCL1=11.0, level_DCL2=12.0, level_DTO1=17.0, level_DTO2=18.0, level_FLEXTO=20.0, level_GA=21.0, level_MCL=10.0, level_MCT=14.0, level_MTO=16.0, level_TO=15.0, thrust_level=9
  预期结果: False
- 条件: thrust_level == level_MCL || thrust_level == level_DCL1 || thrust_level == level_DCL2 || thrust_level == level_CT || thrust_level == level_MCT || thrust_level == level_TO || thrust_level == level_MTO || thrust_level == level_DTO1 || thrust_level == level_DTO2 || thrust_level == level_GA || thrust_level == level_Bump || thrust_level == level_FLEXTO
  测试用例: level_Bump=19.0, level_CT=13.0, level_DCL1=11.0, level_DCL2=12.0, level_DTO1=17.0, level_DTO2=18.0, level_FLEXTO=20.0, level_GA=21.0, level_MCL=10.0, level_MCT=14.0, level_MTO=16.0, level_TO=15.0, thrust_level=16
  预期结果: True
- 条件: thrust_level == level_MCL || thrust_level == level_DCL1 || thrust_level == level_DCL2 || thrust_level == level_CT || thrust_level == level_MCT || thrust_level == level_TO || thrust_level == level_MTO || thrust_level == level_DTO1 || thrust_level == level_DTO2 || thrust_level == level_GA || thrust_level == level_Bump || thrust_level == level_FLEXTO
  测试用例: level_Bump=19.0, level_CT=13.0, level_DCL1=11.0, level_DCL2=12.0, level_DTO1=17.0, level_DTO2=18.0, level_FLEXTO=20.0, level_GA=21.0, level_MCL=10.0, level_MCT=14.0, level_MTO=16.0, level_TO=15.0, thrust_level=9
  预期结果: False
- 条件: thrust_level == level_MCL || thrust_level == level_DCL1 || thrust_level == level_DCL2 || thrust_level == level_CT || thrust_level == level_MCT || thrust_level == level_TO || thrust_level == level_MTO || thrust_level == level_DTO1 || thrust_level == level_DTO2 || thrust_level == level_GA || thrust_level == level_Bump || thrust_level == level_FLEXTO
  测试用例: level_Bump=19.0, level_CT=13.0, level_DCL1=11.0, level_DCL2=12.0, level_DTO1=17.0, level_DTO2=18.0, level_FLEXTO=20.0, level_GA=21.0, level_MCL=10.0, level_MCT=14.0, level_MTO=16.0, level_TO=15.0, thrust_level=17
  预期结果: True
- 条件: thrust_level == level_MCL || thrust_level == level_DCL1 || thrust_level == level_DCL2 || thrust_level == level_CT || thrust_level == level_MCT || thrust_level == level_TO || thrust_level == level_MTO || thrust_level == level_DTO1 || thrust_level == level_DTO2 || thrust_level == level_GA || thrust_level == level_Bump || thrust_level == level_FLEXTO
  测试用例: level_Bump=19.0, level_CT=13.0, level_DCL1=11.0, level_DCL2=12.0, level_DTO1=17.0, level_DTO2=18.0, level_FLEXTO=20.0, level_GA=21.0, level_MCL=10.0, level_MCT=14.0, level_MTO=16.0, level_TO=15.0, thrust_level=9
  预期结果: False
- 条件: thrust_level == level_MCL || thrust_level == level_DCL1 || thrust_level == level_DCL2 || thrust_level == level_CT || thrust_level == level_MCT || thrust_level == level_TO || thrust_level == level_MTO || thrust_level == level_DTO1 || thrust_level == level_DTO2 || thrust_level == level_GA || thrust_level == level_Bump || thrust_level == level_FLEXTO
  测试用例: level_Bump=19.0, level_CT=13.0, level_DCL1=11.0, level_DCL2=12.0, level_DTO1=17.0, level_DTO2=18.0, level_FLEXTO=20.0, level_GA=21.0, level_MCL=10.0, level_MCT=14.0, level_MTO=16.0, level_TO=15.0, thrust_level=18
  预期结果: True
- 条件: thrust_level == level_MCL || thrust_level == level_DCL1 || thrust_level == level_DCL2 || thrust_level == level_CT || thrust_level == level_MCT || thrust_level == level_TO || thrust_level == level_MTO || thrust_level == level_DTO1 || thrust_level == level_DTO2 || thrust_level == level_GA || thrust_level == level_Bump || thrust_level == level_FLEXTO
  测试用例: level_Bump=19.0, level_CT=13.0, level_DCL1=11.0, level_DCL2=12.0, level_DTO1=17.0, level_DTO2=18.0, level_FLEXTO=20.0, level_GA=21.0, level_MCL=10.0, level_MCT=14.0, level_MTO=16.0, level_TO=15.0, thrust_level=9
  预期结果: False
- 条件: thrust_level == level_MCL || thrust_level == level_DCL1 || thrust_level == level_DCL2 || thrust_level == level_CT || thrust_level == level_MCT || thrust_level == level_TO || thrust_level == level_MTO || thrust_level == level_DTO1 || thrust_level == level_DTO2 || thrust_level == level_GA || thrust_level == level_Bump || thrust_level == level_FLEXTO
  测试用例: level_Bump=19.0, level_CT=13.0, level_DCL1=11.0, level_DCL2=12.0, level_DTO1=17.0, level_DTO2=18.0, level_FLEXTO=20.0, level_GA=21.0, level_MCL=10.0, level_MCT=14.0, level_MTO=16.0, level_TO=15.0, thrust_level=21
  预期结果: True
- 条件: thrust_level == level_MCL || thrust_level == level_DCL1 || thrust_level == level_DCL2 || thrust_level == level_CT || thrust_level == level_MCT || thrust_level == level_TO || thrust_level == level_MTO || thrust_level == level_DTO1 || thrust_level == level_DTO2 || thrust_level == level_GA || thrust_level == level_Bump || thrust_level == level_FLEXTO
  测试用例: level_Bump=19.0, level_CT=13.0, level_DCL1=11.0, level_DCL2=12.0, level_DTO1=17.0, level_DTO2=18.0, level_FLEXTO=20.0, level_GA=21.0, level_MCL=10.0, level_MCT=14.0, level_MTO=16.0, level_TO=15.0, thrust_level=9
  预期结果: False
- 条件: thrust_level == level_MCL || thrust_level == level_DCL1 || thrust_level == level_DCL2 || thrust_level == level_CT || thrust_level == level_MCT || thrust_level == level_TO || thrust_level == level_MTO || thrust_level == level_DTO1 || thrust_level == level_DTO2 || thrust_level == level_GA || thrust_level == level_Bump || thrust_level == level_FLEXTO
  测试用例: level_Bump=19.0, level_CT=13.0, level_DCL1=11.0, level_DCL2=12.0, level_DTO1=17.0, level_DTO2=18.0, level_FLEXTO=20.0, level_GA=21.0, level_MCL=10.0, level_MCT=14.0, level_MTO=16.0, level_TO=15.0, thrust_level=19
  预期结果: True
- 条件: thrust_level == level_MCL || thrust_level == level_DCL1 || thrust_level == level_DCL2 || thrust_level == level_CT || thrust_level == level_MCT || thrust_level == level_TO || thrust_level == level_MTO || thrust_level == level_DTO1 || thrust_level == level_DTO2 || thrust_level == level_GA || thrust_level == level_Bump || thrust_level == level_FLEXTO
  测试用例: level_Bump=19.0, level_CT=13.0, level_DCL1=11.0, level_DCL2=12.0, level_DTO1=17.0, level_DTO2=18.0, level_FLEXTO=20.0, level_GA=21.0, level_MCL=10.0, level_MCT=14.0, level_MTO=16.0, level_TO=15.0, thrust_level=9
  预期结果: False
- 条件: thrust_level == level_MCL || thrust_level == level_DCL1 || thrust_level == level_DCL2 || thrust_level == level_CT || thrust_level == level_MCT || thrust_level == level_TO || thrust_level == level_MTO || thrust_level == level_DTO1 || thrust_level == level_DTO2 || thrust_level == level_GA || thrust_level == level_Bump || thrust_level == level_FLEXTO
  测试用例: level_Bump=19.0, level_CT=13.0, level_DCL1=11.0, level_DCL2=12.0, level_DTO1=17.0, level_DTO2=18.0, level_FLEXTO=20.0, level_GA=21.0, level_MCL=10.0, level_MCT=14.0, level_MTO=16.0, level_TO=15.0, thrust_level=20
  预期结果: True
- 条件: thrust_level == level_MCL || thrust_level == level_DCL1 || thrust_level == level_DCL2 || thrust_level == level_CT || thrust_level == level_MCT || thrust_level == level_TO || thrust_level == level_MTO || thrust_level == level_DTO1 || thrust_level == level_DTO2 || thrust_level == level_GA || thrust_level == level_Bump || thrust_level == level_FLEXTO
  测试用例: level_Bump=19.0, level_CT=13.0, level_DCL1=11.0, level_DCL2=12.0, level_DTO1=17.0, level_DTO2=18.0, level_FLEXTO=20.0, level_GA=21.0, level_MCL=10.0, level_MCT=14.0, level_MTO=16.0, level_TO=15.0, thrust_level=9
  预期结果: False

==================================================
处理模块: N1R控制量N1RDem计算（推力等级为爬升）
提取到的if条件: ['thrust_level == level_CL']

处理条件 1: thrust_level == level_CL
解析后的Python条件表达式: thrust_level == level_CL
变量及其范围: [{'name': 'level_CL', 'min_value': 9.0, 'max_value': 9.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_CL', 'constant_value': 9.0}, {'name': 'thrust_level', 'min_value': 0.0, 'max_value': 23.0, 'var_type': 'int', 'is_last': False, 'original_var': 'thrust_level'}]
解析后的条件: thrust_level == level_CL
识别到的变量: [{'name': 'level_CL', 'min_value': 9.0, 'max_value': 9.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_CL', 'constant_value': 9.0}, {'name': 'thrust_level', 'min_value': 0.0, 'max_value': 23.0, 'var_type': 'int', 'is_last': False, 'original_var': 'thrust_level'}]
处理的变量: ['level_CL', 'thrust_level']
预处理后的条件: thrust_level == level_CL
提取的原子条件: [('thrust_level', '==', 'level_CL')]
表达式结构: {}
根表达式: ATOM_0
构建的Z3表达式: 9 == thrust_level
为原子条件 'thrust_level == level_CL' 生成MCDC测试用例
生成的MCDC条件数量: 1
生成的MCDC条件数量: 1

生成的测试用例:
- 条件: thrust_level == level_CL
  测试用例: level_CL=9.0, thrust_level=9
  预期结果: True
- 条件: thrust_level == level_CL
  测试用例: level_CL=9.0, thrust_level=8
  预期结果: False

==================================================
处理模块: N1R控制量N1RDem计算（推力等级为准最大推力）
提取到的if条件: ['thrust_level == level_TO2MAX']

处理条件 1: thrust_level == level_TO2MAX
解析后的Python条件表达式: thrust_level == level_TO2MAX
变量及其范围: [{'name': 'level_TO2MAX', 'min_value': 23.0, 'max_value': 23.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_TO2MAX', 'constant_value': 23.0}, {'name': 'thrust_level', 'min_value': 0.0, 'max_value': 23.0, 'var_type': 'int', 'is_last': False, 'original_var': 'thrust_level'}]
解析后的条件: thrust_level == level_TO2MAX
识别到的变量: [{'name': 'level_TO2MAX', 'min_value': 23.0, 'max_value': 23.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_TO2MAX', 'constant_value': 23.0}, {'name': 'thrust_level', 'min_value': 0.0, 'max_value': 23.0, 'var_type': 'int', 'is_last': False, 'original_var': 'thrust_level'}]
处理的变量: ['level_TO2MAX', 'thrust_level']
预处理后的条件: thrust_level == level_TO2MAX
提取的原子条件: [('thrust_level', '==', 'level_TO2MAX')]
表达式结构: {}
根表达式: ATOM_0
构建的Z3表达式: 23 == thrust_level
为原子条件 'thrust_level == level_TO2MAX' 生成MCDC测试用例
生成的MCDC条件数量: 1
生成的MCDC条件数量: 1

生成的测试用例:
- 条件: thrust_level == level_TO2MAX
  测试用例: level_TO2MAX=23.0, thrust_level=23
  预期结果: True
- 条件: thrust_level == level_TO2MAX
  测试用例: level_TO2MAX=23.0, thrust_level=22
  预期结果: False

==================================================
处理模块: 高低压切换控制（无N2双通道传感器故障）
提取到的if条件: ['engine_state == ES_idle', 'engine_state == ES_above_idle && ((PLA<2 + PD_IdleSwitchPlaThsld && PLA>2) && (last(PLA)<=2 && last(PLA)>=0)) || ((PLA>-6-PD_IdleSwitchPlaThsld && PLA<-6) && (last(PLA)<0 && last(PLA)>-6))', 'engine_state == ES_above_idle && (PLA<0 && PLA >=-6 && last(PLA)>=-33 && last(PLA)<-6 || PLA<=2 && PLA >=0 && last(PLA)>2 && last(PLA)<=85)', 'engine_state == ES_above_idle && (PLA >= 2 + PD_IdleSwitchPlaThsld || PLA <= 2 || last(PLA) > 2 || last(PLA) < 0) && (PLA <= -6 - PD_IdleSwitchPlaThsld || PLA >= -6 || last(PLA) >= 0 || last(PLA) <= -6) && (PLA < -6 || PLA > 2)', 'engine_state == ES_above_idle && ((PLA >= 2 + PD_IdleSwitchPlaThsld || PLA <= 2 || last(PLA) > 2 || last(PLA) < 0) && (PLA <= -6 - PD_IdleSwitchPlaThsld || PLA >= -6 || last(PLA) >= 0 || last(PLA) <= -6) && (PLA >= 0 || PLA < -6 || last(PLA) < -33 || last(PLA) >= -6) && (PLA > 2 || PLA < 0 || last(PLA) <= 2 || last(PLA) > 85) && PLA <= 2 && PLA >= -6)', 'engine_state == ES_Hwindmill_start && thrust_level != level_RI && thrust_level != level_GI && thrust_level != level_FI && thrust_level != level_AI', 'engine_state == ES_Hwindmill_start && thrust_level == level_RI && thrust_level == level_GI && thrust_level == level_FI && thrust_level == level_AI', 'engine_state != ES_Hwindmill_start && engine_state != ES_above_idle && engine_state != ES_idle']

处理条件 1: engine_state == ES_idle
解析后的Python条件表达式: engine_state == ES_idle
变量及其范围: [{'name': 'ES_idle', 'min_value': 14.0, 'max_value': 14.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'ES_idle', 'constant_value': 14.0}, {'name': 'engine_state', 'min_value': 0.0, 'max_value': 16.0, 'var_type': 'int', 'is_last': False, 'original_var': 'engine_state'}]
解析后的条件: engine_state == ES_idle
识别到的变量: [{'name': 'ES_idle', 'min_value': 14.0, 'max_value': 14.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'ES_idle', 'constant_value': 14.0}, {'name': 'engine_state', 'min_value': 0.0, 'max_value': 16.0, 'var_type': 'int', 'is_last': False, 'original_var': 'engine_state'}]
处理的变量: ['ES_idle', 'engine_state']
预处理后的条件: engine_state == ES_idle
提取的原子条件: [('engine_state', '==', 'ES_idle')]
表达式结构: {}
根表达式: ATOM_0
构建的Z3表达式: 14 == engine_state
为原子条件 'engine_state == ES_idle' 生成MCDC测试用例
生成的MCDC条件数量: 1
生成的MCDC条件数量: 1

处理条件 2: engine_state == ES_above_idle && ((PLA<2 + PD_IdleSwitchPlaThsld && PLA>2) && (last(PLA)<=2 && last(PLA)>=0)) || ((PLA>-6-PD_IdleSwitchPlaThsld && PLA<-6) && (last(PLA)<0 && last(PLA)>-6))
解析后的Python条件表达式: engine_state == ES_above_idle and ((PLA < 2+PD_IdleSwitchPlaThsld and PLA > 2) and (_PLA_ <= 2 and _PLA_ >= 0)) or ((PLA > -6-PD_IdleSwitchPlaThsld and PLA < -6) and (_PLA_ < 0 and _PLA_ > -6))
变量及其范围: [{'name': 'PD_IdleSwitchPlaThsld', 'min_value': 0.0, 'max_value': 50.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PD_IdleSwitchPlaThsld'}, {'name': 'ES_above_idle', 'min_value': 15.0, 'max_value': 15.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'ES_above_idle', 'constant_value': 15.0}, {'name': 'engine_state', 'min_value': 0.0, 'max_value': 16.0, 'var_type': 'int', 'is_last': False, 'original_var': 'engine_state'}, {'name': '_PLA_', 'min_value': -33.0, 'max_value': 85.0, 'var_type': 'float', 'is_last': True, 'original_var': 'PLA'}, {'name': 'PLA', 'min_value': -33.0, 'max_value': 85.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PLA'}]
解析后的条件: engine_state == ES_above_idle and ((PLA < 2+PD_IdleSwitchPlaThsld and PLA > 2) and (_PLA_ <= 2 and _PLA_ >= 0)) or ((PLA > -6-PD_IdleSwitchPlaThsld and PLA < -6) and (_PLA_ < 0 and _PLA_ > -6))
识别到的变量: [{'name': 'PD_IdleSwitchPlaThsld', 'min_value': 0.0, 'max_value': 50.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PD_IdleSwitchPlaThsld'}, {'name': 'ES_above_idle', 'min_value': 15.0, 'max_value': 15.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'ES_above_idle', 'constant_value': 15.0}, {'name': 'engine_state', 'min_value': 0.0, 'max_value': 16.0, 'var_type': 'int', 'is_last': False, 'original_var': 'engine_state'}, {'name': '_PLA_', 'min_value': -33.0, 'max_value': 85.0, 'var_type': 'float', 'is_last': True, 'original_var': 'PLA'}, {'name': 'PLA', 'min_value': -33.0, 'max_value': 85.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PLA'}]
处理的变量: ['PD_IdleSwitchPlaThsld', 'ES_above_idle', 'engine_state', '_PLA_', 'PLA']
预处理后的条件: engine_state == ES_above_idle and ((PLA < 2+PD_IdleSwitchPlaThsld and PLA > 2) and (_PLA_ <= 2 and _PLA_ >= 0)) or ((PLA > -6-PD_IdleSwitchPlaThsld and PLA < -6) and (_PLA_ < 0 and _PLA_ > -6))
提取的原子条件: [('engine_state', '==', 'ES_above_idle'), ('PLA', '<', '2+PD_IdleSwitchPlaThsld'), ('PLA', '>', '2'), ('_PLA_', '<=', '2'), ('_PLA_', '>=', '0'), ('PLA', '>', '-6-PD_IdleSwitchPlaThsld'), ('PLA', '<', '-6'), ('_PLA_', '<', '0'), ('_PLA_', '>', '-6')]
表达式结构: {'AND_EXPR_3': ('and', ['ATOM_3', 'ATOM_4']), 'AND_EXPR_2': ('and', ['ATOM_7', 'ATOM_8']), 'AND_EXPR_1': ('and', ['AND_EXPR_2', 'AND_EXPR_2']), 'OR_EXPR_0': ('or', ['AND_EXPR_1', 'AND_EXPR_1'])}
根表达式: OR_EXPR_0
警告: 无法解析变量 0
警告: 无法解析表达式 _PLA_ < 0
警告: 无法解析变量 -6
警告: 无法解析表达式 _PLA_ > -6
警告: 无法解析变量 0
警告: 无法解析表达式 _PLA_ < 0
警告: 无法解析变量 -6
警告: 无法解析表达式 _PLA_ > -6
警告: 无法解析变量 0
警告: 无法解析表达式 _PLA_ < 0
警告: 无法解析变量 -6
警告: 无法解析表达式 _PLA_ > -6
警告: 无法解析变量 0
警告: 无法解析表达式 _PLA_ < 0
警告: 无法解析变量 -6
警告: 无法解析表达式 _PLA_ > -6
构建的Z3表达式: Or(And(And(True, True), And(True, True)),
   And(And(True, True), And(True, True)))
警告: 无法解析变量 2+PD_IdleSwitchPlaThsld
警告: 无法解析表达式 PLA < 2+PD_IdleSwitchPlaThsld
警告: 无法解析变量 2
警告: 无法解析表达式 PLA > 2
警告: 无法解析变量 2
警告: 无法解析表达式 _PLA_ <= 2
警告: 无法解析变量 0
警告: 无法解析表达式 _PLA_ >= 0
警告: 无法解析变量 -6-PD_IdleSwitchPlaThsld
警告: 无法解析表达式 PLA > -6-PD_IdleSwitchPlaThsld
警告: 无法解析变量 -6
警告: 无法解析表达式 PLA < -6
警告: 无法解析变量 0
警告: 无法解析表达式 _PLA_ < 0
警告: 无法解析变量 -6
警告: 无法解析表达式 _PLA_ > -6
生成的MCDC条件数量: 0
生成的MCDC条件数量: 0

处理条件 3: engine_state == ES_above_idle && (PLA<0 && PLA >=-6 && last(PLA)>=-33 && last(PLA)<-6 || PLA<=2 && PLA >=0 && last(PLA)>2 && last(PLA)<=85)
解析后的Python条件表达式: engine_state == ES_above_idle and (PLA < 0 and PLA >= -6 and _PLA_ >= -33 and _PLA_ < -6 or PLA <= 2 and PLA >= 0 and _PLA_ > 2 and _PLA_ <= 85)
变量及其范围: [{'name': 'ES_above_idle', 'min_value': 15.0, 'max_value': 15.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'ES_above_idle', 'constant_value': 15.0}, {'name': 'engine_state', 'min_value': 0.0, 'max_value': 16.0, 'var_type': 'int', 'is_last': False, 'original_var': 'engine_state'}, {'name': '_PLA_', 'min_value': -33.0, 'max_value': 85.0, 'var_type': 'float', 'is_last': True, 'original_var': 'PLA'}, {'name': 'PLA', 'min_value': -33.0, 'max_value': 85.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PLA'}]
解析后的条件: engine_state == ES_above_idle and (PLA < 0 and PLA >= -6 and _PLA_ >= -33 and _PLA_ < -6 or PLA <= 2 and PLA >= 0 and _PLA_ > 2 and _PLA_ <= 85)
识别到的变量: [{'name': 'ES_above_idle', 'min_value': 15.0, 'max_value': 15.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'ES_above_idle', 'constant_value': 15.0}, {'name': 'engine_state', 'min_value': 0.0, 'max_value': 16.0, 'var_type': 'int', 'is_last': False, 'original_var': 'engine_state'}, {'name': '_PLA_', 'min_value': -33.0, 'max_value': 85.0, 'var_type': 'float', 'is_last': True, 'original_var': 'PLA'}, {'name': 'PLA', 'min_value': -33.0, 'max_value': 85.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PLA'}]
处理的变量: ['ES_above_idle', 'engine_state', '_PLA_', 'PLA']
预处理后的条件: engine_state == ES_above_idle and (PLA < 0 and PLA >= -6 and _PLA_ >= -33 and _PLA_ < -6 or PLA <= 2 and PLA >= 0 and _PLA_ > 2 and _PLA_ <= 85)
提取的原子条件: [('engine_state', '==', 'ES_above_idle'), ('PLA', '<', '0'), ('PLA', '>=', '-6'), ('_PLA_', '>=', '-33'), ('_PLA_', '<', '-6'), ('PLA', '<=', '2'), ('PLA', '>=', '0'), ('_PLA_', '>', '2'), ('_PLA_', '<=', '85')]
表达式结构: {'AND_EXPR_2': ('and', ['ATOM_5', 'ATOM_6', 'ATOM_7', 'ATOM_8']), 'OR_EXPR_1': ('or', ['AND_EXPR_2', 'AND_EXPR_2']), 'AND_EXPR_0': ('and', ['ATOM_0', 'OR_EXPR_1'])}
根表达式: AND_EXPR_0
警告: 无法解析变量 2
警告: 无法解析表达式 PLA <= 2
警告: 无法解析变量 0
警告: 无法解析表达式 PLA >= 0
警告: 无法解析变量 2
警告: 无法解析表达式 _PLA_ > 2
警告: 无法解析变量 85
警告: 无法解析表达式 _PLA_ <= 85
警告: 无法解析变量 2
警告: 无法解析表达式 PLA <= 2
警告: 无法解析变量 0
警告: 无法解析表达式 PLA >= 0
警告: 无法解析变量 2
警告: 无法解析表达式 _PLA_ > 2
警告: 无法解析变量 85
警告: 无法解析表达式 _PLA_ <= 85
构建的Z3表达式: And(15 == engine_state,
    Or(And(True, True, True, True),
       And(True, True, True, True)))
为原子条件 'engine_state == ES_above_idle' 生成MCDC测试用例
警告: 无法解析变量 0
警告: 无法解析表达式 PLA < 0
警告: 无法解析变量 -6
警告: 无法解析表达式 PLA >= -6
警告: 无法解析变量 -33
警告: 无法解析表达式 _PLA_ >= -33
警告: 无法解析变量 -6
警告: 无法解析表达式 _PLA_ < -6
警告: 无法解析变量 2
警告: 无法解析表达式 PLA <= 2
警告: 无法解析变量 0
警告: 无法解析表达式 PLA >= 0
警告: 无法解析变量 2
警告: 无法解析表达式 _PLA_ > 2
警告: 无法解析变量 85
警告: 无法解析表达式 _PLA_ <= 85
生成的MCDC条件数量: 1
生成的MCDC条件数量: 1

处理条件 4: engine_state == ES_above_idle && (PLA >= 2 + PD_IdleSwitchPlaThsld || PLA <= 2 || last(PLA) > 2 || last(PLA) < 0) && (PLA <= -6 - PD_IdleSwitchPlaThsld || PLA >= -6 || last(PLA) >= 0 || last(PLA) <= -6) && (PLA < -6 || PLA > 2)
解析后的Python条件表达式: engine_state == ES_above_idle and (PLA >= 2+PD_IdleSwitchPlaThsld or PLA <= 2 or _PLA_ > 2 or _PLA_ < 0) and (PLA <= -6-PD_IdleSwitchPlaThsld or PLA >= -6 or _PLA_ >= 0 or _PLA_ <= -6) and (PLA < -6 or PLA > 2)
变量及其范围: [{'name': 'PD_IdleSwitchPlaThsld', 'min_value': 0.0, 'max_value': 50.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PD_IdleSwitchPlaThsld'}, {'name': 'ES_above_idle', 'min_value': 15.0, 'max_value': 15.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'ES_above_idle', 'constant_value': 15.0}, {'name': 'engine_state', 'min_value': 0.0, 'max_value': 16.0, 'var_type': 'int', 'is_last': False, 'original_var': 'engine_state'}, {'name': '_PLA_', 'min_value': -33.0, 'max_value': 85.0, 'var_type': 'float', 'is_last': True, 'original_var': 'PLA'}, {'name': 'PLA', 'min_value': -33.0, 'max_value': 85.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PLA'}]
解析后的条件: engine_state == ES_above_idle and (PLA >= 2+PD_IdleSwitchPlaThsld or PLA <= 2 or _PLA_ > 2 or _PLA_ < 0) and (PLA <= -6-PD_IdleSwitchPlaThsld or PLA >= -6 or _PLA_ >= 0 or _PLA_ <= -6) and (PLA < -6 or PLA > 2)
识别到的变量: [{'name': 'PD_IdleSwitchPlaThsld', 'min_value': 0.0, 'max_value': 50.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PD_IdleSwitchPlaThsld'}, {'name': 'ES_above_idle', 'min_value': 15.0, 'max_value': 15.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'ES_above_idle', 'constant_value': 15.0}, {'name': 'engine_state', 'min_value': 0.0, 'max_value': 16.0, 'var_type': 'int', 'is_last': False, 'original_var': 'engine_state'}, {'name': '_PLA_', 'min_value': -33.0, 'max_value': 85.0, 'var_type': 'float', 'is_last': True, 'original_var': 'PLA'}, {'name': 'PLA', 'min_value': -33.0, 'max_value': 85.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PLA'}]
处理的变量: ['PD_IdleSwitchPlaThsld', 'ES_above_idle', 'engine_state', '_PLA_', 'PLA']
预处理后的条件: engine_state == ES_above_idle and (PLA >= 2+PD_IdleSwitchPlaThsld or PLA <= 2 or _PLA_ > 2 or _PLA_ < 0) and (PLA <= -6-PD_IdleSwitchPlaThsld or PLA >= -6 or _PLA_ >= 0 or _PLA_ <= -6) and (PLA < -6 or PLA > 2)
提取的原子条件: [('engine_state', '==', 'ES_above_idle'), ('PLA', '>=', '2+PD_IdleSwitchPlaThsld'), ('PLA', '<=', '2'), ('_PLA_', '>', '2'), ('_PLA_', '<', '0'), ('PLA', '<=', '-6-PD_IdleSwitchPlaThsld'), ('PLA', '>=', '-6'), ('_PLA_', '>=', '0'), ('_PLA_', '<=', '-6'), ('PLA', '<', '-6'), ('PLA', '>', '2')]
表达式结构: {'OR_EXPR_1': ('or', ['ATOM_9', 'ATOM_10']), 'AND_EXPR_0': ('and', ['ATOM_0', 'OR_EXPR_1', 'OR_EXPR_1', 'OR_EXPR_1'])}
根表达式: AND_EXPR_0
警告: 无法解析变量 -6
警告: 无法解析表达式 PLA < -6
警告: 无法解析变量 2
警告: 无法解析表达式 PLA > 2
警告: 无法解析变量 -6
警告: 无法解析表达式 PLA < -6
警告: 无法解析变量 2
警告: 无法解析表达式 PLA > 2
警告: 无法解析变量 -6
警告: 无法解析表达式 PLA < -6
警告: 无法解析变量 2
警告: 无法解析表达式 PLA > 2
构建的Z3表达式: And(15 == engine_state,
    Or(True, True),
    Or(True, True),
    Or(True, True))
为原子条件 'engine_state == ES_above_idle' 生成MCDC测试用例
警告: 无法解析变量 2+PD_IdleSwitchPlaThsld
警告: 无法解析表达式 PLA >= 2+PD_IdleSwitchPlaThsld
警告: 无法解析变量 2
警告: 无法解析表达式 PLA <= 2
警告: 无法解析变量 2
警告: 无法解析表达式 _PLA_ > 2
警告: 无法解析变量 0
警告: 无法解析表达式 _PLA_ < 0
警告: 无法解析变量 -6-PD_IdleSwitchPlaThsld
警告: 无法解析表达式 PLA <= -6-PD_IdleSwitchPlaThsld
警告: 无法解析变量 -6
警告: 无法解析表达式 PLA >= -6
警告: 无法解析变量 0
警告: 无法解析表达式 _PLA_ >= 0
警告: 无法解析变量 -6
警告: 无法解析表达式 _PLA_ <= -6
警告: 无法解析变量 -6
警告: 无法解析表达式 PLA < -6
警告: 无法解析变量 2
警告: 无法解析表达式 PLA > 2
生成的MCDC条件数量: 1
生成的MCDC条件数量: 1

处理条件 5: engine_state == ES_above_idle && ((PLA >= 2 + PD_IdleSwitchPlaThsld || PLA <= 2 || last(PLA) > 2 || last(PLA) < 0) && (PLA <= -6 - PD_IdleSwitchPlaThsld || PLA >= -6 || last(PLA) >= 0 || last(PLA) <= -6) && (PLA >= 0 || PLA < -6 || last(PLA) < -33 || last(PLA) >= -6) && (PLA > 2 || PLA < 0 || last(PLA) <= 2 || last(PLA) > 85) && PLA <= 2 && PLA >= -6)
解析后的Python条件表达式: engine_state == ES_above_idle and ((PLA >= 2+PD_IdleSwitchPlaThsld or PLA <= 2 or _PLA_ > 2 or _PLA_ < 0) and (PLA <= -6-PD_IdleSwitchPlaThsld or PLA >= -6 or _PLA_ >= 0 or _PLA_ <= -6) and (PLA >= 0 or PLA < -6 or _PLA_ < -33 or _PLA_ >= -6) and (PLA > 2 or PLA < 0 or _PLA_ <= 2 or _PLA_ > 85) and PLA <= 2 and PLA >= -6)
变量及其范围: [{'name': 'PD_IdleSwitchPlaThsld', 'min_value': 0.0, 'max_value': 50.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PD_IdleSwitchPlaThsld'}, {'name': 'ES_above_idle', 'min_value': 15.0, 'max_value': 15.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'ES_above_idle', 'constant_value': 15.0}, {'name': 'engine_state', 'min_value': 0.0, 'max_value': 16.0, 'var_type': 'int', 'is_last': False, 'original_var': 'engine_state'}, {'name': '_PLA_', 'min_value': -33.0, 'max_value': 85.0, 'var_type': 'float', 'is_last': True, 'original_var': 'PLA'}, {'name': 'PLA', 'min_value': -33.0, 'max_value': 85.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PLA'}]
解析后的条件: engine_state == ES_above_idle and ((PLA >= 2+PD_IdleSwitchPlaThsld or PLA <= 2 or _PLA_ > 2 or _PLA_ < 0) and (PLA <= -6-PD_IdleSwitchPlaThsld or PLA >= -6 or _PLA_ >= 0 or _PLA_ <= -6) and (PLA >= 0 or PLA < -6 or _PLA_ < -33 or _PLA_ >= -6) and (PLA > 2 or PLA < 0 or _PLA_ <= 2 or _PLA_ > 85) and PLA <= 2 and PLA >= -6)
识别到的变量: [{'name': 'PD_IdleSwitchPlaThsld', 'min_value': 0.0, 'max_value': 50.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PD_IdleSwitchPlaThsld'}, {'name': 'ES_above_idle', 'min_value': 15.0, 'max_value': 15.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'ES_above_idle', 'constant_value': 15.0}, {'name': 'engine_state', 'min_value': 0.0, 'max_value': 16.0, 'var_type': 'int', 'is_last': False, 'original_var': 'engine_state'}, {'name': '_PLA_', 'min_value': -33.0, 'max_value': 85.0, 'var_type': 'float', 'is_last': True, 'original_var': 'PLA'}, {'name': 'PLA', 'min_value': -33.0, 'max_value': 85.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PLA'}]
处理的变量: ['PD_IdleSwitchPlaThsld', 'ES_above_idle', 'engine_state', '_PLA_', 'PLA']
预处理后的条件: engine_state == ES_above_idle and ((PLA >= 2+PD_IdleSwitchPlaThsld or PLA <= 2 or _PLA_ > 2 or _PLA_ < 0) and (PLA <= -6-PD_IdleSwitchPlaThsld or PLA >= -6 or _PLA_ >= 0 or _PLA_ <= -6) and (PLA >= 0 or PLA < -6 or _PLA_ < -33 or _PLA_ >= -6) and (PLA > 2 or PLA < 0 or _PLA_ <= 2 or _PLA_ > 85) and PLA <= 2 and PLA >= -6)
提取的原子条件: [('engine_state', '==', 'ES_above_idle'), ('PLA', '>=', '2+PD_IdleSwitchPlaThsld'), ('PLA', '<=', '2'), ('_PLA_', '>', '2'), ('_PLA_', '<', '0'), ('PLA', '<=', '-6-PD_IdleSwitchPlaThsld'), ('PLA', '>=', '-6'), ('_PLA_', '>=', '0'), ('_PLA_', '<=', '-6'), ('PLA', '>=', '0'), ('PLA', '<', '-6'), ('_PLA_', '<', '-33'), ('_PLA_', '>=', '-6'), ('PLA', '>', '2'), ('PLA', '<', '0'), ('_PLA_', '<=', '2'), ('_PLA_', '>', '85'), ('PLA', '<=', '2'), ('PLA', '>=', '-6')]
表达式结构: {'OR_EXPR_2': ('or', ['ATOM_13', 'ATOM_14', 'ATOM_15', 'ATOM_16']), 'AND_EXPR_1': ('and', ['OR_EXPR_2', 'OR_EXPR_2', 'OR_EXPR_2', 'OR_EXPR_2', 'ATOM_17', 'ATOM_18']), 'AND_EXPR_0': ('and', ['ATOM_0', 'AND_EXPR_1'])}
根表达式: AND_EXPR_0
警告: 无法解析变量 2
警告: 无法解析表达式 PLA > 2
警告: 无法解析变量 0
警告: 无法解析表达式 PLA < 0
警告: 无法解析变量 2
警告: 无法解析表达式 _PLA_ <= 2
警告: 无法解析变量 85
警告: 无法解析表达式 _PLA_ > 85
警告: 无法解析变量 2
警告: 无法解析表达式 PLA > 2
警告: 无法解析变量 0
警告: 无法解析表达式 PLA < 0
警告: 无法解析变量 2
警告: 无法解析表达式 _PLA_ <= 2
警告: 无法解析变量 85
警告: 无法解析表达式 _PLA_ > 85
警告: 无法解析变量 2
警告: 无法解析表达式 PLA > 2
警告: 无法解析变量 0
警告: 无法解析表达式 PLA < 0
警告: 无法解析变量 2
警告: 无法解析表达式 _PLA_ <= 2
警告: 无法解析变量 85
警告: 无法解析表达式 _PLA_ > 85
警告: 无法解析变量 2
警告: 无法解析表达式 PLA > 2
警告: 无法解析变量 0
警告: 无法解析表达式 PLA < 0
警告: 无法解析变量 2
警告: 无法解析表达式 _PLA_ <= 2
警告: 无法解析变量 85
警告: 无法解析表达式 _PLA_ > 85
警告: 无法解析变量 2
警告: 无法解析表达式 PLA <= 2
警告: 无法解析变量 -6
警告: 无法解析表达式 PLA >= -6
构建的Z3表达式: And(15 == engine_state,
    And(Or(True, True, True, True),
        Or(True, True, True, True),
        Or(True, True, True, True),
        Or(True, True, True, True),
        True,
        True))
为原子条件 'engine_state == ES_above_idle' 生成MCDC测试用例
警告: 无法解析变量 2+PD_IdleSwitchPlaThsld
警告: 无法解析表达式 PLA >= 2+PD_IdleSwitchPlaThsld
警告: 无法解析变量 2
警告: 无法解析表达式 PLA <= 2
警告: 无法解析变量 2
警告: 无法解析表达式 _PLA_ > 2
警告: 无法解析变量 0
警告: 无法解析表达式 _PLA_ < 0
警告: 无法解析变量 -6-PD_IdleSwitchPlaThsld
警告: 无法解析表达式 PLA <= -6-PD_IdleSwitchPlaThsld
警告: 无法解析变量 -6
警告: 无法解析表达式 PLA >= -6
警告: 无法解析变量 0
警告: 无法解析表达式 _PLA_ >= 0
警告: 无法解析变量 -6
警告: 无法解析表达式 _PLA_ <= -6
警告: 无法解析变量 0
警告: 无法解析表达式 PLA >= 0
警告: 无法解析变量 -6
警告: 无法解析表达式 PLA < -6
警告: 无法解析变量 -33
警告: 无法解析表达式 _PLA_ < -33
警告: 无法解析变量 -6
警告: 无法解析表达式 _PLA_ >= -6
警告: 无法解析变量 2
警告: 无法解析表达式 PLA > 2
警告: 无法解析变量 0
警告: 无法解析表达式 PLA < 0
警告: 无法解析变量 2
警告: 无法解析表达式 _PLA_ <= 2
警告: 无法解析变量 85
警告: 无法解析表达式 _PLA_ > 85
警告: 无法解析变量 2
警告: 无法解析表达式 PLA <= 2
警告: 无法解析变量 -6
警告: 无法解析表达式 PLA >= -6
生成的MCDC条件数量: 1
生成的MCDC条件数量: 1

处理条件 6: engine_state == ES_Hwindmill_start && thrust_level != level_RI && thrust_level != level_GI && thrust_level != level_FI && thrust_level != level_AI
解析后的Python条件表达式: engine_state == ES_Hwindmill_start and thrust_level != level_RI and thrust_level != level_GI and thrust_level != level_FI and thrust_level != level_AI
变量及其范围: [{'name': 'level_AI', 'min_value': 6.0, 'max_value': 6.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_AI', 'constant_value': 6.0}, {'name': 'thrust_level', 'min_value': 0.0, 'max_value': 23.0, 'var_type': 'int', 'is_last': False, 'original_var': 'thrust_level'}, {'name': 'level_RI', 'min_value': 3.0, 'max_value': 3.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_RI', 'constant_value': 3.0}, {'name': 'engine_state', 'min_value': 0.0, 'max_value': 16.0, 'var_type': 'int', 'is_last': False, 'original_var': 'engine_state'}, {'name': 'level_GI', 'min_value': 4.0, 'max_value': 4.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_GI', 'constant_value': 4.0}, {'name': 'ES_Hwindmill_start', 'min_value': 12.0, 'max_value': 12.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'ES_Hwindmill_start', 'constant_value': 12.0}, {'name': 'level_FI', 'min_value': 5.0, 'max_value': 5.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_FI', 'constant_value': 5.0}]
解析后的条件: engine_state == ES_Hwindmill_start and thrust_level != level_RI and thrust_level != level_GI and thrust_level != level_FI and thrust_level != level_AI
识别到的变量: [{'name': 'level_AI', 'min_value': 6.0, 'max_value': 6.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_AI', 'constant_value': 6.0}, {'name': 'thrust_level', 'min_value': 0.0, 'max_value': 23.0, 'var_type': 'int', 'is_last': False, 'original_var': 'thrust_level'}, {'name': 'level_RI', 'min_value': 3.0, 'max_value': 3.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_RI', 'constant_value': 3.0}, {'name': 'engine_state', 'min_value': 0.0, 'max_value': 16.0, 'var_type': 'int', 'is_last': False, 'original_var': 'engine_state'}, {'name': 'level_GI', 'min_value': 4.0, 'max_value': 4.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_GI', 'constant_value': 4.0}, {'name': 'ES_Hwindmill_start', 'min_value': 12.0, 'max_value': 12.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'ES_Hwindmill_start', 'constant_value': 12.0}, {'name': 'level_FI', 'min_value': 5.0, 'max_value': 5.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_FI', 'constant_value': 5.0}]
处理的变量: ['level_AI', 'thrust_level', 'level_RI', 'engine_state', 'level_GI', 'ES_Hwindmill_start', 'level_FI']
预处理后的条件: engine_state == ES_Hwindmill_start and thrust_level != level_RI and thrust_level != level_GI and thrust_level != level_FI and thrust_level != level_AI
提取的原子条件: [('engine_state', '==', 'ES_Hwindmill_start'), ('thrust_level', '!=', 'level_RI'), ('thrust_level', '!=', 'level_GI'), ('thrust_level', '!=', 'level_FI'), ('thrust_level', '!=', 'level_AI')]
表达式结构: {'AND_EXPR_0': ('and', ['ATOM_0', 'ATOM_1', 'ATOM_2', 'ATOM_3', 'ATOM_4'])}
根表达式: AND_EXPR_0
构建的Z3表达式: And(12 == engine_state,
    3 != thrust_level,
    4 != thrust_level,
    5 != thrust_level,
    6 != thrust_level)
为原子条件 'engine_state == ES_Hwindmill_start' 生成MCDC测试用例
为原子条件 'thrust_level != level_RI' 生成MCDC测试用例
为原子条件 'thrust_level != level_GI' 生成MCDC测试用例
为原子条件 'thrust_level != level_FI' 生成MCDC测试用例
为原子条件 'thrust_level != level_AI' 生成MCDC测试用例
生成的MCDC条件数量: 5
生成的MCDC条件数量: 5

处理条件 7: engine_state == ES_Hwindmill_start && thrust_level == level_RI && thrust_level == level_GI && thrust_level == level_FI && thrust_level == level_AI
解析后的Python条件表达式: engine_state == ES_Hwindmill_start and thrust_level == level_RI and thrust_level == level_GI and thrust_level == level_FI and thrust_level == level_AI
变量及其范围: [{'name': 'level_AI', 'min_value': 6.0, 'max_value': 6.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_AI', 'constant_value': 6.0}, {'name': 'thrust_level', 'min_value': 0.0, 'max_value': 23.0, 'var_type': 'int', 'is_last': False, 'original_var': 'thrust_level'}, {'name': 'level_RI', 'min_value': 3.0, 'max_value': 3.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_RI', 'constant_value': 3.0}, {'name': 'engine_state', 'min_value': 0.0, 'max_value': 16.0, 'var_type': 'int', 'is_last': False, 'original_var': 'engine_state'}, {'name': 'level_GI', 'min_value': 4.0, 'max_value': 4.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_GI', 'constant_value': 4.0}, {'name': 'ES_Hwindmill_start', 'min_value': 12.0, 'max_value': 12.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'ES_Hwindmill_start', 'constant_value': 12.0}, {'name': 'level_FI', 'min_value': 5.0, 'max_value': 5.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_FI', 'constant_value': 5.0}]
解析后的条件: engine_state == ES_Hwindmill_start and thrust_level == level_RI and thrust_level == level_GI and thrust_level == level_FI and thrust_level == level_AI
识别到的变量: [{'name': 'level_AI', 'min_value': 6.0, 'max_value': 6.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_AI', 'constant_value': 6.0}, {'name': 'thrust_level', 'min_value': 0.0, 'max_value': 23.0, 'var_type': 'int', 'is_last': False, 'original_var': 'thrust_level'}, {'name': 'level_RI', 'min_value': 3.0, 'max_value': 3.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_RI', 'constant_value': 3.0}, {'name': 'engine_state', 'min_value': 0.0, 'max_value': 16.0, 'var_type': 'int', 'is_last': False, 'original_var': 'engine_state'}, {'name': 'level_GI', 'min_value': 4.0, 'max_value': 4.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_GI', 'constant_value': 4.0}, {'name': 'ES_Hwindmill_start', 'min_value': 12.0, 'max_value': 12.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'ES_Hwindmill_start', 'constant_value': 12.0}, {'name': 'level_FI', 'min_value': 5.0, 'max_value': 5.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_FI', 'constant_value': 5.0}]
处理的变量: ['level_AI', 'thrust_level', 'level_RI', 'engine_state', 'level_GI', 'ES_Hwindmill_start', 'level_FI']
预处理后的条件: engine_state == ES_Hwindmill_start and thrust_level == level_RI and thrust_level == level_GI and thrust_level == level_FI and thrust_level == level_AI
提取的原子条件: [('engine_state', '==', 'ES_Hwindmill_start'), ('thrust_level', '==', 'level_RI'), ('thrust_level', '==', 'level_GI'), ('thrust_level', '==', 'level_FI'), ('thrust_level', '==', 'level_AI')]
表达式结构: {'AND_EXPR_0': ('and', ['ATOM_0', 'ATOM_1', 'ATOM_2', 'ATOM_3', 'ATOM_4'])}
根表达式: AND_EXPR_0
构建的Z3表达式: And(12 == engine_state,
    3 == thrust_level,
    4 == thrust_level,
    5 == thrust_level,
    6 == thrust_level)
无法找到使原子条件 'engine_state == ES_Hwindmill_start' 影响整体结果的情况
无法找到使原子条件 'thrust_level == level_RI' 影响整体结果的情况
无法找到使原子条件 'thrust_level == level_GI' 影响整体结果的情况
无法找到使原子条件 'thrust_level == level_FI' 影响整体结果的情况
无法找到使原子条件 'thrust_level == level_AI' 影响整体结果的情况
生成的MCDC条件数量: 0
生成的MCDC条件数量: 0

处理条件 8: engine_state != ES_Hwindmill_start && engine_state != ES_above_idle && engine_state != ES_idle
解析后的Python条件表达式: engine_state != ES_Hwindmill_start and engine_state != ES_above_idle and engine_state != ES_idle
变量及其范围: [{'name': 'ES_above_idle', 'min_value': 15.0, 'max_value': 15.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'ES_above_idle', 'constant_value': 15.0}, {'name': 'ES_idle', 'min_value': 14.0, 'max_value': 14.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'ES_idle', 'constant_value': 14.0}, {'name': 'engine_state', 'min_value': 0.0, 'max_value': 16.0, 'var_type': 'int', 'is_last': False, 'original_var': 'engine_state'}, {'name': 'ES_Hwindmill_start', 'min_value': 12.0, 'max_value': 12.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'ES_Hwindmill_start', 'constant_value': 12.0}]
解析后的条件: engine_state != ES_Hwindmill_start and engine_state != ES_above_idle and engine_state != ES_idle
识别到的变量: [{'name': 'ES_above_idle', 'min_value': 15.0, 'max_value': 15.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'ES_above_idle', 'constant_value': 15.0}, {'name': 'ES_idle', 'min_value': 14.0, 'max_value': 14.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'ES_idle', 'constant_value': 14.0}, {'name': 'engine_state', 'min_value': 0.0, 'max_value': 16.0, 'var_type': 'int', 'is_last': False, 'original_var': 'engine_state'}, {'name': 'ES_Hwindmill_start', 'min_value': 12.0, 'max_value': 12.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'ES_Hwindmill_start', 'constant_value': 12.0}]
处理的变量: ['ES_above_idle', 'ES_idle', 'engine_state', 'ES_Hwindmill_start']
预处理后的条件: engine_state != ES_Hwindmill_start and engine_state != ES_above_idle and engine_state != ES_idle
提取的原子条件: [('engine_state', '!=', 'ES_Hwindmill_start'), ('engine_state', '!=', 'ES_above_idle'), ('engine_state', '!=', 'ES_idle')]
表达式结构: {'AND_EXPR_0': ('and', ['ATOM_0', 'ATOM_1', 'ATOM_2'])}
根表达式: AND_EXPR_0
构建的Z3表达式: And(12 != engine_state,
    15 != engine_state,
    14 != engine_state)
为原子条件 'engine_state != ES_Hwindmill_start' 生成MCDC测试用例
为原子条件 'engine_state != ES_above_idle' 生成MCDC测试用例
为原子条件 'engine_state != ES_idle' 生成MCDC测试用例
生成的MCDC条件数量: 3
生成的MCDC条件数量: 3

生成的测试用例:
- 条件: engine_state == ES_idle
  测试用例: ES_idle=14.0, engine_state=14
  预期结果: True
- 条件: engine_state == ES_idle
  测试用例: ES_idle=14.0, engine_state=13
  预期结果: False
- 条件: engine_state == ES_above_idle && (PLA<0 && PLA >=-6 && last(PLA)>=-33 && last(PLA)<-6 || PLA<=2 && PLA >=0 && last(PLA)>2 && last(PLA)<=85)
  测试用例: ES_above_idle=15.0, PLA=0.0, last(PLA)=0.0, engine_state=15
  预期结果: False
- 条件: engine_state == ES_above_idle && (PLA<0 && PLA >=-6 && last(PLA)>=-33 && last(PLA)<-6 || PLA<=2 && PLA >=0 && last(PLA)>2 && last(PLA)<=85)
  测试用例: ES_above_idle=15.0, PLA=0.0, last(PLA)=0.0, engine_state=14
  预期结果: False
- 条件: engine_state == ES_above_idle && (PLA >= 2 + PD_IdleSwitchPlaThsld || PLA <= 2 || last(PLA) > 2 || last(PLA) < 0) && (PLA <= -6 - PD_IdleSwitchPlaThsld || PLA >= -6 || last(PLA) >= 0 || last(PLA) <= -6) && (PLA < -6 || PLA > 2)
  测试用例: ES_above_idle=15.0, PD_IdleSwitchPlaThsld=0.0, PLA=0.0, last(PLA)=0.0, engine_state=15
  预期结果: False
- 条件: engine_state == ES_above_idle && (PLA >= 2 + PD_IdleSwitchPlaThsld || PLA <= 2 || last(PLA) > 2 || last(PLA) < 0) && (PLA <= -6 - PD_IdleSwitchPlaThsld || PLA >= -6 || last(PLA) >= 0 || last(PLA) <= -6) && (PLA < -6 || PLA > 2)
  测试用例: ES_above_idle=15.0, PD_IdleSwitchPlaThsld=0.0, PLA=0.0, last(PLA)=0.0, engine_state=14
  预期结果: False
- 条件: engine_state == ES_above_idle && ((PLA >= 2 + PD_IdleSwitchPlaThsld || PLA <= 2 || last(PLA) > 2 || last(PLA) < 0) && (PLA <= -6 - PD_IdleSwitchPlaThsld || PLA >= -6 || last(PLA) >= 0 || last(PLA) <= -6) && (PLA >= 0 || PLA < -6 || last(PLA) < -33 || last(PLA) >= -6) && (PLA > 2 || PLA < 0 || last(PLA) <= 2 || last(PLA) > 85) && PLA <= 2 && PLA >= -6)
  测试用例: ES_above_idle=15.0, PD_IdleSwitchPlaThsld=0.0, PLA=0.0, last(PLA)=0.0, engine_state=15
  预期结果: True
- 条件: engine_state == ES_above_idle && ((PLA >= 2 + PD_IdleSwitchPlaThsld || PLA <= 2 || last(PLA) > 2 || last(PLA) < 0) && (PLA <= -6 - PD_IdleSwitchPlaThsld || PLA >= -6 || last(PLA) >= 0 || last(PLA) <= -6) && (PLA >= 0 || PLA < -6 || last(PLA) < -33 || last(PLA) >= -6) && (PLA > 2 || PLA < 0 || last(PLA) <= 2 || last(PLA) > 85) && PLA <= 2 && PLA >= -6)
  测试用例: ES_above_idle=15.0, PD_IdleSwitchPlaThsld=0.0, PLA=0.0, last(PLA)=0.0, engine_state=14
  预期结果: False
- 条件: engine_state == ES_Hwindmill_start && thrust_level != level_RI && thrust_level != level_GI && thrust_level != level_FI && thrust_level != level_AI
  测试用例: ES_Hwindmill_start=12.0, engine_state=12, level_AI=6.0, level_FI=5.0, level_GI=4.0, level_RI=3.0, thrust_level=7
  预期结果: True
- 条件: engine_state == ES_Hwindmill_start && thrust_level != level_RI && thrust_level != level_GI && thrust_level != level_FI && thrust_level != level_AI
  测试用例: ES_Hwindmill_start=12.0, engine_state=11, level_AI=6.0, level_FI=5.0, level_GI=4.0, level_RI=3.0, thrust_level=7
  预期结果: False
- 条件: engine_state == ES_Hwindmill_start && thrust_level != level_RI && thrust_level != level_GI && thrust_level != level_FI && thrust_level != level_AI
  测试用例: ES_Hwindmill_start=12.0, engine_state=12, level_AI=6.0, level_FI=5.0, level_GI=4.0, level_RI=3.0, thrust_level=2
  预期结果: True
- 条件: engine_state == ES_Hwindmill_start && thrust_level != level_RI && thrust_level != level_GI && thrust_level != level_FI && thrust_level != level_AI
  测试用例: ES_Hwindmill_start=12.0, engine_state=12, level_AI=6.0, level_FI=5.0, level_GI=4.0, level_RI=3.0, thrust_level=3
  预期结果: False
- 条件: engine_state == ES_Hwindmill_start && thrust_level != level_RI && thrust_level != level_GI && thrust_level != level_FI && thrust_level != level_AI
  测试用例: ES_Hwindmill_start=12.0, engine_state=12, level_AI=6.0, level_FI=5.0, level_GI=4.0, level_RI=3.0, thrust_level=2
  预期结果: True
- 条件: engine_state == ES_Hwindmill_start && thrust_level != level_RI && thrust_level != level_GI && thrust_level != level_FI && thrust_level != level_AI
  测试用例: ES_Hwindmill_start=12.0, engine_state=12, level_AI=6.0, level_FI=5.0, level_GI=4.0, level_RI=3.0, thrust_level=4
  预期结果: False
- 条件: engine_state == ES_Hwindmill_start && thrust_level != level_RI && thrust_level != level_GI && thrust_level != level_FI && thrust_level != level_AI
  测试用例: ES_Hwindmill_start=12.0, engine_state=12, level_AI=6.0, level_FI=5.0, level_GI=4.0, level_RI=3.0, thrust_level=2
  预期结果: True
- 条件: engine_state == ES_Hwindmill_start && thrust_level != level_RI && thrust_level != level_GI && thrust_level != level_FI && thrust_level != level_AI
  测试用例: ES_Hwindmill_start=12.0, engine_state=12, level_AI=6.0, level_FI=5.0, level_GI=4.0, level_RI=3.0, thrust_level=5
  预期结果: False
- 条件: engine_state == ES_Hwindmill_start && thrust_level != level_RI && thrust_level != level_GI && thrust_level != level_FI && thrust_level != level_AI
  测试用例: ES_Hwindmill_start=12.0, engine_state=12, level_AI=6.0, level_FI=5.0, level_GI=4.0, level_RI=3.0, thrust_level=2
  预期结果: True
- 条件: engine_state == ES_Hwindmill_start && thrust_level != level_RI && thrust_level != level_GI && thrust_level != level_FI && thrust_level != level_AI
  测试用例: ES_Hwindmill_start=12.0, engine_state=12, level_AI=6.0, level_FI=5.0, level_GI=4.0, level_RI=3.0, thrust_level=6
  预期结果: False
- 条件: engine_state != ES_Hwindmill_start && engine_state != ES_above_idle && engine_state != ES_idle
  测试用例: ES_Hwindmill_start=12.0, ES_above_idle=15.0, ES_idle=14.0, engine_state=16
  预期结果: True
- 条件: engine_state != ES_Hwindmill_start && engine_state != ES_above_idle && engine_state != ES_idle
  测试用例: ES_Hwindmill_start=12.0, ES_above_idle=15.0, ES_idle=14.0, engine_state=12
  预期结果: False
- 条件: engine_state != ES_Hwindmill_start && engine_state != ES_above_idle && engine_state != ES_idle
  测试用例: ES_Hwindmill_start=12.0, ES_above_idle=15.0, ES_idle=14.0, engine_state=11
  预期结果: True
- 条件: engine_state != ES_Hwindmill_start && engine_state != ES_above_idle && engine_state != ES_idle
  测试用例: ES_Hwindmill_start=12.0, ES_above_idle=15.0, ES_idle=14.0, engine_state=15
  预期结果: False
- 条件: engine_state != ES_Hwindmill_start && engine_state != ES_above_idle && engine_state != ES_idle
  测试用例: ES_Hwindmill_start=12.0, ES_above_idle=15.0, ES_idle=14.0, engine_state=11
  预期结果: True
- 条件: engine_state != ES_Hwindmill_start && engine_state != ES_above_idle && engine_state != ES_idle
  测试用例: ES_Hwindmill_start=12.0, ES_above_idle=15.0, ES_idle=14.0, engine_state=14
  预期结果: False

==================================================
处理模块: 高低压切换控制（N2双通道传感器故障）
模块中没有if语句，跳过

==================================================
处理模块: 慢车到慢车以上切换控制（进入转换逻辑一）
提取到的if条件: ['((PLA<2 + PD_IdleSwitchPlaThsld && PLA>2) && (last(PLA)<=2 && last(PLA)>=0)) || ((PLA>-6-PD_IdleSwitchPlaThsld && PLA<-6) && (last(PLA)<0 && last(PLA)>-6))']

处理条件 1: ((PLA<2 + PD_IdleSwitchPlaThsld && PLA>2) && (last(PLA)<=2 && last(PLA)>=0)) || ((PLA>-6-PD_IdleSwitchPlaThsld && PLA<-6) && (last(PLA)<0 && last(PLA)>-6))
解析后的Python条件表达式: ((PLA < 2+PD_IdleSwitchPlaThsld and PLA > 2) and (_PLA_ <= 2 and _PLA_ >= 0)) or ((PLA > -6-PD_IdleSwitchPlaThsld and PLA < -6) and (_PLA_ < 0 and _PLA_ > -6))
变量及其范围: [{'name': 'PD_IdleSwitchPlaThsld', 'min_value': 0.0, 'max_value': 50.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PD_IdleSwitchPlaThsld'}, {'name': '_PLA_', 'min_value': -33.0, 'max_value': 85.0, 'var_type': 'float', 'is_last': True, 'original_var': 'PLA'}, {'name': 'PLA', 'min_value': -33.0, 'max_value': 85.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PLA'}]
解析后的条件: ((PLA < 2+PD_IdleSwitchPlaThsld and PLA > 2) and (_PLA_ <= 2 and _PLA_ >= 0)) or ((PLA > -6-PD_IdleSwitchPlaThsld and PLA < -6) and (_PLA_ < 0 and _PLA_ > -6))
识别到的变量: [{'name': 'PD_IdleSwitchPlaThsld', 'min_value': 0.0, 'max_value': 50.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PD_IdleSwitchPlaThsld'}, {'name': '_PLA_', 'min_value': -33.0, 'max_value': 85.0, 'var_type': 'float', 'is_last': True, 'original_var': 'PLA'}, {'name': 'PLA', 'min_value': -33.0, 'max_value': 85.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PLA'}]
处理的变量: ['PD_IdleSwitchPlaThsld', '_PLA_', 'PLA']
预处理后的条件: ((PLA < 2+PD_IdleSwitchPlaThsld and PLA > 2) and (_PLA_ <= 2 and _PLA_ >= 0)) or ((PLA > -6-PD_IdleSwitchPlaThsld and PLA < -6) and (_PLA_ < 0 and _PLA_ > -6))
提取的原子条件: [('PLA', '<', '2+PD_IdleSwitchPlaThsld'), ('PLA', '>', '2'), ('_PLA_', '<=', '2'), ('_PLA_', '>=', '0'), ('PLA', '>', '-6-PD_IdleSwitchPlaThsld'), ('PLA', '<', '-6'), ('_PLA_', '<', '0'), ('_PLA_', '>', '-6')]
表达式结构: {'AND_EXPR_2': ('and', ['ATOM_6', 'ATOM_7']), 'AND_EXPR_1': ('and', ['AND_EXPR_2', 'AND_EXPR_2']), 'OR_EXPR_0': ('or', ['AND_EXPR_1', 'AND_EXPR_1'])}
根表达式: OR_EXPR_0
警告: 无法解析变量 0
警告: 无法解析表达式 _PLA_ < 0
警告: 无法解析变量 -6
警告: 无法解析表达式 _PLA_ > -6
警告: 无法解析变量 0
警告: 无法解析表达式 _PLA_ < 0
警告: 无法解析变量 -6
警告: 无法解析表达式 _PLA_ > -6
警告: 无法解析变量 0
警告: 无法解析表达式 _PLA_ < 0
警告: 无法解析变量 -6
警告: 无法解析表达式 _PLA_ > -6
警告: 无法解析变量 0
警告: 无法解析表达式 _PLA_ < 0
警告: 无法解析变量 -6
警告: 无法解析表达式 _PLA_ > -6
构建的Z3表达式: Or(And(And(True, True), And(True, True)),
   And(And(True, True), And(True, True)))
警告: 无法解析变量 2+PD_IdleSwitchPlaThsld
警告: 无法解析表达式 PLA < 2+PD_IdleSwitchPlaThsld
警告: 无法解析变量 2
警告: 无法解析表达式 PLA > 2
警告: 无法解析变量 2
警告: 无法解析表达式 _PLA_ <= 2
警告: 无法解析变量 0
警告: 无法解析表达式 _PLA_ >= 0
警告: 无法解析变量 -6-PD_IdleSwitchPlaThsld
警告: 无法解析表达式 PLA > -6-PD_IdleSwitchPlaThsld
警告: 无法解析变量 -6
警告: 无法解析表达式 PLA < -6
警告: 无法解析变量 0
警告: 无法解析表达式 _PLA_ < 0
警告: 无法解析变量 -6
警告: 无法解析表达式 _PLA_ > -6
生成的MCDC条件数量: 0
生成的MCDC条件数量: 0

==================================================
处理模块: 慢车到慢车以上切换控制（处于转换逻辑一，控制模式设置）
提取到的if条件: ['((PLA<2 + PD_IdleSwitchPlaThsld && PLA>2) && (last(PLA)<=2 && last(PLA)>=0)) || ((PLA>-6-PD_IdleSwitchPlaThsld && PLA<-6) && (last(PLA)<0 && last(PLA)>-6))']

处理条件 1: ((PLA<2 + PD_IdleSwitchPlaThsld && PLA>2) && (last(PLA)<=2 && last(PLA)>=0)) || ((PLA>-6-PD_IdleSwitchPlaThsld && PLA<-6) && (last(PLA)<0 && last(PLA)>-6))
解析后的Python条件表达式: ((PLA < 2+PD_IdleSwitchPlaThsld and PLA > 2) and (_PLA_ <= 2 and _PLA_ >= 0)) or ((PLA > -6-PD_IdleSwitchPlaThsld and PLA < -6) and (_PLA_ < 0 and _PLA_ > -6))
变量及其范围: [{'name': 'PD_IdleSwitchPlaThsld', 'min_value': 0.0, 'max_value': 50.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PD_IdleSwitchPlaThsld'}, {'name': '_PLA_', 'min_value': -33.0, 'max_value': 85.0, 'var_type': 'float', 'is_last': True, 'original_var': 'PLA'}, {'name': 'PLA', 'min_value': -33.0, 'max_value': 85.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PLA'}]
解析后的条件: ((PLA < 2+PD_IdleSwitchPlaThsld and PLA > 2) and (_PLA_ <= 2 and _PLA_ >= 0)) or ((PLA > -6-PD_IdleSwitchPlaThsld and PLA < -6) and (_PLA_ < 0 and _PLA_ > -6))
识别到的变量: [{'name': 'PD_IdleSwitchPlaThsld', 'min_value': 0.0, 'max_value': 50.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PD_IdleSwitchPlaThsld'}, {'name': '_PLA_', 'min_value': -33.0, 'max_value': 85.0, 'var_type': 'float', 'is_last': True, 'original_var': 'PLA'}, {'name': 'PLA', 'min_value': -33.0, 'max_value': 85.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PLA'}]
处理的变量: ['PD_IdleSwitchPlaThsld', '_PLA_', 'PLA']
预处理后的条件: ((PLA < 2+PD_IdleSwitchPlaThsld and PLA > 2) and (_PLA_ <= 2 and _PLA_ >= 0)) or ((PLA > -6-PD_IdleSwitchPlaThsld and PLA < -6) and (_PLA_ < 0 and _PLA_ > -6))
提取的原子条件: [('PLA', '<', '2+PD_IdleSwitchPlaThsld'), ('PLA', '>', '2'), ('_PLA_', '<=', '2'), ('_PLA_', '>=', '0'), ('PLA', '>', '-6-PD_IdleSwitchPlaThsld'), ('PLA', '<', '-6'), ('_PLA_', '<', '0'), ('_PLA_', '>', '-6')]
表达式结构: {'AND_EXPR_2': ('and', ['ATOM_6', 'ATOM_7']), 'AND_EXPR_1': ('and', ['AND_EXPR_2', 'AND_EXPR_2']), 'OR_EXPR_0': ('or', ['AND_EXPR_1', 'AND_EXPR_1'])}
根表达式: OR_EXPR_0
警告: 无法解析变量 0
警告: 无法解析表达式 _PLA_ < 0
警告: 无法解析变量 -6
警告: 无法解析表达式 _PLA_ > -6
警告: 无法解析变量 0
警告: 无法解析表达式 _PLA_ < 0
警告: 无法解析变量 -6
警告: 无法解析表达式 _PLA_ > -6
警告: 无法解析变量 0
警告: 无法解析表达式 _PLA_ < 0
警告: 无法解析变量 -6
警告: 无法解析表达式 _PLA_ > -6
警告: 无法解析变量 0
警告: 无法解析表达式 _PLA_ < 0
警告: 无法解析变量 -6
警告: 无法解析表达式 _PLA_ > -6
构建的Z3表达式: Or(And(And(True, True), And(True, True)),
   And(And(True, True), And(True, True)))
警告: 无法解析变量 2+PD_IdleSwitchPlaThsld
警告: 无法解析表达式 PLA < 2+PD_IdleSwitchPlaThsld
警告: 无法解析变量 2
警告: 无法解析表达式 PLA > 2
警告: 无法解析变量 2
警告: 无法解析表达式 _PLA_ <= 2
警告: 无法解析变量 0
警告: 无法解析表达式 _PLA_ >= 0
警告: 无法解析变量 -6-PD_IdleSwitchPlaThsld
警告: 无法解析表达式 PLA > -6-PD_IdleSwitchPlaThsld
警告: 无法解析变量 -6
警告: 无法解析表达式 PLA < -6
警告: 无法解析变量 0
警告: 无法解析表达式 _PLA_ < 0
警告: 无法解析变量 -6
警告: 无法解析表达式 _PLA_ > -6
生成的MCDC条件数量: 0
生成的MCDC条件数量: 0

==================================================
处理模块: 慢车到慢车以上切换控制（处于转换逻辑一，N1R最终控制目标设置）
提取到的if条件: ['((PLA<2 + PD_IdleSwitchPlaThsld && PLA>2) && (last(PLA)<=2 && last(PLA)>=0)) || ((PLA>-6-PD_IdleSwitchPlaThsld && PLA<-6) && (last(PLA)<0 && last(PLA)>-6))']

处理条件 1: ((PLA<2 + PD_IdleSwitchPlaThsld && PLA>2) && (last(PLA)<=2 && last(PLA)>=0)) || ((PLA>-6-PD_IdleSwitchPlaThsld && PLA<-6) && (last(PLA)<0 && last(PLA)>-6))
解析后的Python条件表达式: ((PLA < 2+PD_IdleSwitchPlaThsld and PLA > 2) and (_PLA_ <= 2 and _PLA_ >= 0)) or ((PLA > -6-PD_IdleSwitchPlaThsld and PLA < -6) and (_PLA_ < 0 and _PLA_ > -6))
变量及其范围: [{'name': 'PD_IdleSwitchPlaThsld', 'min_value': 0.0, 'max_value': 50.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PD_IdleSwitchPlaThsld'}, {'name': '_PLA_', 'min_value': -33.0, 'max_value': 85.0, 'var_type': 'float', 'is_last': True, 'original_var': 'PLA'}, {'name': 'PLA', 'min_value': -33.0, 'max_value': 85.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PLA'}]
解析后的条件: ((PLA < 2+PD_IdleSwitchPlaThsld and PLA > 2) and (_PLA_ <= 2 and _PLA_ >= 0)) or ((PLA > -6-PD_IdleSwitchPlaThsld and PLA < -6) and (_PLA_ < 0 and _PLA_ > -6))
识别到的变量: [{'name': 'PD_IdleSwitchPlaThsld', 'min_value': 0.0, 'max_value': 50.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PD_IdleSwitchPlaThsld'}, {'name': '_PLA_', 'min_value': -33.0, 'max_value': 85.0, 'var_type': 'float', 'is_last': True, 'original_var': 'PLA'}, {'name': 'PLA', 'min_value': -33.0, 'max_value': 85.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PLA'}]
处理的变量: ['PD_IdleSwitchPlaThsld', '_PLA_', 'PLA']
预处理后的条件: ((PLA < 2+PD_IdleSwitchPlaThsld and PLA > 2) and (_PLA_ <= 2 and _PLA_ >= 0)) or ((PLA > -6-PD_IdleSwitchPlaThsld and PLA < -6) and (_PLA_ < 0 and _PLA_ > -6))
提取的原子条件: [('PLA', '<', '2+PD_IdleSwitchPlaThsld'), ('PLA', '>', '2'), ('_PLA_', '<=', '2'), ('_PLA_', '>=', '0'), ('PLA', '>', '-6-PD_IdleSwitchPlaThsld'), ('PLA', '<', '-6'), ('_PLA_', '<', '0'), ('_PLA_', '>', '-6')]
表达式结构: {'AND_EXPR_2': ('and', ['ATOM_6', 'ATOM_7']), 'AND_EXPR_1': ('and', ['AND_EXPR_2', 'AND_EXPR_2']), 'OR_EXPR_0': ('or', ['AND_EXPR_1', 'AND_EXPR_1'])}
根表达式: OR_EXPR_0
警告: 无法解析变量 0
警告: 无法解析表达式 _PLA_ < 0
警告: 无法解析变量 -6
警告: 无法解析表达式 _PLA_ > -6
警告: 无法解析变量 0
警告: 无法解析表达式 _PLA_ < 0
警告: 无法解析变量 -6
警告: 无法解析表达式 _PLA_ > -6
警告: 无法解析变量 0
警告: 无法解析表达式 _PLA_ < 0
警告: 无法解析变量 -6
警告: 无法解析表达式 _PLA_ > -6
警告: 无法解析变量 0
警告: 无法解析表达式 _PLA_ < 0
警告: 无法解析变量 -6
警告: 无法解析表达式 _PLA_ > -6
构建的Z3表达式: Or(And(And(True, True), And(True, True)),
   And(And(True, True), And(True, True)))
警告: 无法解析变量 2+PD_IdleSwitchPlaThsld
警告: 无法解析表达式 PLA < 2+PD_IdleSwitchPlaThsld
警告: 无法解析变量 2
警告: 无法解析表达式 PLA > 2
警告: 无法解析变量 2
警告: 无法解析表达式 _PLA_ <= 2
警告: 无法解析变量 0
警告: 无法解析表达式 _PLA_ >= 0
警告: 无法解析变量 -6-PD_IdleSwitchPlaThsld
警告: 无法解析表达式 PLA > -6-PD_IdleSwitchPlaThsld
警告: 无法解析变量 -6
警告: 无法解析表达式 PLA < -6
警告: 无法解析变量 0
警告: 无法解析表达式 _PLA_ < 0
警告: 无法解析变量 -6
警告: 无法解析表达式 _PLA_ > -6
生成的MCDC条件数量: 0
生成的MCDC条件数量: 0

==================================================
处理模块: 慢车到慢车以上切换控制（处于转换逻辑一，N2R25最终控制目标设置）
提取到的if条件: ['((PLA<2 + PD_IdleSwitchPlaThsld && PLA>2) && (last(PLA)<=2 && last(PLA)>=0)) || ((PLA>-6-PD_IdleSwitchPlaThsld && PLA<-6) && (last(PLA)<0 && last(PLA)>-6))']

处理条件 1: ((PLA<2 + PD_IdleSwitchPlaThsld && PLA>2) && (last(PLA)<=2 && last(PLA)>=0)) || ((PLA>-6-PD_IdleSwitchPlaThsld && PLA<-6) && (last(PLA)<0 && last(PLA)>-6))
解析后的Python条件表达式: ((PLA < 2+PD_IdleSwitchPlaThsld and PLA > 2) and (_PLA_ <= 2 and _PLA_ >= 0)) or ((PLA > -6-PD_IdleSwitchPlaThsld and PLA < -6) and (_PLA_ < 0 and _PLA_ > -6))
变量及其范围: [{'name': 'PD_IdleSwitchPlaThsld', 'min_value': 0.0, 'max_value': 50.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PD_IdleSwitchPlaThsld'}, {'name': '_PLA_', 'min_value': -33.0, 'max_value': 85.0, 'var_type': 'float', 'is_last': True, 'original_var': 'PLA'}, {'name': 'PLA', 'min_value': -33.0, 'max_value': 85.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PLA'}]
解析后的条件: ((PLA < 2+PD_IdleSwitchPlaThsld and PLA > 2) and (_PLA_ <= 2 and _PLA_ >= 0)) or ((PLA > -6-PD_IdleSwitchPlaThsld and PLA < -6) and (_PLA_ < 0 and _PLA_ > -6))
识别到的变量: [{'name': 'PD_IdleSwitchPlaThsld', 'min_value': 0.0, 'max_value': 50.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PD_IdleSwitchPlaThsld'}, {'name': '_PLA_', 'min_value': -33.0, 'max_value': 85.0, 'var_type': 'float', 'is_last': True, 'original_var': 'PLA'}, {'name': 'PLA', 'min_value': -33.0, 'max_value': 85.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PLA'}]
处理的变量: ['PD_IdleSwitchPlaThsld', '_PLA_', 'PLA']
预处理后的条件: ((PLA < 2+PD_IdleSwitchPlaThsld and PLA > 2) and (_PLA_ <= 2 and _PLA_ >= 0)) or ((PLA > -6-PD_IdleSwitchPlaThsld and PLA < -6) and (_PLA_ < 0 and _PLA_ > -6))
提取的原子条件: [('PLA', '<', '2+PD_IdleSwitchPlaThsld'), ('PLA', '>', '2'), ('_PLA_', '<=', '2'), ('_PLA_', '>=', '0'), ('PLA', '>', '-6-PD_IdleSwitchPlaThsld'), ('PLA', '<', '-6'), ('_PLA_', '<', '0'), ('_PLA_', '>', '-6')]
表达式结构: {'AND_EXPR_2': ('and', ['ATOM_6', 'ATOM_7']), 'AND_EXPR_1': ('and', ['AND_EXPR_2', 'AND_EXPR_2']), 'OR_EXPR_0': ('or', ['AND_EXPR_1', 'AND_EXPR_1'])}
根表达式: OR_EXPR_0
警告: 无法解析变量 0
警告: 无法解析表达式 _PLA_ < 0
警告: 无法解析变量 -6
警告: 无法解析表达式 _PLA_ > -6
警告: 无法解析变量 0
警告: 无法解析表达式 _PLA_ < 0
警告: 无法解析变量 -6
警告: 无法解析表达式 _PLA_ > -6
警告: 无法解析变量 0
警告: 无法解析表达式 _PLA_ < 0
警告: 无法解析变量 -6
警告: 无法解析表达式 _PLA_ > -6
警告: 无法解析变量 0
警告: 无法解析表达式 _PLA_ < 0
警告: 无法解析变量 -6
警告: 无法解析表达式 _PLA_ > -6
构建的Z3表达式: Or(And(And(True, True), And(True, True)),
   And(And(True, True), And(True, True)))
警告: 无法解析变量 2+PD_IdleSwitchPlaThsld
警告: 无法解析表达式 PLA < 2+PD_IdleSwitchPlaThsld
警告: 无法解析变量 2
警告: 无法解析表达式 PLA > 2
警告: 无法解析变量 2
警告: 无法解析表达式 _PLA_ <= 2
警告: 无法解析变量 0
警告: 无法解析表达式 _PLA_ >= 0
警告: 无法解析变量 -6-PD_IdleSwitchPlaThsld
警告: 无法解析表达式 PLA > -6-PD_IdleSwitchPlaThsld
警告: 无法解析变量 -6
警告: 无法解析表达式 PLA < -6
警告: 无法解析变量 0
警告: 无法解析表达式 _PLA_ < 0
警告: 无法解析变量 -6
警告: 无法解析表达式 _PLA_ > -6
生成的MCDC条件数量: 0
生成的MCDC条件数量: 0

==================================================
处理模块: 慢车到慢车以上切换控制（PLA大于等于零，计算转换过程N1R控制目标）
提取到的if条件: ['PLA >= 0']

处理条件 1: PLA >= 0
解析后的Python条件表达式: PLA >= 0
变量及其范围: [{'name': 'PLA', 'min_value': -33.0, 'max_value': 85.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PLA'}]
解析后的条件: PLA >= 0
识别到的变量: [{'name': 'PLA', 'min_value': -33.0, 'max_value': 85.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PLA'}]
处理的变量: ['PLA']
预处理后的条件: PLA >= 0
提取的原子条件: [('PLA', '>=', '0')]
表达式结构: {}
根表达式: ATOM_0
警告: 无法解析变量 0
警告: 无法解析表达式 PLA >= 0
构建的Z3表达式: True
警告: 无法解析变量 0
警告: 无法解析表达式 PLA >= 0
生成的MCDC条件数量: 0
生成的MCDC条件数量: 0

==================================================
处理模块: 慢车到慢车以上切换控制（PLA小于零，计算转换过程N1R控制目标N1Rrd）
提取到的if条件: ['PLA < 0']

处理条件 1: PLA < 0
解析后的Python条件表达式: PLA < 0
变量及其范围: [{'name': 'PLA', 'min_value': -33.0, 'max_value': 85.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PLA'}]
解析后的条件: PLA < 0
识别到的变量: [{'name': 'PLA', 'min_value': -33.0, 'max_value': 85.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PLA'}]
处理的变量: ['PLA']
预处理后的条件: PLA < 0
提取的原子条件: [('PLA', '<', '0')]
表达式结构: {}
根表达式: ATOM_0
警告: 无法解析变量 0
警告: 无法解析表达式 PLA < 0
构建的Z3表达式: True
警告: 无法解析变量 0
警告: 无法解析表达式 PLA < 0
生成的MCDC条件数量: 0
生成的MCDC条件数量: 0

==================================================
处理模块: 慢车到慢车以上切换控制（应用软件应退出转换逻辑一）
提取到的if条件: ['(abs(N1Rrd - N1Rtr) < PD_N1RpIdleOut * N1RDesign) || (duration(PD_IdleOutTime , ms, PLA > 2)) || (duration(PD_IdleOutTime, ms, PLA < -6)) || (N2R25p > PD_IdleSwitchN2R25pMax) || (N1Rp > PD_IdleSwitchN1RpMax) || (PLA <= -6 - PD_IdleSwitchPlaThsld) || (PLA >= 2 + PD_IdleSwitchPlaThsld) || ((PLA <= 2) && (PLA >= -6)) || (duration(PD_IdleOutTime , ms, logic_transition_mode == Logic1_Control_Mode))']

处理条件 1: (abs(N1Rrd - N1Rtr) < PD_N1RpIdleOut * N1RDesign) || (duration(PD_IdleOutTime , ms, PLA > 2)) || (duration(PD_IdleOutTime, ms, PLA < -6)) || (N2R25p > PD_IdleSwitchN2R25pMax) || (N1Rp > PD_IdleSwitchN1RpMax) || (PLA <= -6 - PD_IdleSwitchPlaThsld) || (PLA >= 2 + PD_IdleSwitchPlaThsld) || ((PLA <= 2) && (PLA >= -6)) || (duration(PD_IdleOutTime , ms, logic_transition_mode == Logic1_Control_Mode))
警告：未找到变量或常量定义：abs
警告：未找到变量或常量定义：duration
警告：未找到变量或常量定义：ms
解析后的Python条件表达式: (abs(N1Rrd-N1Rtr) < PD_N1RpIdleOut*N1RDesign) or (duration(PD_IdleOutTime,ms,PLA > 2)) or (duration(PD_IdleOutTime,ms,PLA < -6)) or (N2R25p > PD_IdleSwitchN2R25pMax) or (N1Rp > PD_IdleSwitchN1RpMax) or (PLA <= -6-PD_IdleSwitchPlaThsld) or (PLA >= 2+PD_IdleSwitchPlaThsld) or ((PLA <= 2) and (PLA >= -6)) or (duration(PD_IdleOutTime,ms,logic_transition_mode == Logic1_Control_Mode))
变量及其范围: [{'name': 'logic_transition_mode', 'min_value': 0.0, 'max_value': 6.0, 'var_type': 'int', 'is_last': False, 'original_var': 'logic_transition_mode'}, {'name': 'PD_IdleSwitchN1RpMax', 'min_value': 0.0, 'max_value': 1.2, 'var_type': 'float', 'is_last': False, 'original_var': 'PD_IdleSwitchN1RpMax'}, {'name': 'N1RDesign', 'min_value': 3866.0, 'max_value': 3866.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'N1RDesign', 'constant_value': 3866.0}, {'name': 'N2R25p', 'min_value': -30000.0, 'max_value': 30000.0, 'var_type': 'float', 'is_last': False, 'original_var': 'N2R25p'}, {'name': 'PD_IdleOutTime', 'min_value': 0.0, 'max_value': 100.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PD_IdleOutTime'}, {'name': 'PD_IdleSwitchPlaThsld', 'min_value': 0.0, 'max_value': 50.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PD_IdleSwitchPlaThsld'}, {'name': 'N1Rp', 'min_value': -30000.0, 'max_value': 30000.0, 'var_type': 'float', 'is_last': False, 'original_var': 'N1Rp'}, {'name': 'Logic1_Control_Mode', 'min_value': 2.0, 'max_value': 2.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'Logic1_Control_Mode', 'constant_value': 2.0}, {'name': 'PD_N1RpIdleOut', 'min_value': 0.0, 'max_value': 1.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PD_N1RpIdleOut'}, {'name': 'N1Rtr', 'min_value': -30000.0, 'max_value': 30000.0, 'var_type': 'float', 'is_last': False, 'original_var': 'N1Rtr'}, {'name': 'PLA', 'min_value': -33.0, 'max_value': 85.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PLA'}, {'name': 'PD_IdleSwitchN2R25pMax', 'min_value': 0.0, 'max_value': 1.2, 'var_type': 'float', 'is_last': False, 'original_var': 'PD_IdleSwitchN2R25pMax'}, {'name': 'N1Rrd', 'min_value': -30000.0, 'max_value': 30000.0, 'var_type': 'float', 'is_last': False, 'original_var': 'N1Rrd'}]
解析后的条件: (abs(N1Rrd-N1Rtr) < PD_N1RpIdleOut*N1RDesign) or (duration(PD_IdleOutTime,ms,PLA > 2)) or (duration(PD_IdleOutTime,ms,PLA < -6)) or (N2R25p > PD_IdleSwitchN2R25pMax) or (N1Rp > PD_IdleSwitchN1RpMax) or (PLA <= -6-PD_IdleSwitchPlaThsld) or (PLA >= 2+PD_IdleSwitchPlaThsld) or ((PLA <= 2) and (PLA >= -6)) or (duration(PD_IdleOutTime,ms,logic_transition_mode == Logic1_Control_Mode))
识别到的变量: [{'name': 'logic_transition_mode', 'min_value': 0.0, 'max_value': 6.0, 'var_type': 'int', 'is_last': False, 'original_var': 'logic_transition_mode'}, {'name': 'PD_IdleSwitchN1RpMax', 'min_value': 0.0, 'max_value': 1.2, 'var_type': 'float', 'is_last': False, 'original_var': 'PD_IdleSwitchN1RpMax'}, {'name': 'N1RDesign', 'min_value': 3866.0, 'max_value': 3866.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'N1RDesign', 'constant_value': 3866.0}, {'name': 'N2R25p', 'min_value': -30000.0, 'max_value': 30000.0, 'var_type': 'float', 'is_last': False, 'original_var': 'N2R25p'}, {'name': 'PD_IdleOutTime', 'min_value': 0.0, 'max_value': 100.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PD_IdleOutTime'}, {'name': 'PD_IdleSwitchPlaThsld', 'min_value': 0.0, 'max_value': 50.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PD_IdleSwitchPlaThsld'}, {'name': 'N1Rp', 'min_value': -30000.0, 'max_value': 30000.0, 'var_type': 'float', 'is_last': False, 'original_var': 'N1Rp'}, {'name': 'Logic1_Control_Mode', 'min_value': 2.0, 'max_value': 2.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'Logic1_Control_Mode', 'constant_value': 2.0}, {'name': 'PD_N1RpIdleOut', 'min_value': 0.0, 'max_value': 1.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PD_N1RpIdleOut'}, {'name': 'N1Rtr', 'min_value': -30000.0, 'max_value': 30000.0, 'var_type': 'float', 'is_last': False, 'original_var': 'N1Rtr'}, {'name': 'PLA', 'min_value': -33.0, 'max_value': 85.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PLA'}, {'name': 'PD_IdleSwitchN2R25pMax', 'min_value': 0.0, 'max_value': 1.2, 'var_type': 'float', 'is_last': False, 'original_var': 'PD_IdleSwitchN2R25pMax'}, {'name': 'N1Rrd', 'min_value': -30000.0, 'max_value': 30000.0, 'var_type': 'float', 'is_last': False, 'original_var': 'N1Rrd'}]
处理的变量: ['logic_transition_mode', 'PD_IdleSwitchN1RpMax', 'N1RDesign', 'N2R25p', 'PD_IdleOutTime', 'PD_IdleSwitchPlaThsld', 'N1Rp', 'Logic1_Control_Mode', 'PD_N1RpIdleOut', 'N1Rtr', 'PLA', 'PD_IdleSwitchN2R25pMax', 'N1Rrd']
预处理后的条件: (((N1Rrd-N1Rtr) if (N1Rrd-N1Rtr) >= 0 else -(N1Rrd-N1Rtr)) < PD_N1RpIdleOut*N1RDesign) or (True) or (True) or (N2R25p > PD_IdleSwitchN2R25pMax) or (N1Rp > PD_IdleSwitchN1RpMax) or (PLA <= -6-PD_IdleSwitchPlaThsld) or (PLA >= 2+PD_IdleSwitchPlaThsld) or ((PLA <= 2) and (PLA >= -6)) or (True)
提取的原子条件: [('((N1Rrd-N1Rtr) if (N1Rrd-N1Rtr)', '>=', '0 else -(N1Rrd-N1Rtr)) < PD_N1RpIdleOut*N1RDesign'), ('N2R25p', '>', 'PD_IdleSwitchN2R25pMax'), ('N1Rp', '>', 'PD_IdleSwitchN1RpMax'), ('PLA', '<=', '-6-PD_IdleSwitchPlaThsld'), ('PLA', '>=', '2+PD_IdleSwitchPlaThsld'), ('PLA', '<=', '2'), ('PLA', '>=', '-6')]
表达式结构: {'AND_EXPR_1': ('and', ['ATOM_5', 'ATOM_6']), 'OR_EXPR_0': ('or', ['ATOM_0', 'ATOM_0', 'ATOM_0', 'ATOM_1', 'ATOM_2', 'ATOM_3', 'ATOM_4', 'AND_EXPR_1', 'ATOM_6'])}
根表达式: OR_EXPR_0
警告: 无法解析变量 ((N1Rrd-N1Rtr) if (N1Rrd-N1Rtr)
警告: 无法解析变量 0 else -(N1Rrd-N1Rtr)) < PD_N1RpIdleOut*N1RDesign
警告: 无法解析表达式 ((N1Rrd-N1Rtr) if (N1Rrd-N1Rtr) >= 0 else -(N1Rrd-N1Rtr)) < PD_N1RpIdleOut*N1RDesign
警告: 无法解析变量 ((N1Rrd-N1Rtr) if (N1Rrd-N1Rtr)
警告: 无法解析变量 0 else -(N1Rrd-N1Rtr)) < PD_N1RpIdleOut*N1RDesign
警告: 无法解析表达式 ((N1Rrd-N1Rtr) if (N1Rrd-N1Rtr) >= 0 else -(N1Rrd-N1Rtr)) < PD_N1RpIdleOut*N1RDesign
警告: 无法解析变量 ((N1Rrd-N1Rtr) if (N1Rrd-N1Rtr)
警告: 无法解析变量 0 else -(N1Rrd-N1Rtr)) < PD_N1RpIdleOut*N1RDesign
警告: 无法解析表达式 ((N1Rrd-N1Rtr) if (N1Rrd-N1Rtr) >= 0 else -(N1Rrd-N1Rtr)) < PD_N1RpIdleOut*N1RDesign
警告: 无法解析变量 -6-PD_IdleSwitchPlaThsld
警告: 无法解析表达式 PLA <= -6-PD_IdleSwitchPlaThsld
警告: 无法解析变量 2+PD_IdleSwitchPlaThsld
警告: 无法解析表达式 PLA >= 2+PD_IdleSwitchPlaThsld
警告: 无法解析变量 2
警告: 无法解析表达式 PLA <= 2
警告: 无法解析变量 -6
警告: 无法解析表达式 PLA >= -6
警告: 无法解析变量 -6
警告: 无法解析表达式 PLA >= -6
构建的Z3表达式: Or(True,
   True,
   True,
   N2R25p > PD_IdleSwitchN2R25pMax,
   N1Rp > PD_IdleSwitchN1RpMax,
   True,
   True,
   And(True, True),
   True)
跳过只包含常量的条件: ((N1Rrd-N1Rtr) if (N1Rrd-N1Rtr) >= 0 else -(N1Rrd-N1Rtr)) < PD_N1RpIdleOut*N1RDesign
警告: 无法解析变量 -6-PD_IdleSwitchPlaThsld
警告: 无法解析表达式 PLA <= -6-PD_IdleSwitchPlaThsld
警告: 无法解析变量 2+PD_IdleSwitchPlaThsld
警告: 无法解析表达式 PLA >= 2+PD_IdleSwitchPlaThsld
警告: 无法解析变量 2
警告: 无法解析表达式 PLA <= 2
警告: 无法解析变量 -6
警告: 无法解析表达式 PLA >= -6
生成的MCDC条件数量: 0
生成的MCDC条件数量: 0

==================================================
处理模块: 慢车以上到慢车切换控制（油门杆从(2,85]推至[0,2]时）
提取到的if条件: ['(PLA <= 2 && PLA >= 0) && (last(PLA) > 2 && last(PLA) <= 85) && (N2r25 <= (N2R25Dem + N2R25Design * PD_DN2R25Switch)) && (N2r25 >= (N2R25Dem - N2R25Design * PD_DN2R25Switch))']

处理条件 1: (PLA <= 2 && PLA >= 0) && (last(PLA) > 2 && last(PLA) <= 85) && (N2r25 <= (N2R25Dem + N2R25Design * PD_DN2R25Switch)) && (N2r25 >= (N2R25Dem - N2R25Design * PD_DN2R25Switch))
解析后的Python条件表达式: (PLA <= 2 and PLA >= 0) and (_PLA_ > 2 and _PLA_ <= 85) and (N2r25 <= (N2R25Dem+N2R25Design*PD_DN2R25Switch)) and (N2r25 >= (N2R25Dem-N2R25Design*PD_DN2R25Switch))
变量及其范围: [{'name': 'N2r25', 'min_value': -30000.0, 'max_value': 30000.0, 'var_type': 'float', 'is_last': False, 'original_var': 'N2r25'}, {'name': 'N2R25Design', 'min_value': 16680.0, 'max_value': 16680.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'N2R25Design', 'constant_value': 16680.0}, {'name': '_PLA_', 'min_value': -33.0, 'max_value': 85.0, 'var_type': 'float', 'is_last': True, 'original_var': 'PLA'}, {'name': 'PLA', 'min_value': -33.0, 'max_value': 85.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PLA'}, {'name': 'PD_DN2R25Switch', 'min_value': 0.0, 'max_value': 0.5, 'var_type': 'float', 'is_last': False, 'original_var': 'PD_DN2R25Switch'}, {'name': 'N2R25Dem', 'min_value': 0.0, 'max_value': 20000.0, 'var_type': 'float', 'is_last': False, 'original_var': 'N2R25Dem'}]
解析后的条件: (PLA <= 2 and PLA >= 0) and (_PLA_ > 2 and _PLA_ <= 85) and (N2r25 <= (N2R25Dem+N2R25Design*PD_DN2R25Switch)) and (N2r25 >= (N2R25Dem-N2R25Design*PD_DN2R25Switch))
识别到的变量: [{'name': 'N2r25', 'min_value': -30000.0, 'max_value': 30000.0, 'var_type': 'float', 'is_last': False, 'original_var': 'N2r25'}, {'name': 'N2R25Design', 'min_value': 16680.0, 'max_value': 16680.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'N2R25Design', 'constant_value': 16680.0}, {'name': '_PLA_', 'min_value': -33.0, 'max_value': 85.0, 'var_type': 'float', 'is_last': True, 'original_var': 'PLA'}, {'name': 'PLA', 'min_value': -33.0, 'max_value': 85.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PLA'}, {'name': 'PD_DN2R25Switch', 'min_value': 0.0, 'max_value': 0.5, 'var_type': 'float', 'is_last': False, 'original_var': 'PD_DN2R25Switch'}, {'name': 'N2R25Dem', 'min_value': 0.0, 'max_value': 20000.0, 'var_type': 'float', 'is_last': False, 'original_var': 'N2R25Dem'}]
处理的变量: ['N2r25', 'N2R25Design', '_PLA_', 'PLA', 'PD_DN2R25Switch', 'N2R25Dem']
预处理后的条件: (PLA <= 2 and PLA >= 0) and (_PLA_ > 2 and _PLA_ <= 85) and (N2r25 <= (N2R25Dem+N2R25Design*PD_DN2R25Switch)) and (N2r25 >= (N2R25Dem-N2R25Design*PD_DN2R25Switch))
提取的原子条件: [('PLA', '<=', '2'), ('PLA', '>=', '0'), ('_PLA_', '>', '2'), ('_PLA_', '<=', '85'), ('N2r25', '<=', '(N2R25Dem+N2R25Design*PD_DN2R25Switch)'), ('N2r25', '>=', '(N2R25Dem-N2R25Design*PD_DN2R25Switch)')]
表达式结构: {'AND_EXPR_1': ('and', ['ATOM_2', 'ATOM_3']), 'AND_EXPR_0': ('and', ['AND_EXPR_1', 'AND_EXPR_1', 'ATOM_4', 'ATOM_5'])}
根表达式: AND_EXPR_0
警告: 无法解析变量 2
警告: 无法解析表达式 _PLA_ > 2
警告: 无法解析变量 85
警告: 无法解析表达式 _PLA_ <= 85
警告: 无法解析变量 2
警告: 无法解析表达式 _PLA_ > 2
警告: 无法解析变量 85
警告: 无法解析表达式 _PLA_ <= 85
警告: 无法解析变量 (N2R25Dem+N2R25Design*PD_DN2R25Switch)
警告: 无法解析表达式 N2r25 <= (N2R25Dem+N2R25Design*PD_DN2R25Switch)
警告: 无法解析变量 (N2R25Dem-N2R25Design*PD_DN2R25Switch)
警告: 无法解析表达式 N2r25 >= (N2R25Dem-N2R25Design*PD_DN2R25Switch)
构建的Z3表达式: And(And(True, True), And(True, True), True, True)
警告: 无法解析变量 2
警告: 无法解析表达式 PLA <= 2
警告: 无法解析变量 0
警告: 无法解析表达式 PLA >= 0
警告: 无法解析变量 2
警告: 无法解析表达式 _PLA_ > 2
警告: 无法解析变量 85
警告: 无法解析表达式 _PLA_ <= 85
警告: 无法解析变量 (N2R25Dem+N2R25Design*PD_DN2R25Switch)
警告: 无法解析表达式 N2r25 <= (N2R25Dem+N2R25Design*PD_DN2R25Switch)
警告: 无法解析变量 (N2R25Dem-N2R25Design*PD_DN2R25Switch)
警告: 无法解析表达式 N2r25 >= (N2R25Dem-N2R25Design*PD_DN2R25Switch)
生成的MCDC条件数量: 0
生成的MCDC条件数量: 0

==================================================
处理模块: 慢车以上到慢车切换控制（油门杆从[-33,-6)推至[-6,0)时）
提取到的if条件: ['(PLA < 0) && (PLA >= -6) && (last(PLA) >= -33) && (last(PLA) < -6) && (N2r25 <= (N2R25Dem + N2R25Design * PD_DN2R25Switch)) && (N2r25 >= (N2R25Dem - N2R25Design * PD_DN2R25Switch))']

处理条件 1: (PLA < 0) && (PLA >= -6) && (last(PLA) >= -33) && (last(PLA) < -6) && (N2r25 <= (N2R25Dem + N2R25Design * PD_DN2R25Switch)) && (N2r25 >= (N2R25Dem - N2R25Design * PD_DN2R25Switch))
解析后的Python条件表达式: (PLA < 0) and (PLA >= -6) and (_PLA_ >= -33) and (_PLA_ < -6) and (N2r25 <= (N2R25Dem+N2R25Design*PD_DN2R25Switch)) and (N2r25 >= (N2R25Dem-N2R25Design*PD_DN2R25Switch))
变量及其范围: [{'name': 'N2r25', 'min_value': -30000.0, 'max_value': 30000.0, 'var_type': 'float', 'is_last': False, 'original_var': 'N2r25'}, {'name': 'N2R25Design', 'min_value': 16680.0, 'max_value': 16680.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'N2R25Design', 'constant_value': 16680.0}, {'name': '_PLA_', 'min_value': -33.0, 'max_value': 85.0, 'var_type': 'float', 'is_last': True, 'original_var': 'PLA'}, {'name': 'PLA', 'min_value': -33.0, 'max_value': 85.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PLA'}, {'name': 'PD_DN2R25Switch', 'min_value': 0.0, 'max_value': 0.5, 'var_type': 'float', 'is_last': False, 'original_var': 'PD_DN2R25Switch'}, {'name': 'N2R25Dem', 'min_value': 0.0, 'max_value': 20000.0, 'var_type': 'float', 'is_last': False, 'original_var': 'N2R25Dem'}]
解析后的条件: (PLA < 0) and (PLA >= -6) and (_PLA_ >= -33) and (_PLA_ < -6) and (N2r25 <= (N2R25Dem+N2R25Design*PD_DN2R25Switch)) and (N2r25 >= (N2R25Dem-N2R25Design*PD_DN2R25Switch))
识别到的变量: [{'name': 'N2r25', 'min_value': -30000.0, 'max_value': 30000.0, 'var_type': 'float', 'is_last': False, 'original_var': 'N2r25'}, {'name': 'N2R25Design', 'min_value': 16680.0, 'max_value': 16680.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'N2R25Design', 'constant_value': 16680.0}, {'name': '_PLA_', 'min_value': -33.0, 'max_value': 85.0, 'var_type': 'float', 'is_last': True, 'original_var': 'PLA'}, {'name': 'PLA', 'min_value': -33.0, 'max_value': 85.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PLA'}, {'name': 'PD_DN2R25Switch', 'min_value': 0.0, 'max_value': 0.5, 'var_type': 'float', 'is_last': False, 'original_var': 'PD_DN2R25Switch'}, {'name': 'N2R25Dem', 'min_value': 0.0, 'max_value': 20000.0, 'var_type': 'float', 'is_last': False, 'original_var': 'N2R25Dem'}]
处理的变量: ['N2r25', 'N2R25Design', '_PLA_', 'PLA', 'PD_DN2R25Switch', 'N2R25Dem']
预处理后的条件: (PLA < 0) and (PLA >= -6) and (_PLA_ >= -33) and (_PLA_ < -6) and (N2r25 <= (N2R25Dem+N2R25Design*PD_DN2R25Switch)) and (N2r25 >= (N2R25Dem-N2R25Design*PD_DN2R25Switch))
提取的原子条件: [('PLA', '<', '0'), ('PLA', '>=', '-6'), ('_PLA_', '>=', '-33'), ('_PLA_', '<', '-6'), ('N2r25', '<=', '(N2R25Dem+N2R25Design*PD_DN2R25Switch)'), ('N2r25', '>=', '(N2R25Dem-N2R25Design*PD_DN2R25Switch)')]
表达式结构: {'AND_EXPR_0': ('and', ['ATOM_0', 'ATOM_1', 'ATOM_2', 'ATOM_3', 'ATOM_4', 'ATOM_5'])}
根表达式: AND_EXPR_0
警告: 无法解析变量 0
警告: 无法解析表达式 PLA < 0
警告: 无法解析变量 -6
警告: 无法解析表达式 PLA >= -6
警告: 无法解析变量 -33
警告: 无法解析表达式 _PLA_ >= -33
警告: 无法解析变量 -6
警告: 无法解析表达式 _PLA_ < -6
警告: 无法解析变量 (N2R25Dem+N2R25Design*PD_DN2R25Switch)
警告: 无法解析表达式 N2r25 <= (N2R25Dem+N2R25Design*PD_DN2R25Switch)
警告: 无法解析变量 (N2R25Dem-N2R25Design*PD_DN2R25Switch)
警告: 无法解析表达式 N2r25 >= (N2R25Dem-N2R25Design*PD_DN2R25Switch)
构建的Z3表达式: And(True, True, True, True, True, True)
警告: 无法解析变量 0
警告: 无法解析表达式 PLA < 0
警告: 无法解析变量 -6
警告: 无法解析表达式 PLA >= -6
警告: 无法解析变量 -33
警告: 无法解析表达式 _PLA_ >= -33
警告: 无法解析变量 -6
警告: 无法解析表达式 _PLA_ < -6
警告: 无法解析变量 (N2R25Dem+N2R25Design*PD_DN2R25Switch)
警告: 无法解析表达式 N2r25 <= (N2R25Dem+N2R25Design*PD_DN2R25Switch)
警告: 无法解析变量 (N2R25Dem-N2R25Design*PD_DN2R25Switch)
警告: 无法解析表达式 N2r25 >= (N2R25Dem-N2R25Design*PD_DN2R25Switch)
生成的MCDC条件数量: 0
生成的MCDC条件数量: 0

==================================================
处理模块: 慢车以上到慢车切换控制（处于转换逻辑二，控制模式设置）
提取到的if条件: ['(PLA<0 && PLA >=-6 && last(PLA)>=-33 && last(PLA)<-6 || PLA<=2 && PLA >=0 && last(PLA)>2 && last(PLA)<=85)']

处理条件 1: (PLA<0 && PLA >=-6 && last(PLA)>=-33 && last(PLA)<-6 || PLA<=2 && PLA >=0 && last(PLA)>2 && last(PLA)<=85)
解析后的Python条件表达式: (PLA < 0 and PLA >= -6 and _PLA_ >= -33 and _PLA_ < -6 or PLA <= 2 and PLA >= 0 and _PLA_ > 2 and _PLA_ <= 85)
变量及其范围: [{'name': '_PLA_', 'min_value': -33.0, 'max_value': 85.0, 'var_type': 'float', 'is_last': True, 'original_var': 'PLA'}, {'name': 'PLA', 'min_value': -33.0, 'max_value': 85.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PLA'}]
解析后的条件: (PLA < 0 and PLA >= -6 and _PLA_ >= -33 and _PLA_ < -6 or PLA <= 2 and PLA >= 0 and _PLA_ > 2 and _PLA_ <= 85)
识别到的变量: [{'name': '_PLA_', 'min_value': -33.0, 'max_value': 85.0, 'var_type': 'float', 'is_last': True, 'original_var': 'PLA'}, {'name': 'PLA', 'min_value': -33.0, 'max_value': 85.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PLA'}]
处理的变量: ['_PLA_', 'PLA']
预处理后的条件: (PLA < 0 and PLA >= -6 and _PLA_ >= -33 and _PLA_ < -6 or PLA <= 2 and PLA >= 0 and _PLA_ > 2 and _PLA_ <= 85)
提取的原子条件: [('PLA', '<', '0'), ('PLA', '>=', '-6'), ('_PLA_', '>=', '-33'), ('_PLA_', '<', '-6'), ('PLA', '<=', '2'), ('PLA', '>=', '0'), ('_PLA_', '>', '2'), ('_PLA_', '<=', '85')]
表达式结构: {'AND_EXPR_1': ('and', ['ATOM_4', 'ATOM_5', 'ATOM_6', 'ATOM_7']), 'OR_EXPR_0': ('or', ['AND_EXPR_1', 'AND_EXPR_1'])}
根表达式: OR_EXPR_0
警告: 无法解析变量 2
警告: 无法解析表达式 PLA <= 2
警告: 无法解析变量 0
警告: 无法解析表达式 PLA >= 0
警告: 无法解析变量 2
警告: 无法解析表达式 _PLA_ > 2
警告: 无法解析变量 85
警告: 无法解析表达式 _PLA_ <= 85
警告: 无法解析变量 2
警告: 无法解析表达式 PLA <= 2
警告: 无法解析变量 0
警告: 无法解析表达式 PLA >= 0
警告: 无法解析变量 2
警告: 无法解析表达式 _PLA_ > 2
警告: 无法解析变量 85
警告: 无法解析表达式 _PLA_ <= 85
构建的Z3表达式: Or(And(True, True, True, True), And(True, True, True, True))
警告: 无法解析变量 0
警告: 无法解析表达式 PLA < 0
警告: 无法解析变量 -6
警告: 无法解析表达式 PLA >= -6
警告: 无法解析变量 -33
警告: 无法解析表达式 _PLA_ >= -33
警告: 无法解析变量 -6
警告: 无法解析表达式 _PLA_ < -6
警告: 无法解析变量 2
警告: 无法解析表达式 PLA <= 2
警告: 无法解析变量 0
警告: 无法解析表达式 PLA >= 0
警告: 无法解析变量 2
警告: 无法解析表达式 _PLA_ > 2
警告: 无法解析变量 85
警告: 无法解析表达式 _PLA_ <= 85
生成的MCDC条件数量: 0
生成的MCDC条件数量: 0

==================================================
处理模块: 慢车以上到慢车切换控制（处于转换逻辑二，N1R最终控制目标设置）
提取到的if条件: ['(PLA<0 && PLA >=-6 && last(PLA)>=-33 && last(PLA)<-6 || PLA<=2 && PLA >=0 && last(PLA)>2 && last(PLA)<=85)']

处理条件 1: (PLA<0 && PLA >=-6 && last(PLA)>=-33 && last(PLA)<-6 || PLA<=2 && PLA >=0 && last(PLA)>2 && last(PLA)<=85)
解析后的Python条件表达式: (PLA < 0 and PLA >= -6 and _PLA_ >= -33 and _PLA_ < -6 or PLA <= 2 and PLA >= 0 and _PLA_ > 2 and _PLA_ <= 85)
变量及其范围: [{'name': '_PLA_', 'min_value': -33.0, 'max_value': 85.0, 'var_type': 'float', 'is_last': True, 'original_var': 'PLA'}, {'name': 'PLA', 'min_value': -33.0, 'max_value': 85.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PLA'}]
解析后的条件: (PLA < 0 and PLA >= -6 and _PLA_ >= -33 and _PLA_ < -6 or PLA <= 2 and PLA >= 0 and _PLA_ > 2 and _PLA_ <= 85)
识别到的变量: [{'name': '_PLA_', 'min_value': -33.0, 'max_value': 85.0, 'var_type': 'float', 'is_last': True, 'original_var': 'PLA'}, {'name': 'PLA', 'min_value': -33.0, 'max_value': 85.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PLA'}]
处理的变量: ['_PLA_', 'PLA']
预处理后的条件: (PLA < 0 and PLA >= -6 and _PLA_ >= -33 and _PLA_ < -6 or PLA <= 2 and PLA >= 0 and _PLA_ > 2 and _PLA_ <= 85)
提取的原子条件: [('PLA', '<', '0'), ('PLA', '>=', '-6'), ('_PLA_', '>=', '-33'), ('_PLA_', '<', '-6'), ('PLA', '<=', '2'), ('PLA', '>=', '0'), ('_PLA_', '>', '2'), ('_PLA_', '<=', '85')]
表达式结构: {'AND_EXPR_1': ('and', ['ATOM_4', 'ATOM_5', 'ATOM_6', 'ATOM_7']), 'OR_EXPR_0': ('or', ['AND_EXPR_1', 'AND_EXPR_1'])}
根表达式: OR_EXPR_0
警告: 无法解析变量 2
警告: 无法解析表达式 PLA <= 2
警告: 无法解析变量 0
警告: 无法解析表达式 PLA >= 0
警告: 无法解析变量 2
警告: 无法解析表达式 _PLA_ > 2
警告: 无法解析变量 85
警告: 无法解析表达式 _PLA_ <= 85
警告: 无法解析变量 2
警告: 无法解析表达式 PLA <= 2
警告: 无法解析变量 0
警告: 无法解析表达式 PLA >= 0
警告: 无法解析变量 2
警告: 无法解析表达式 _PLA_ > 2
警告: 无法解析变量 85
警告: 无法解析表达式 _PLA_ <= 85
构建的Z3表达式: Or(And(True, True, True, True), And(True, True, True, True))
警告: 无法解析变量 0
警告: 无法解析表达式 PLA < 0
警告: 无法解析变量 -6
警告: 无法解析表达式 PLA >= -6
警告: 无法解析变量 -33
警告: 无法解析表达式 _PLA_ >= -33
警告: 无法解析变量 -6
警告: 无法解析表达式 _PLA_ < -6
警告: 无法解析变量 2
警告: 无法解析表达式 PLA <= 2
警告: 无法解析变量 0
警告: 无法解析表达式 PLA >= 0
警告: 无法解析变量 2
警告: 无法解析表达式 _PLA_ > 2
警告: 无法解析变量 85
警告: 无法解析表达式 _PLA_ <= 85
生成的MCDC条件数量: 0
生成的MCDC条件数量: 0

==================================================
处理模块: 慢车以上到慢车切换控制（处于转换逻辑二，N2R25最终控制目标设置）
提取到的if条件: ['(PLA<0 && PLA >=-6 && last(PLA)>=-33 && last(PLA)<-6 || PLA<=2 && PLA >=0 && last(PLA)>2 && last(PLA)<=85)']

处理条件 1: (PLA<0 && PLA >=-6 && last(PLA)>=-33 && last(PLA)<-6 || PLA<=2 && PLA >=0 && last(PLA)>2 && last(PLA)<=85)
解析后的Python条件表达式: (PLA < 0 and PLA >= -6 and _PLA_ >= -33 and _PLA_ < -6 or PLA <= 2 and PLA >= 0 and _PLA_ > 2 and _PLA_ <= 85)
变量及其范围: [{'name': '_PLA_', 'min_value': -33.0, 'max_value': 85.0, 'var_type': 'float', 'is_last': True, 'original_var': 'PLA'}, {'name': 'PLA', 'min_value': -33.0, 'max_value': 85.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PLA'}]
解析后的条件: (PLA < 0 and PLA >= -6 and _PLA_ >= -33 and _PLA_ < -6 or PLA <= 2 and PLA >= 0 and _PLA_ > 2 and _PLA_ <= 85)
识别到的变量: [{'name': '_PLA_', 'min_value': -33.0, 'max_value': 85.0, 'var_type': 'float', 'is_last': True, 'original_var': 'PLA'}, {'name': 'PLA', 'min_value': -33.0, 'max_value': 85.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PLA'}]
处理的变量: ['_PLA_', 'PLA']
预处理后的条件: (PLA < 0 and PLA >= -6 and _PLA_ >= -33 and _PLA_ < -6 or PLA <= 2 and PLA >= 0 and _PLA_ > 2 and _PLA_ <= 85)
提取的原子条件: [('PLA', '<', '0'), ('PLA', '>=', '-6'), ('_PLA_', '>=', '-33'), ('_PLA_', '<', '-6'), ('PLA', '<=', '2'), ('PLA', '>=', '0'), ('_PLA_', '>', '2'), ('_PLA_', '<=', '85')]
表达式结构: {'AND_EXPR_1': ('and', ['ATOM_4', 'ATOM_5', 'ATOM_6', 'ATOM_7']), 'OR_EXPR_0': ('or', ['AND_EXPR_1', 'AND_EXPR_1'])}
根表达式: OR_EXPR_0
警告: 无法解析变量 2
警告: 无法解析表达式 PLA <= 2
警告: 无法解析变量 0
警告: 无法解析表达式 PLA >= 0
警告: 无法解析变量 2
警告: 无法解析表达式 _PLA_ > 2
警告: 无法解析变量 85
警告: 无法解析表达式 _PLA_ <= 85
警告: 无法解析变量 2
警告: 无法解析表达式 PLA <= 2
警告: 无法解析变量 0
警告: 无法解析表达式 PLA >= 0
警告: 无法解析变量 2
警告: 无法解析表达式 _PLA_ > 2
警告: 无法解析变量 85
警告: 无法解析表达式 _PLA_ <= 85
构建的Z3表达式: Or(And(True, True, True, True), And(True, True, True, True))
警告: 无法解析变量 0
警告: 无法解析表达式 PLA < 0
警告: 无法解析变量 -6
警告: 无法解析表达式 PLA >= -6
警告: 无法解析变量 -33
警告: 无法解析表达式 _PLA_ >= -33
警告: 无法解析变量 -6
警告: 无法解析表达式 _PLA_ < -6
警告: 无法解析变量 2
警告: 无法解析表达式 PLA <= 2
警告: 无法解析变量 0
警告: 无法解析表达式 PLA >= 0
警告: 无法解析变量 2
警告: 无法解析表达式 _PLA_ > 2
警告: 无法解析变量 85
警告: 无法解析表达式 _PLA_ <= 85
生成的MCDC条件数量: 0
生成的MCDC条件数量: 0

==================================================
处理模块: 慢车以上到慢车切换控制（计算转换过程N2R25控制目标N2R25rd）
提取到的if条件: ['N2r25<=N2R25_1']

处理条件 1: N2r25<=N2R25_1
解析后的Python条件表达式: N2r25 <= N2R25_1
变量及其范围: [{'name': 'N2R25_1', 'min_value': -30000.0, 'max_value': 30000.0, 'var_type': 'float', 'is_last': False, 'original_var': 'N2R25_1'}, {'name': 'N2r25', 'min_value': -30000.0, 'max_value': 30000.0, 'var_type': 'float', 'is_last': False, 'original_var': 'N2r25'}]
解析后的条件: N2r25 <= N2R25_1
识别到的变量: [{'name': 'N2R25_1', 'min_value': -30000.0, 'max_value': 30000.0, 'var_type': 'float', 'is_last': False, 'original_var': 'N2R25_1'}, {'name': 'N2r25', 'min_value': -30000.0, 'max_value': 30000.0, 'var_type': 'float', 'is_last': False, 'original_var': 'N2r25'}]
处理的变量: ['N2R25_1', 'N2r25']
预处理后的条件: N2r25 <= N2R25_1
提取的原子条件: [('N2r25', '<=', 'N2R25_1')]
表达式结构: {}
根表达式: ATOM_0
构建的Z3表达式: N2r25 <= N2R25_1
为原子条件 'N2r25 <= N2R25_1' 生成MCDC测试用例
生成的MCDC条件数量: 1
生成的MCDC条件数量: 1

生成的测试用例:
- 条件: N2r25<=N2R25_1
  测试用例: N2R25_1=0.0, N2r25=0.0
  预期结果: True
- 条件: N2r25<=N2R25_1
  测试用例: N2R25_1=0.0, N2r25=0.5
  预期结果: False

==================================================
处理模块: 慢车以上到慢车切换控制（应用软件应退出转换逻辑二）
提取到的if条件: ['(abs(N2R25rd - N2R25_1) < N2R25Design * PD_N2R25pIdleIn1) || (duration(PD_IdleInTime , ms, logic_transition_mode == Logic2_Control_Mode))  || (N2r25p < PD_IdleSwitchN2R25pMin) || (N1rp < PD_IdleSwitchN1RpMin) || (abs(N2r25 - N2R25Dem) > N2R25Design * PD_N2R25pIdleIn3) || (PLA > 2 && last(PLA) <= 2) || (last(PLA) >= -6 && PLA < -6)']

处理条件 1: (abs(N2R25rd - N2R25_1) < N2R25Design * PD_N2R25pIdleIn1) || (duration(PD_IdleInTime , ms, logic_transition_mode == Logic2_Control_Mode))  || (N2r25p < PD_IdleSwitchN2R25pMin) || (N1rp < PD_IdleSwitchN1RpMin) || (abs(N2r25 - N2R25Dem) > N2R25Design * PD_N2R25pIdleIn3) || (PLA > 2 && last(PLA) <= 2) || (last(PLA) >= -6 && PLA < -6)
警告：未找到变量或常量定义：duration
警告：未找到变量或常量定义：ms
警告：未找到变量或常量定义：abs
解析后的Python条件表达式: (abs(N2R25rd-N2R25_1) < N2R25Design*PD_N2R25pIdleIn1) or (duration(PD_IdleInTime,ms,logic_transition_mode == Logic2_Control_Mode)) or (N2r25p < PD_IdleSwitchN2R25pMin) or (N1rp < PD_IdleSwitchN1RpMin) or (abs(N2r25-N2R25Dem) > N2R25Design*PD_N2R25pIdleIn3) or (PLA > 2 and _PLA_ <= 2) or (_PLA_ >= -6 and PLA < -6)
变量及其范围: [{'name': 'N2R25_1', 'min_value': -30000.0, 'max_value': 30000.0, 'var_type': 'float', 'is_last': False, 'original_var': 'N2R25_1'}, {'name': 'logic_transition_mode', 'min_value': 0.0, 'max_value': 6.0, 'var_type': 'int', 'is_last': False, 'original_var': 'logic_transition_mode'}, {'name': 'PD_N2R25pIdleIn1', 'min_value': 0.0, 'max_value': 1.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PD_N2R25pIdleIn1'}, {'name': 'N2R25Design', 'min_value': 16680.0, 'max_value': 16680.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'N2R25Design', 'constant_value': 16680.0}, {'name': '_PLA_', 'min_value': -33.0, 'max_value': 85.0, 'var_type': 'float', 'is_last': True, 'original_var': 'PLA'}, {'name': 'N2R25Dem', 'min_value': 0.0, 'max_value': 20000.0, 'var_type': 'float', 'is_last': False, 'original_var': 'N2R25Dem'}, {'name': 'N2r25', 'min_value': -30000.0, 'max_value': 30000.0, 'var_type': 'float', 'is_last': False, 'original_var': 'N2r25'}, {'name': 'PD_N2R25pIdleIn3', 'min_value': 0.0, 'max_value': 1.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PD_N2R25pIdleIn3'}, {'name': 'PD_IdleInTime', 'min_value': 0.0, 'max_value': 100.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PD_IdleInTime'}, {'name': 'Logic2_Control_Mode', 'min_value': 3.0, 'max_value': 3.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'Logic2_Control_Mode', 'constant_value': 3.0}, {'name': 'PD_IdleSwitchN2R25pMin', 'min_value': 0.0, 'max_value': 1.2, 'var_type': 'float', 'is_last': False, 'original_var': 'PD_IdleSwitchN2R25pMin'}, {'name': 'N1rp', 'min_value': 0.0, 'max_value': 1.2, 'var_type': 'float', 'is_last': False, 'original_var': 'N1rp'}, {'name': 'N2r25p', 'min_value': 0.0, 'max_value': 1.2, 'var_type': 'float', 'is_last': False, 'original_var': 'N2r25p'}, {'name': 'N2R25rd', 'min_value': -30000.0, 'max_value': 30000.0, 'var_type': 'float', 'is_last': False, 'original_var': 'N2R25rd'}, {'name': 'PD_IdleSwitchN1RpMin', 'min_value': 0.0, 'max_value': 1.2, 'var_type': 'float', 'is_last': False, 'original_var': 'PD_IdleSwitchN1RpMin'}, {'name': 'PLA', 'min_value': -33.0, 'max_value': 85.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PLA'}]
解析后的条件: (abs(N2R25rd-N2R25_1) < N2R25Design*PD_N2R25pIdleIn1) or (duration(PD_IdleInTime,ms,logic_transition_mode == Logic2_Control_Mode)) or (N2r25p < PD_IdleSwitchN2R25pMin) or (N1rp < PD_IdleSwitchN1RpMin) or (abs(N2r25-N2R25Dem) > N2R25Design*PD_N2R25pIdleIn3) or (PLA > 2 and _PLA_ <= 2) or (_PLA_ >= -6 and PLA < -6)
识别到的变量: [{'name': 'N2R25_1', 'min_value': -30000.0, 'max_value': 30000.0, 'var_type': 'float', 'is_last': False, 'original_var': 'N2R25_1'}, {'name': 'logic_transition_mode', 'min_value': 0.0, 'max_value': 6.0, 'var_type': 'int', 'is_last': False, 'original_var': 'logic_transition_mode'}, {'name': 'PD_N2R25pIdleIn1', 'min_value': 0.0, 'max_value': 1.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PD_N2R25pIdleIn1'}, {'name': 'N2R25Design', 'min_value': 16680.0, 'max_value': 16680.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'N2R25Design', 'constant_value': 16680.0}, {'name': '_PLA_', 'min_value': -33.0, 'max_value': 85.0, 'var_type': 'float', 'is_last': True, 'original_var': 'PLA'}, {'name': 'N2R25Dem', 'min_value': 0.0, 'max_value': 20000.0, 'var_type': 'float', 'is_last': False, 'original_var': 'N2R25Dem'}, {'name': 'N2r25', 'min_value': -30000.0, 'max_value': 30000.0, 'var_type': 'float', 'is_last': False, 'original_var': 'N2r25'}, {'name': 'PD_N2R25pIdleIn3', 'min_value': 0.0, 'max_value': 1.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PD_N2R25pIdleIn3'}, {'name': 'PD_IdleInTime', 'min_value': 0.0, 'max_value': 100.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PD_IdleInTime'}, {'name': 'Logic2_Control_Mode', 'min_value': 3.0, 'max_value': 3.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'Logic2_Control_Mode', 'constant_value': 3.0}, {'name': 'PD_IdleSwitchN2R25pMin', 'min_value': 0.0, 'max_value': 1.2, 'var_type': 'float', 'is_last': False, 'original_var': 'PD_IdleSwitchN2R25pMin'}, {'name': 'N1rp', 'min_value': 0.0, 'max_value': 1.2, 'var_type': 'float', 'is_last': False, 'original_var': 'N1rp'}, {'name': 'N2r25p', 'min_value': 0.0, 'max_value': 1.2, 'var_type': 'float', 'is_last': False, 'original_var': 'N2r25p'}, {'name': 'N2R25rd', 'min_value': -30000.0, 'max_value': 30000.0, 'var_type': 'float', 'is_last': False, 'original_var': 'N2R25rd'}, {'name': 'PD_IdleSwitchN1RpMin', 'min_value': 0.0, 'max_value': 1.2, 'var_type': 'float', 'is_last': False, 'original_var': 'PD_IdleSwitchN1RpMin'}, {'name': 'PLA', 'min_value': -33.0, 'max_value': 85.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PLA'}]
处理的变量: ['N2R25_1', 'logic_transition_mode', 'PD_N2R25pIdleIn1', 'N2R25Design', '_PLA_', 'N2R25Dem', 'N2r25', 'PD_N2R25pIdleIn3', 'PD_IdleInTime', 'Logic2_Control_Mode', 'PD_IdleSwitchN2R25pMin', 'N1rp', 'N2r25p', 'N2R25rd', 'PD_IdleSwitchN1RpMin', 'PLA']
预处理后的条件: (((N2R25rd-N2R25_1) if (N2R25rd-N2R25_1) >= 0 else -(N2R25rd-N2R25_1)) < N2R25Design*PD_N2R25pIdleIn1) or (True) or (N2r25p < PD_IdleSwitchN2R25pMin) or (N1rp < PD_IdleSwitchN1RpMin) or (((N2r25-N2R25Dem) if (N2r25-N2R25Dem) >= 0 else -(N2r25-N2R25Dem)) > N2R25Design*PD_N2R25pIdleIn3) or (PLA > 2 and _PLA_ <= 2) or (_PLA_ >= -6 and PLA < -6)
提取的原子条件: [('((N2R25rd-N2R25_1) if (N2R25rd-N2R25_1)', '>=', '0 else -(N2R25rd-N2R25_1)) < N2R25Design*PD_N2R25pIdleIn1'), ('N2r25p', '<', 'PD_IdleSwitchN2R25pMin'), ('N1rp', '<', 'PD_IdleSwitchN1RpMin'), ('((N2r25-N2R25Dem) if (N2r25-N2R25Dem)', '>=', '0 else -(N2r25-N2R25Dem)) > N2R25Design*PD_N2R25pIdleIn3'), ('PLA', '>', '2'), ('_PLA_', '<=', '2'), ('_PLA_', '>=', '-6'), ('PLA', '<', '-6')]
表达式结构: {'AND_EXPR_1': ('and', ['ATOM_6', 'ATOM_7']), 'OR_EXPR_0': ('or', ['ATOM_0', 'ATOM_0', 'ATOM_1', 'ATOM_2', 'ATOM_3', 'AND_EXPR_1', 'AND_EXPR_1'])}
根表达式: OR_EXPR_0
警告: 无法解析变量 ((N2R25rd-N2R25_1) if (N2R25rd-N2R25_1)
警告: 无法解析变量 0 else -(N2R25rd-N2R25_1)) < N2R25Design*PD_N2R25pIdleIn1
警告: 无法解析表达式 ((N2R25rd-N2R25_1) if (N2R25rd-N2R25_1) >= 0 else -(N2R25rd-N2R25_1)) < N2R25Design*PD_N2R25pIdleIn1
警告: 无法解析变量 ((N2R25rd-N2R25_1) if (N2R25rd-N2R25_1)
警告: 无法解析变量 0 else -(N2R25rd-N2R25_1)) < N2R25Design*PD_N2R25pIdleIn1
警告: 无法解析表达式 ((N2R25rd-N2R25_1) if (N2R25rd-N2R25_1) >= 0 else -(N2R25rd-N2R25_1)) < N2R25Design*PD_N2R25pIdleIn1
警告: 无法解析变量 ((N2r25-N2R25Dem) if (N2r25-N2R25Dem)
警告: 无法解析变量 0 else -(N2r25-N2R25Dem)) > N2R25Design*PD_N2R25pIdleIn3
警告: 无法解析表达式 ((N2r25-N2R25Dem) if (N2r25-N2R25Dem) >= 0 else -(N2r25-N2R25Dem)) > N2R25Design*PD_N2R25pIdleIn3
警告: 无法解析变量 -6
警告: 无法解析表达式 _PLA_ >= -6
警告: 无法解析变量 -6
警告: 无法解析表达式 PLA < -6
警告: 无法解析变量 -6
警告: 无法解析表达式 _PLA_ >= -6
警告: 无法解析变量 -6
警告: 无法解析表达式 PLA < -6
构建的Z3表达式: Or(True,
   True,
   N2r25p < PD_IdleSwitchN2R25pMin,
   N1rp < PD_IdleSwitchN1RpMin,
   True,
   And(True, True),
   And(True, True))
警告: 无法解析变量 ((N2R25rd-N2R25_1) if (N2R25rd-N2R25_1)
警告: 无法解析变量 0 else -(N2R25rd-N2R25_1)) < N2R25Design*PD_N2R25pIdleIn1
警告: 无法解析表达式 ((N2R25rd-N2R25_1) if (N2R25rd-N2R25_1) >= 0 else -(N2R25rd-N2R25_1)) < N2R25Design*PD_N2R25pIdleIn1
警告: 无法解析变量 ((N2r25-N2R25Dem) if (N2r25-N2R25Dem)
警告: 无法解析变量 0 else -(N2r25-N2R25Dem)) > N2R25Design*PD_N2R25pIdleIn3
警告: 无法解析表达式 ((N2r25-N2R25Dem) if (N2r25-N2R25Dem) >= 0 else -(N2r25-N2R25Dem)) > N2R25Design*PD_N2R25pIdleIn3
警告: 无法解析变量 2
警告: 无法解析表达式 PLA > 2
警告: 无法解析变量 2
警告: 无法解析表达式 _PLA_ <= 2
警告: 无法解析变量 -6
警告: 无法解析表达式 _PLA_ >= -6
警告: 无法解析变量 -6
警告: 无法解析表达式 PLA < -6
生成的MCDC条件数量: 0
生成的MCDC条件数量: 0
