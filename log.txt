MCDC测试用例生成日志
==================================================


==================================================
处理模块: 确定推力控制转速目标值的计算周期
模块中没有if语句，跳过

==================================================
处理模块: 确定选定推力等级_无指定推力等级
提取到的if条件: ['(engine_state != ES_idle) && (engine_state != ES_above_idle) && (engine_state !=  ES_Hwindmill_start)']

处理条件 1: (engine_state != ES_idle) && (engine_state != ES_above_idle) && (engine_state !=  ES_Hwindmill_start)
解析后的Python条件表达式: (engine_state != ES_idle) and (engine_state != ES_above_idle) and (engine_state != ES_Hwindmill_start)
变量及其范围: [{'name': 'ES_Hwindmill_start', 'min_value': 12.0, 'max_value': 12.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'ES_Hwindmill_start', 'constant_value': 12.0}, {'name': 'ES_idle', 'min_value': 14.0, 'max_value': 14.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'ES_idle', 'constant_value': 14.0}, {'name': 'engine_state', 'min_value': 0.0, 'max_value': 16.0, 'var_type': 'int', 'is_last': False, 'original_var': 'engine_state'}, {'name': 'ES_above_idle', 'min_value': 15.0, 'max_value': 15.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'ES_above_idle', 'constant_value': 15.0}]
解析后的条件: (engine_state != ES_idle) and (engine_state != ES_above_idle) and (engine_state != ES_Hwindmill_start)
识别到的变量: [{'name': 'ES_Hwindmill_start', 'min_value': 12.0, 'max_value': 12.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'ES_Hwindmill_start', 'constant_value': 12.0}, {'name': 'ES_idle', 'min_value': 14.0, 'max_value': 14.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'ES_idle', 'constant_value': 14.0}, {'name': 'engine_state', 'min_value': 0.0, 'max_value': 16.0, 'var_type': 'int', 'is_last': False, 'original_var': 'engine_state'}, {'name': 'ES_above_idle', 'min_value': 15.0, 'max_value': 15.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'ES_above_idle', 'constant_value': 15.0}]
处理的变量: ['ES_Hwindmill_start', 'ES_idle', 'engine_state', 'ES_above_idle']
条件解析错误: (engine_state != ES_idle) and (engine_state != ES_above_idle) and (engine_state != ES_Hwindmill_start)
错误信息: Symbolic expressions cannot be cast to concrete Boolean values.
变量类型:
  ES_Hwindmill_start: <class 'z3.z3.IntNumRef'>
    - 是算术表达式
  ES_idle: <class 'z3.z3.IntNumRef'>
    - 是算术表达式
  engine_state: <class 'z3.z3.ArithRef'>
    - 是算术表达式
  ES_above_idle: <class 'z3.z3.IntNumRef'>
    - 是算术表达式
生成的MCDC条件数量: 0

==================================================
处理模块: 高压换算转速控制目标计算_地面慢车
模块中没有if语句，跳过

==================================================
处理模块: 高压换算转速控制目标计算_空中慢车
模块中没有if语句，跳过

==================================================
处理模块: 高压换算转速控制目标计算_进近慢车
模块中没有if语句，跳过

==================================================
处理模块: 高压换算转速控制目标计算_反推慢车
模块中没有if语句，跳过

==================================================
处理模块: N2R25Dem_BAK计算
模块中没有if语句，跳过

==================================================
处理模块: N2R25Dem选择_地面慢车
提取到的if条件: ['thrust_level == level_GI']

处理条件 1: thrust_level == level_GI
解析后的Python条件表达式: thrust_level == level_GI
变量及其范围: [{'name': 'thrust_level', 'min_value': 0.0, 'max_value': 23.0, 'var_type': 'int', 'is_last': False, 'original_var': 'thrust_level'}, {'name': 'level_GI', 'min_value': 4.0, 'max_value': 4.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_GI', 'constant_value': 4.0}]
解析后的条件: thrust_level == level_GI
识别到的变量: [{'name': 'thrust_level', 'min_value': 0.0, 'max_value': 23.0, 'var_type': 'int', 'is_last': False, 'original_var': 'thrust_level'}, {'name': 'level_GI', 'min_value': 4.0, 'max_value': 4.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_GI', 'constant_value': 4.0}]
处理的变量: ['thrust_level', 'level_GI']
Z3表达式: 4 == thrust_level
表达式类型: <class 'z3.z3.BoolRef'>
生成的MCDC条件数量: 1

生成的测试用例:
- 条件: thrust_level == level_GI
  测试用例: level_GI=4.0, thrust_level=4
  预期结果: True
- 条件: thrust_level == level_GI
  测试用例: level_GI=4.0, thrust_level=3
  预期结果: False

==================================================
处理模块: N2R25Dem选择_空中慢车
提取到的if条件: ['thrust_level == level_FI']

处理条件 1: thrust_level == level_FI
解析后的Python条件表达式: thrust_level == level_FI
变量及其范围: [{'name': 'level_FI', 'min_value': 5.0, 'max_value': 5.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_FI', 'constant_value': 5.0}, {'name': 'thrust_level', 'min_value': 0.0, 'max_value': 23.0, 'var_type': 'int', 'is_last': False, 'original_var': 'thrust_level'}]
解析后的条件: thrust_level == level_FI
识别到的变量: [{'name': 'level_FI', 'min_value': 5.0, 'max_value': 5.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_FI', 'constant_value': 5.0}, {'name': 'thrust_level', 'min_value': 0.0, 'max_value': 23.0, 'var_type': 'int', 'is_last': False, 'original_var': 'thrust_level'}]
处理的变量: ['level_FI', 'thrust_level']
Z3表达式: 5 == thrust_level
表达式类型: <class 'z3.z3.BoolRef'>
生成的MCDC条件数量: 1

生成的测试用例:
- 条件: thrust_level == level_FI
  测试用例: level_FI=5.0, thrust_level=5
  预期结果: True
- 条件: thrust_level == level_FI
  测试用例: level_FI=5.0, thrust_level=4
  预期结果: False

==================================================
处理模块: N2R25Dem选择_进近慢车
提取到的if条件: ['thrust_level == level_AI']

处理条件 1: thrust_level == level_AI
解析后的Python条件表达式: thrust_level == level_AI
变量及其范围: [{'name': 'thrust_level', 'min_value': 0.0, 'max_value': 23.0, 'var_type': 'int', 'is_last': False, 'original_var': 'thrust_level'}, {'name': 'level_AI', 'min_value': 6.0, 'max_value': 6.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_AI', 'constant_value': 6.0}]
解析后的条件: thrust_level == level_AI
识别到的变量: [{'name': 'thrust_level', 'min_value': 0.0, 'max_value': 23.0, 'var_type': 'int', 'is_last': False, 'original_var': 'thrust_level'}, {'name': 'level_AI', 'min_value': 6.0, 'max_value': 6.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_AI', 'constant_value': 6.0}]
处理的变量: ['thrust_level', 'level_AI']
Z3表达式: 6 == thrust_level
表达式类型: <class 'z3.z3.BoolRef'>
生成的MCDC条件数量: 1

生成的测试用例:
- 条件: thrust_level == level_AI
  测试用例: level_AI=6.0, thrust_level=6
  预期结果: True
- 条件: thrust_level == level_AI
  测试用例: level_AI=6.0, thrust_level=5
  预期结果: False

==================================================
处理模块: N2R25Dem选择_反推慢车
提取到的if条件: ['thrust_level == level_RI']

处理条件 1: thrust_level == level_RI
解析后的Python条件表达式: thrust_level == level_RI
变量及其范围: [{'name': 'level_RI', 'min_value': 3.0, 'max_value': 3.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_RI', 'constant_value': 3.0}, {'name': 'thrust_level', 'min_value': 0.0, 'max_value': 23.0, 'var_type': 'int', 'is_last': False, 'original_var': 'thrust_level'}]
解析后的条件: thrust_level == level_RI
识别到的变量: [{'name': 'level_RI', 'min_value': 3.0, 'max_value': 3.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_RI', 'constant_value': 3.0}, {'name': 'thrust_level', 'min_value': 0.0, 'max_value': 23.0, 'var_type': 'int', 'is_last': False, 'original_var': 'thrust_level'}]
处理的变量: ['level_RI', 'thrust_level']
Z3表达式: 3 == thrust_level
表达式类型: <class 'z3.z3.BoolRef'>
生成的MCDC条件数量: 1

生成的测试用例:
- 条件: thrust_level == level_RI
  测试用例: level_RI=3.0, thrust_level=3
  预期结果: True
- 条件: thrust_level == level_RI
  测试用例: level_RI=3.0, thrust_level=2
  预期结果: False

==================================================
处理模块: N2R25Dem选择_补充1
提取到的if条件: ['thrust_level != level_GI && thrust_level != level_FI && thrust_level != level_AI && thrust_level != level_RI && thrust_level != level_default']

处理条件 1: thrust_level != level_GI && thrust_level != level_FI && thrust_level != level_AI && thrust_level != level_RI && thrust_level != level_default
解析后的Python条件表达式: thrust_level != level_GI and thrust_level != level_FI and thrust_level != level_AI and thrust_level != level_RI and thrust_level != level_default
变量及其范围: [{'name': 'thrust_level', 'min_value': 0.0, 'max_value': 23.0, 'var_type': 'int', 'is_last': False, 'original_var': 'thrust_level'}, {'name': 'level_AI', 'min_value': 6.0, 'max_value': 6.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_AI', 'constant_value': 6.0}, {'name': 'level_default', 'min_value': 0.0, 'max_value': 0.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_default', 'constant_value': 0.0}, {'name': 'level_RI', 'min_value': 3.0, 'max_value': 3.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_RI', 'constant_value': 3.0}, {'name': 'level_GI', 'min_value': 4.0, 'max_value': 4.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_GI', 'constant_value': 4.0}, {'name': 'level_FI', 'min_value': 5.0, 'max_value': 5.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_FI', 'constant_value': 5.0}]
解析后的条件: thrust_level != level_GI and thrust_level != level_FI and thrust_level != level_AI and thrust_level != level_RI and thrust_level != level_default
识别到的变量: [{'name': 'thrust_level', 'min_value': 0.0, 'max_value': 23.0, 'var_type': 'int', 'is_last': False, 'original_var': 'thrust_level'}, {'name': 'level_AI', 'min_value': 6.0, 'max_value': 6.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_AI', 'constant_value': 6.0}, {'name': 'level_default', 'min_value': 0.0, 'max_value': 0.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_default', 'constant_value': 0.0}, {'name': 'level_RI', 'min_value': 3.0, 'max_value': 3.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_RI', 'constant_value': 3.0}, {'name': 'level_GI', 'min_value': 4.0, 'max_value': 4.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_GI', 'constant_value': 4.0}, {'name': 'level_FI', 'min_value': 5.0, 'max_value': 5.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_FI', 'constant_value': 5.0}]
处理的变量: ['thrust_level', 'level_AI', 'level_default', 'level_RI', 'level_GI', 'level_FI']
条件解析错误: thrust_level != level_GI and thrust_level != level_FI and thrust_level != level_AI and thrust_level != level_RI and thrust_level != level_default
错误信息: Symbolic expressions cannot be cast to concrete Boolean values.
变量类型:
  thrust_level: <class 'z3.z3.ArithRef'>
    - 是算术表达式
  level_AI: <class 'z3.z3.IntNumRef'>
    - 是算术表达式
  level_default: <class 'z3.z3.IntNumRef'>
    - 是算术表达式
  level_RI: <class 'z3.z3.IntNumRef'>
    - 是算术表达式
  level_GI: <class 'z3.z3.IntNumRef'>
    - 是算术表达式
  level_FI: <class 'z3.z3.IntNumRef'>
    - 是算术表达式
生成的MCDC条件数量: 0

==================================================
处理模块: N2R25Dem选择_补充2
提取到的if条件: ['thrust_level == level_default && engine_state == ES_ ground_start']

处理条件 1: thrust_level == level_default && engine_state == ES_ ground_start
解析后的Python条件表达式: thrust_level == level_default and engine_state == ES_ground_start
变量及其范围: [{'name': 'thrust_level', 'min_value': 0.0, 'max_value': 23.0, 'var_type': 'int', 'is_last': False, 'original_var': 'thrust_level'}, {'name': 'engine_state', 'min_value': 0.0, 'max_value': 16.0, 'var_type': 'int', 'is_last': False, 'original_var': 'engine_state'}, {'name': 'level_default', 'min_value': 0.0, 'max_value': 0.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_default', 'constant_value': 0.0}, {'name': 'ES_ground_start', 'min_value': 9.0, 'max_value': 9.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'ES_ground_start', 'constant_value': 9.0}]
解析后的条件: thrust_level == level_default and engine_state == ES_ground_start
识别到的变量: [{'name': 'thrust_level', 'min_value': 0.0, 'max_value': 23.0, 'var_type': 'int', 'is_last': False, 'original_var': 'thrust_level'}, {'name': 'engine_state', 'min_value': 0.0, 'max_value': 16.0, 'var_type': 'int', 'is_last': False, 'original_var': 'engine_state'}, {'name': 'level_default', 'min_value': 0.0, 'max_value': 0.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_default', 'constant_value': 0.0}, {'name': 'ES_ground_start', 'min_value': 9.0, 'max_value': 9.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'ES_ground_start', 'constant_value': 9.0}]
处理的变量: ['thrust_level', 'engine_state', 'level_default', 'ES_ground_start']
Z3表达式: 0 == thrust_level
表达式类型: <class 'z3.z3.BoolRef'>
生成的MCDC条件数量: 0

==================================================
处理模块: N2R25Dem选择_补充3
提取到的if条件: ['thrust_level == level_default && (engine_state == ES_windmill_start || engine_state == ES_Qwindmill_start || engine_state == ES_assist_start)']

处理条件 1: thrust_level == level_default && (engine_state == ES_windmill_start || engine_state == ES_Qwindmill_start || engine_state == ES_assist_start)
解析后的Python条件表达式: thrust_level == level_default and (engine_state == ES_windmill_start or engine_state == ES_Qwindmill_start or engine_state == ES_assist_start)
变量及其范围: [{'name': 'thrust_level', 'min_value': 0.0, 'max_value': 23.0, 'var_type': 'int', 'is_last': False, 'original_var': 'thrust_level'}, {'name': 'ES_assist_start', 'min_value': 10.0, 'max_value': 10.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'ES_assist_start', 'constant_value': 10.0}, {'name': 'level_default', 'min_value': 0.0, 'max_value': 0.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_default', 'constant_value': 0.0}, {'name': 'ES_Qwindmill_start', 'min_value': 13.0, 'max_value': 13.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'ES_Qwindmill_start', 'constant_value': 13.0}, {'name': 'engine_state', 'min_value': 0.0, 'max_value': 16.0, 'var_type': 'int', 'is_last': False, 'original_var': 'engine_state'}, {'name': 'ES_windmill_start', 'min_value': 11.0, 'max_value': 11.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'ES_windmill_start', 'constant_value': 11.0}]
解析后的条件: thrust_level == level_default and (engine_state == ES_windmill_start or engine_state == ES_Qwindmill_start or engine_state == ES_assist_start)
识别到的变量: [{'name': 'thrust_level', 'min_value': 0.0, 'max_value': 23.0, 'var_type': 'int', 'is_last': False, 'original_var': 'thrust_level'}, {'name': 'ES_assist_start', 'min_value': 10.0, 'max_value': 10.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'ES_assist_start', 'constant_value': 10.0}, {'name': 'level_default', 'min_value': 0.0, 'max_value': 0.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_default', 'constant_value': 0.0}, {'name': 'ES_Qwindmill_start', 'min_value': 13.0, 'max_value': 13.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'ES_Qwindmill_start', 'constant_value': 13.0}, {'name': 'engine_state', 'min_value': 0.0, 'max_value': 16.0, 'var_type': 'int', 'is_last': False, 'original_var': 'engine_state'}, {'name': 'ES_windmill_start', 'min_value': 11.0, 'max_value': 11.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'ES_windmill_start', 'constant_value': 11.0}]
处理的变量: ['thrust_level', 'ES_assist_start', 'level_default', 'ES_Qwindmill_start', 'engine_state', 'ES_windmill_start']
Z3表达式: 0 == thrust_level
表达式类型: <class 'z3.z3.BoolRef'>
生成的MCDC条件数量: 0

==================================================
处理模块: N2R25Dem选择_补充4
提取到的if条件: ['thrust_level == level_default && (engine_state == ES_origin || engine_state == ES_ground_standby || engine_state == ES_flight_standby || engine_state == ES_cold_operation || engine_state == ES_DR_OS_Us || engine_state == ES_normal_stop || engine_state == ES_emergency_stop || engine_state == ES_ground_start_termination || engine_state == ES_flight_start_terminnation )']

处理条件 1: thrust_level == level_default && (engine_state == ES_origin || engine_state == ES_ground_standby || engine_state == ES_flight_standby || engine_state == ES_cold_operation || engine_state == ES_DR_OS_Us || engine_state == ES_normal_stop || engine_state == ES_emergency_stop || engine_state == ES_ground_start_termination || engine_state == ES_flight_start_terminnation )
解析后的Python条件表达式: thrust_level == level_default and (engine_state == ES_origin or engine_state == ES_ground_standby or engine_state == ES_flight_standby or engine_state == ES_cold_operation or engine_state == ES_DR_OS_Us or engine_state == ES_normal_stop or engine_state == ES_emergency_stop or engine_state == ES_ground_start_termination or engine_state == ES_flight_start_terminnation)
变量及其范围: [{'name': 'thrust_level', 'min_value': 0.0, 'max_value': 23.0, 'var_type': 'int', 'is_last': False, 'original_var': 'thrust_level'}, {'name': 'ES_normal_stop', 'min_value': 5.0, 'max_value': 5.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'ES_normal_stop', 'constant_value': 5.0}, {'name': 'level_default', 'min_value': 0.0, 'max_value': 0.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_default', 'constant_value': 0.0}, {'name': 'ES_cold_operation', 'min_value': 3.0, 'max_value': 3.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'ES_cold_operation', 'constant_value': 3.0}, {'name': 'engine_state', 'min_value': 0.0, 'max_value': 16.0, 'var_type': 'int', 'is_last': False, 'original_var': 'engine_state'}, {'name': 'ES_DR_OS_Us', 'min_value': 4.0, 'max_value': 4.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'ES_DR_OS_Us', 'constant_value': 4.0}, {'name': 'ES_ground_standby', 'min_value': 1.0, 'max_value': 1.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'ES_ground_standby', 'constant_value': 1.0}, {'name': 'ES_emergency_stop', 'min_value': 6.0, 'max_value': 6.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'ES_emergency_stop', 'constant_value': 6.0}, {'name': 'ES_ground_start_termination', 'min_value': 7.0, 'max_value': 7.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'ES_ground_start_termination', 'constant_value': 7.0}, {'name': 'ES_flight_start_terminnation', 'min_value': 8.0, 'max_value': 8.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'ES_flight_start_terminnation', 'constant_value': 8.0}, {'name': 'ES_flight_standby', 'min_value': 2.0, 'max_value': 2.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'ES_flight_standby', 'constant_value': 2.0}, {'name': 'ES_origin', 'min_value': 0.0, 'max_value': 0.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'ES_origin', 'constant_value': 0.0}]
解析后的条件: thrust_level == level_default and (engine_state == ES_origin or engine_state == ES_ground_standby or engine_state == ES_flight_standby or engine_state == ES_cold_operation or engine_state == ES_DR_OS_Us or engine_state == ES_normal_stop or engine_state == ES_emergency_stop or engine_state == ES_ground_start_termination or engine_state == ES_flight_start_terminnation)
识别到的变量: [{'name': 'thrust_level', 'min_value': 0.0, 'max_value': 23.0, 'var_type': 'int', 'is_last': False, 'original_var': 'thrust_level'}, {'name': 'ES_normal_stop', 'min_value': 5.0, 'max_value': 5.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'ES_normal_stop', 'constant_value': 5.0}, {'name': 'level_default', 'min_value': 0.0, 'max_value': 0.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_default', 'constant_value': 0.0}, {'name': 'ES_cold_operation', 'min_value': 3.0, 'max_value': 3.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'ES_cold_operation', 'constant_value': 3.0}, {'name': 'engine_state', 'min_value': 0.0, 'max_value': 16.0, 'var_type': 'int', 'is_last': False, 'original_var': 'engine_state'}, {'name': 'ES_DR_OS_Us', 'min_value': 4.0, 'max_value': 4.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'ES_DR_OS_Us', 'constant_value': 4.0}, {'name': 'ES_ground_standby', 'min_value': 1.0, 'max_value': 1.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'ES_ground_standby', 'constant_value': 1.0}, {'name': 'ES_emergency_stop', 'min_value': 6.0, 'max_value': 6.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'ES_emergency_stop', 'constant_value': 6.0}, {'name': 'ES_ground_start_termination', 'min_value': 7.0, 'max_value': 7.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'ES_ground_start_termination', 'constant_value': 7.0}, {'name': 'ES_flight_start_terminnation', 'min_value': 8.0, 'max_value': 8.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'ES_flight_start_terminnation', 'constant_value': 8.0}, {'name': 'ES_flight_standby', 'min_value': 2.0, 'max_value': 2.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'ES_flight_standby', 'constant_value': 2.0}, {'name': 'ES_origin', 'min_value': 0.0, 'max_value': 0.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'ES_origin', 'constant_value': 0.0}]
处理的变量: ['thrust_level', 'ES_normal_stop', 'level_default', 'ES_cold_operation', 'engine_state', 'ES_DR_OS_Us', 'ES_ground_standby', 'ES_emergency_stop', 'ES_ground_start_termination', 'ES_flight_start_terminnation', 'ES_flight_standby', 'ES_origin']
Z3表达式: 0 == thrust_level
表达式类型: <class 'z3.z3.BoolRef'>
生成的MCDC条件数量: 1

生成的测试用例:
- 条件: thrust_level == level_default && (engine_state == ES_origin || engine_state == ES_ground_standby || engine_state == ES_flight_standby || engine_state == ES_cold_operation || engine_state == ES_DR_OS_Us || engine_state == ES_normal_stop || engine_state == ES_emergency_stop || engine_state == ES_ground_start_termination || engine_state == ES_flight_start_terminnation )
  测试用例: ES_DR_OS_Us=4.0, ES_cold_operation=3.0, ES_emergency_stop=6.0, ES_flight_standby=2.0, ES_flight_start_terminnation=8.0, ES_ground_standby=1.0, ES_ground_start_termination=7.0, ES_normal_stop=5.0, ES_origin=0.0, engine_state=0, level_default=0.0, thrust_level=0
  预期结果: True
- 条件: thrust_level == level_default && (engine_state == ES_origin || engine_state == ES_ground_standby || engine_state == ES_flight_standby || engine_state == ES_cold_operation || engine_state == ES_DR_OS_Us || engine_state == ES_normal_stop || engine_state == ES_emergency_stop || engine_state == ES_ground_start_termination || engine_state == ES_flight_start_terminnation )
  测试用例: ES_DR_OS_Us=4.0, ES_cold_operation=3.0, ES_emergency_stop=6.0, ES_flight_standby=2.0, ES_flight_start_terminnation=8.0, ES_ground_standby=1.0, ES_ground_start_termination=7.0, ES_normal_stop=5.0, ES_origin=0.0, engine_state=0, level_default=0.0, thrust_level=1
  预期结果: False

==================================================
处理模块: 设置起飞锁定指令_有效
提取到的if条件: ['airdis_WOW ==1 && CAS > PD_ToLockCASHigh && PLA >71 && PLA <= 76']

处理条件 1: airdis_WOW ==1 && CAS > PD_ToLockCASHigh && PLA >71 && PLA <= 76
解析后的Python条件表达式: airdis_WOW == 1 and CAS > PD_ToLockCASHigh and PLA > 71 and PLA <= 76
变量及其范围: [{'name': 'PLA', 'min_value': -33.0, 'max_value': 85.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PLA'}, {'name': 'CAS', 'min_value': -30000.0, 'max_value': 30000.0, 'var_type': 'float', 'is_last': False, 'original_var': 'CAS'}, {'name': 'PD_ToLockCASHigh', 'min_value': 0.0, 'max_value': 1000.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PD_ToLockCASHigh'}, {'name': 'airdis_WOW', 'min_value': 0.0, 'max_value': 1.0, 'var_type': 'bool', 'is_last': False, 'original_var': 'airdis_WOW'}]
解析后的条件: airdis_WOW == 1 and CAS > PD_ToLockCASHigh and PLA > 71 and PLA <= 76
识别到的变量: [{'name': 'PLA', 'min_value': -33.0, 'max_value': 85.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PLA'}, {'name': 'CAS', 'min_value': -30000.0, 'max_value': 30000.0, 'var_type': 'float', 'is_last': False, 'original_var': 'CAS'}, {'name': 'PD_ToLockCASHigh', 'min_value': 0.0, 'max_value': 1000.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PD_ToLockCASHigh'}, {'name': 'airdis_WOW', 'min_value': 0.0, 'max_value': 1.0, 'var_type': 'bool', 'is_last': False, 'original_var': 'airdis_WOW'}]
处理的变量: ['PLA', 'CAS', 'PD_ToLockCASHigh', 'airdis_WOW']
Z3表达式: airdis_WOW == 1
表达式类型: <class 'z3.z3.BoolRef'>
生成的MCDC条件数量: 0

==================================================
处理模块: 设置起飞锁定指令_无效
提取到的if条件: ['H–H_TO>PD_ToLockHLow || airdis_WOW==1&&CAS<PD_ToLockCASLow || engine_state == ES_flight_interrupt']

处理条件 1: H–H_TO>PD_ToLockHLow || airdis_WOW==1&&CAS<PD_ToLockCASLow || engine_state == ES_flight_interrupt
解析后的Python条件表达式: H–H_TO > PD_ToLockHLow or airdis_WOW == 1 and CAS < PD_ToLockCASLow or engine_state == ES_flight_interrupt
变量及其范围: [{'name': 'engine_state', 'min_value': 0.0, 'max_value': 16.0, 'var_type': 'int', 'is_last': False, 'original_var': 'engine_state'}, {'name': 'H_TO', 'min_value': -30000.0, 'max_value': 30000.0, 'var_type': 'float', 'is_last': False, 'original_var': 'H_TO'}, {'name': 'airdis_WOW', 'min_value': 0.0, 'max_value': 1.0, 'var_type': 'bool', 'is_last': False, 'original_var': 'airdis_WOW'}, {'name': 'PD_ToLockCASLow', 'min_value': 0.0, 'max_value': 1000.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PD_ToLockCASLow'}, {'name': 'CAS', 'min_value': -30000.0, 'max_value': 30000.0, 'var_type': 'float', 'is_last': False, 'original_var': 'CAS'}, {'name': 'ES_flight_interrupt', 'min_value': 16.0, 'max_value': 16.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'ES_flight_interrupt', 'constant_value': 16.0}, {'name': 'PD_ToLockHLow', 'min_value': 0.0, 'max_value': 20000.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PD_ToLockHLow'}, {'name': 'H', 'min_value': -2000.0, 'max_value': 50000.0, 'var_type': 'float', 'is_last': False, 'original_var': 'H'}]
解析后的条件: H–H_TO > PD_ToLockHLow or airdis_WOW == 1 and CAS < PD_ToLockCASLow or engine_state == ES_flight_interrupt
识别到的变量: [{'name': 'engine_state', 'min_value': 0.0, 'max_value': 16.0, 'var_type': 'int', 'is_last': False, 'original_var': 'engine_state'}, {'name': 'H_TO', 'min_value': -30000.0, 'max_value': 30000.0, 'var_type': 'float', 'is_last': False, 'original_var': 'H_TO'}, {'name': 'airdis_WOW', 'min_value': 0.0, 'max_value': 1.0, 'var_type': 'bool', 'is_last': False, 'original_var': 'airdis_WOW'}, {'name': 'PD_ToLockCASLow', 'min_value': 0.0, 'max_value': 1000.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PD_ToLockCASLow'}, {'name': 'CAS', 'min_value': -30000.0, 'max_value': 30000.0, 'var_type': 'float', 'is_last': False, 'original_var': 'CAS'}, {'name': 'ES_flight_interrupt', 'min_value': 16.0, 'max_value': 16.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'ES_flight_interrupt', 'constant_value': 16.0}, {'name': 'PD_ToLockHLow', 'min_value': 0.0, 'max_value': 20000.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PD_ToLockHLow'}, {'name': 'H', 'min_value': -2000.0, 'max_value': 50000.0, 'var_type': 'float', 'is_last': False, 'original_var': 'H'}]
处理的变量: ['engine_state', 'H_TO', 'airdis_WOW', 'PD_ToLockCASLow', 'CAS', 'ES_flight_interrupt', 'PD_ToLockHLow', 'H']
条件解析错误: H–H_TO > PD_ToLockHLow or airdis_WOW == 1 and CAS < PD_ToLockCASLow or engine_state == ES_flight_interrupt
错误信息: invalid character '–' (U+2013) (<string>, line 1)
变量类型:
  engine_state: <class 'z3.z3.ArithRef'>
    - 是算术表达式
  H_TO: <class 'z3.z3.ArithRef'>
    - 是算术表达式
  airdis_WOW: <class 'z3.z3.ArithRef'>
    - 是算术表达式
  PD_ToLockCASLow: <class 'z3.z3.ArithRef'>
    - 是算术表达式
  CAS: <class 'z3.z3.ArithRef'>
    - 是算术表达式
  ES_flight_interrupt: <class 'z3.z3.IntNumRef'>
    - 是算术表达式
  PD_ToLockHLow: <class 'z3.z3.ArithRef'>
    - 是算术表达式
  H: <class 'z3.z3.ArithRef'>
    - 是算术表达式
生成的MCDC条件数量: 0

==================================================
处理模块: 设置起飞锁定指令_无效优先
提取到的if条件: ['airdis_WOW ==1 && CAS > PD_ToLockCASHigh && PLA >71 && PLA <= 76\n&& (H – H_TO == PD_ToLockHLow ||( airdis_WOW == 1 &&CAS <PD_ToLockCASLow ) && engine_state == ES_flight_interrupt)']

处理条件 1: airdis_WOW ==1 && CAS > PD_ToLockCASHigh && PLA >71 && PLA <= 76
&& (H – H_TO == PD_ToLockHLow ||( airdis_WOW == 1 &&CAS <PD_ToLockCASLow ) && engine_state == ES_flight_interrupt)
解析后的Python条件表达式: airdis_WOW == 1 and CAS > PD_ToLockCASHigh and PLA > 71 and PLA <= 76 and (H–H_TO == PD_ToLockHLow or (airdis_WOW == 1 and CAS < PD_ToLockCASLow) and engine_state == ES_flight_interrupt)
变量及其范围: [{'name': 'engine_state', 'min_value': 0.0, 'max_value': 16.0, 'var_type': 'int', 'is_last': False, 'original_var': 'engine_state'}, {'name': 'PD_ToLockCASHigh', 'min_value': 0.0, 'max_value': 1000.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PD_ToLockCASHigh'}, {'name': 'H_TO', 'min_value': -30000.0, 'max_value': 30000.0, 'var_type': 'float', 'is_last': False, 'original_var': 'H_TO'}, {'name': 'airdis_WOW', 'min_value': 0.0, 'max_value': 1.0, 'var_type': 'bool', 'is_last': False, 'original_var': 'airdis_WOW'}, {'name': 'PLA', 'min_value': -33.0, 'max_value': 85.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PLA'}, {'name': 'PD_ToLockCASLow', 'min_value': 0.0, 'max_value': 1000.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PD_ToLockCASLow'}, {'name': 'CAS', 'min_value': -30000.0, 'max_value': 30000.0, 'var_type': 'float', 'is_last': False, 'original_var': 'CAS'}, {'name': 'ES_flight_interrupt', 'min_value': 16.0, 'max_value': 16.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'ES_flight_interrupt', 'constant_value': 16.0}, {'name': 'PD_ToLockHLow', 'min_value': 0.0, 'max_value': 20000.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PD_ToLockHLow'}, {'name': 'H', 'min_value': -2000.0, 'max_value': 50000.0, 'var_type': 'float', 'is_last': False, 'original_var': 'H'}]
解析后的条件: airdis_WOW == 1 and CAS > PD_ToLockCASHigh and PLA > 71 and PLA <= 76 and (H–H_TO == PD_ToLockHLow or (airdis_WOW == 1 and CAS < PD_ToLockCASLow) and engine_state == ES_flight_interrupt)
识别到的变量: [{'name': 'engine_state', 'min_value': 0.0, 'max_value': 16.0, 'var_type': 'int', 'is_last': False, 'original_var': 'engine_state'}, {'name': 'PD_ToLockCASHigh', 'min_value': 0.0, 'max_value': 1000.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PD_ToLockCASHigh'}, {'name': 'H_TO', 'min_value': -30000.0, 'max_value': 30000.0, 'var_type': 'float', 'is_last': False, 'original_var': 'H_TO'}, {'name': 'airdis_WOW', 'min_value': 0.0, 'max_value': 1.0, 'var_type': 'bool', 'is_last': False, 'original_var': 'airdis_WOW'}, {'name': 'PLA', 'min_value': -33.0, 'max_value': 85.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PLA'}, {'name': 'PD_ToLockCASLow', 'min_value': 0.0, 'max_value': 1000.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PD_ToLockCASLow'}, {'name': 'CAS', 'min_value': -30000.0, 'max_value': 30000.0, 'var_type': 'float', 'is_last': False, 'original_var': 'CAS'}, {'name': 'ES_flight_interrupt', 'min_value': 16.0, 'max_value': 16.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'ES_flight_interrupt', 'constant_value': 16.0}, {'name': 'PD_ToLockHLow', 'min_value': 0.0, 'max_value': 20000.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PD_ToLockHLow'}, {'name': 'H', 'min_value': -2000.0, 'max_value': 50000.0, 'var_type': 'float', 'is_last': False, 'original_var': 'H'}]
处理的变量: ['engine_state', 'PD_ToLockCASHigh', 'H_TO', 'airdis_WOW', 'PLA', 'PD_ToLockCASLow', 'CAS', 'ES_flight_interrupt', 'PD_ToLockHLow', 'H']
条件解析错误: airdis_WOW == 1 and CAS > PD_ToLockCASHigh and PLA > 71 and PLA <= 76 and (H–H_TO == PD_ToLockHLow or (airdis_WOW == 1 and CAS < PD_ToLockCASLow) and engine_state == ES_flight_interrupt)
错误信息: invalid character '–' (U+2013) (<string>, line 1)
变量类型:
  engine_state: <class 'z3.z3.ArithRef'>
    - 是算术表达式
  PD_ToLockCASHigh: <class 'z3.z3.ArithRef'>
    - 是算术表达式
  H_TO: <class 'z3.z3.ArithRef'>
    - 是算术表达式
  airdis_WOW: <class 'z3.z3.ArithRef'>
    - 是算术表达式
  PLA: <class 'z3.z3.ArithRef'>
    - 是算术表达式
  PD_ToLockCASLow: <class 'z3.z3.ArithRef'>
    - 是算术表达式
  CAS: <class 'z3.z3.ArithRef'>
    - 是算术表达式
  ES_flight_interrupt: <class 'z3.z3.IntNumRef'>
    - 是算术表达式
  PD_ToLockHLow: <class 'z3.z3.ArithRef'>
    - 是算术表达式
  H: <class 'z3.z3.ArithRef'>
    - 是算术表达式
生成的MCDC条件数量: 0

==================================================
处理模块: 设置起飞阶段指令_有效
提取到的if条件: ['airdis_WOW == 1 && WOW_ground_time > PD_ToPhaseTime1&&CAS < PD_ToPhaseCASHigh && PLA >71 && PLA <= 76']

处理条件 1: airdis_WOW == 1 && WOW_ground_time > PD_ToPhaseTime1&&CAS < PD_ToPhaseCASHigh && PLA >71 && PLA <= 76
解析后的Python条件表达式: airdis_WOW == 1 and WOW_ground_time > PD_ToPhaseTime1 and CAS < PD_ToPhaseCASHigh and PLA > 71 and PLA <= 76
变量及其范围: [{'name': 'WOW_ground_time', 'min_value': -30000.0, 'max_value': 30000.0, 'var_type': 'float', 'is_last': False, 'original_var': 'WOW_ground_time'}, {'name': 'airdis_WOW', 'min_value': 0.0, 'max_value': 1.0, 'var_type': 'bool', 'is_last': False, 'original_var': 'airdis_WOW'}, {'name': 'PD_ToPhaseTime1', 'min_value': -30000.0, 'max_value': 30000.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PD_ToPhaseTime1'}, {'name': 'PLA', 'min_value': -33.0, 'max_value': 85.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PLA'}, {'name': 'CAS', 'min_value': -30000.0, 'max_value': 30000.0, 'var_type': 'float', 'is_last': False, 'original_var': 'CAS'}, {'name': 'PD_ToPhaseCASHigh', 'min_value': -30000.0, 'max_value': 30000.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PD_ToPhaseCASHigh'}]
解析后的条件: airdis_WOW == 1 and WOW_ground_time > PD_ToPhaseTime1 and CAS < PD_ToPhaseCASHigh and PLA > 71 and PLA <= 76
识别到的变量: [{'name': 'WOW_ground_time', 'min_value': -30000.0, 'max_value': 30000.0, 'var_type': 'float', 'is_last': False, 'original_var': 'WOW_ground_time'}, {'name': 'airdis_WOW', 'min_value': 0.0, 'max_value': 1.0, 'var_type': 'bool', 'is_last': False, 'original_var': 'airdis_WOW'}, {'name': 'PD_ToPhaseTime1', 'min_value': -30000.0, 'max_value': 30000.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PD_ToPhaseTime1'}, {'name': 'PLA', 'min_value': -33.0, 'max_value': 85.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PLA'}, {'name': 'CAS', 'min_value': -30000.0, 'max_value': 30000.0, 'var_type': 'float', 'is_last': False, 'original_var': 'CAS'}, {'name': 'PD_ToPhaseCASHigh', 'min_value': -30000.0, 'max_value': 30000.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PD_ToPhaseCASHigh'}]
处理的变量: ['WOW_ground_time', 'airdis_WOW', 'PD_ToPhaseTime1', 'PLA', 'CAS', 'PD_ToPhaseCASHigh']
Z3表达式: airdis_WOW == 1
表达式类型: <class 'z3.z3.BoolRef'>
生成的MCDC条件数量: 0

==================================================
处理模块: 设置起飞阶段指令_无效
提取到的if条件: ['WOW_to_ground_time > PD_ToPhaseTime2 || H-H_TO > PD_ToPhaseHLow || CAS > PD_ToPhaseCASLow || engine_state == ES_flight_interrupt']

处理条件 1: WOW_to_ground_time > PD_ToPhaseTime2 || H-H_TO > PD_ToPhaseHLow || CAS > PD_ToPhaseCASLow || engine_state == ES_flight_interrupt
解析后的Python条件表达式: WOW_to_ground_time > PD_ToPhaseTime2 or H-H_TO > PD_ToPhaseHLow or CAS > PD_ToPhaseCASLow or engine_state == ES_flight_interrupt
变量及其范围: [{'name': 'engine_state', 'min_value': 0.0, 'max_value': 16.0, 'var_type': 'int', 'is_last': False, 'original_var': 'engine_state'}, {'name': 'H_TO', 'min_value': -30000.0, 'max_value': 30000.0, 'var_type': 'float', 'is_last': False, 'original_var': 'H_TO'}, {'name': 'PD_ToPhaseCASLow', 'min_value': -30000.0, 'max_value': 30000.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PD_ToPhaseCASLow'}, {'name': 'ES_flight_interrupt', 'min_value': 16.0, 'max_value': 16.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'ES_flight_interrupt', 'constant_value': 16.0}, {'name': 'CAS', 'min_value': -30000.0, 'max_value': 30000.0, 'var_type': 'float', 'is_last': False, 'original_var': 'CAS'}, {'name': 'H', 'min_value': -2000.0, 'max_value': 50000.0, 'var_type': 'float', 'is_last': False, 'original_var': 'H'}, {'name': 'PD_ToPhaseTime2', 'min_value': -30000.0, 'max_value': 30000.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PD_ToPhaseTime2'}, {'name': 'WOW_to_ground_time', 'min_value': -30000.0, 'max_value': 30000.0, 'var_type': 'float', 'is_last': False, 'original_var': 'WOW_to_ground_time'}, {'name': 'PD_ToPhaseHLow', 'min_value': -30000.0, 'max_value': 30000.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PD_ToPhaseHLow'}]
解析后的条件: WOW_to_ground_time > PD_ToPhaseTime2 or H-H_TO > PD_ToPhaseHLow or CAS > PD_ToPhaseCASLow or engine_state == ES_flight_interrupt
识别到的变量: [{'name': 'engine_state', 'min_value': 0.0, 'max_value': 16.0, 'var_type': 'int', 'is_last': False, 'original_var': 'engine_state'}, {'name': 'H_TO', 'min_value': -30000.0, 'max_value': 30000.0, 'var_type': 'float', 'is_last': False, 'original_var': 'H_TO'}, {'name': 'PD_ToPhaseCASLow', 'min_value': -30000.0, 'max_value': 30000.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PD_ToPhaseCASLow'}, {'name': 'ES_flight_interrupt', 'min_value': 16.0, 'max_value': 16.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'ES_flight_interrupt', 'constant_value': 16.0}, {'name': 'CAS', 'min_value': -30000.0, 'max_value': 30000.0, 'var_type': 'float', 'is_last': False, 'original_var': 'CAS'}, {'name': 'H', 'min_value': -2000.0, 'max_value': 50000.0, 'var_type': 'float', 'is_last': False, 'original_var': 'H'}, {'name': 'PD_ToPhaseTime2', 'min_value': -30000.0, 'max_value': 30000.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PD_ToPhaseTime2'}, {'name': 'WOW_to_ground_time', 'min_value': -30000.0, 'max_value': 30000.0, 'var_type': 'float', 'is_last': False, 'original_var': 'WOW_to_ground_time'}, {'name': 'PD_ToPhaseHLow', 'min_value': -30000.0, 'max_value': 30000.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PD_ToPhaseHLow'}]
处理的变量: ['engine_state', 'H_TO', 'PD_ToPhaseCASLow', 'ES_flight_interrupt', 'CAS', 'H', 'PD_ToPhaseTime2', 'WOW_to_ground_time', 'PD_ToPhaseHLow']
条件解析错误: WOW_to_ground_time > PD_ToPhaseTime2 or H-H_TO > PD_ToPhaseHLow or CAS > PD_ToPhaseCASLow or engine_state == ES_flight_interrupt
错误信息: Symbolic expressions cannot be cast to concrete Boolean values.
变量类型:
  engine_state: <class 'z3.z3.ArithRef'>
    - 是算术表达式
  H_TO: <class 'z3.z3.ArithRef'>
    - 是算术表达式
  PD_ToPhaseCASLow: <class 'z3.z3.ArithRef'>
    - 是算术表达式
  ES_flight_interrupt: <class 'z3.z3.IntNumRef'>
    - 是算术表达式
  CAS: <class 'z3.z3.ArithRef'>
    - 是算术表达式
  H: <class 'z3.z3.ArithRef'>
    - 是算术表达式
  PD_ToPhaseTime2: <class 'z3.z3.ArithRef'>
    - 是算术表达式
  WOW_to_ground_time: <class 'z3.z3.ArithRef'>
    - 是算术表达式
  PD_ToPhaseHLow: <class 'z3.z3.ArithRef'>
    - 是算术表达式
生成的MCDC条件数量: 0

==================================================
处理模块: 设置起飞阶段指令_无效优先
提取到的if条件: ['airdis_WOW == 1 && WOW_ground_time > PD_ToPhaseTime1&&CAS < PD_ToPhaseCASHigh && PLA >71 && PLA <= 76 && (WOW_to_ground_time > PD_ToPhaseTime2 || H-H_TO > PD_ToPhaseHLow || CAS > PD_ToPhaseCASLow || engine_state == ES_flight_interrupt)']

处理条件 1: airdis_WOW == 1 && WOW_ground_time > PD_ToPhaseTime1&&CAS < PD_ToPhaseCASHigh && PLA >71 && PLA <= 76 && (WOW_to_ground_time > PD_ToPhaseTime2 || H-H_TO > PD_ToPhaseHLow || CAS > PD_ToPhaseCASLow || engine_state == ES_flight_interrupt)
解析后的Python条件表达式: airdis_WOW == 1 and WOW_ground_time > PD_ToPhaseTime1 and CAS < PD_ToPhaseCASHigh and PLA > 71 and PLA <= 76 and (WOW_to_ground_time > PD_ToPhaseTime2 or H-H_TO > PD_ToPhaseHLow or CAS > PD_ToPhaseCASLow or engine_state == ES_flight_interrupt)
变量及其范围: [{'name': 'PD_ToPhaseCASHigh', 'min_value': -30000.0, 'max_value': 30000.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PD_ToPhaseCASHigh'}, {'name': 'WOW_ground_time', 'min_value': -30000.0, 'max_value': 30000.0, 'var_type': 'float', 'is_last': False, 'original_var': 'WOW_ground_time'}, {'name': 'engine_state', 'min_value': 0.0, 'max_value': 16.0, 'var_type': 'int', 'is_last': False, 'original_var': 'engine_state'}, {'name': 'H_TO', 'min_value': -30000.0, 'max_value': 30000.0, 'var_type': 'float', 'is_last': False, 'original_var': 'H_TO'}, {'name': 'PD_ToPhaseCASLow', 'min_value': -30000.0, 'max_value': 30000.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PD_ToPhaseCASLow'}, {'name': 'airdis_WOW', 'min_value': 0.0, 'max_value': 1.0, 'var_type': 'bool', 'is_last': False, 'original_var': 'airdis_WOW'}, {'name': 'PD_ToPhaseTime1', 'min_value': -30000.0, 'max_value': 30000.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PD_ToPhaseTime1'}, {'name': 'PLA', 'min_value': -33.0, 'max_value': 85.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PLA'}, {'name': 'ES_flight_interrupt', 'min_value': 16.0, 'max_value': 16.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'ES_flight_interrupt', 'constant_value': 16.0}, {'name': 'CAS', 'min_value': -30000.0, 'max_value': 30000.0, 'var_type': 'float', 'is_last': False, 'original_var': 'CAS'}, {'name': 'H', 'min_value': -2000.0, 'max_value': 50000.0, 'var_type': 'float', 'is_last': False, 'original_var': 'H'}, {'name': 'PD_ToPhaseTime2', 'min_value': -30000.0, 'max_value': 30000.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PD_ToPhaseTime2'}, {'name': 'WOW_to_ground_time', 'min_value': -30000.0, 'max_value': 30000.0, 'var_type': 'float', 'is_last': False, 'original_var': 'WOW_to_ground_time'}, {'name': 'PD_ToPhaseHLow', 'min_value': -30000.0, 'max_value': 30000.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PD_ToPhaseHLow'}]
解析后的条件: airdis_WOW == 1 and WOW_ground_time > PD_ToPhaseTime1 and CAS < PD_ToPhaseCASHigh and PLA > 71 and PLA <= 76 and (WOW_to_ground_time > PD_ToPhaseTime2 or H-H_TO > PD_ToPhaseHLow or CAS > PD_ToPhaseCASLow or engine_state == ES_flight_interrupt)
识别到的变量: [{'name': 'PD_ToPhaseCASHigh', 'min_value': -30000.0, 'max_value': 30000.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PD_ToPhaseCASHigh'}, {'name': 'WOW_ground_time', 'min_value': -30000.0, 'max_value': 30000.0, 'var_type': 'float', 'is_last': False, 'original_var': 'WOW_ground_time'}, {'name': 'engine_state', 'min_value': 0.0, 'max_value': 16.0, 'var_type': 'int', 'is_last': False, 'original_var': 'engine_state'}, {'name': 'H_TO', 'min_value': -30000.0, 'max_value': 30000.0, 'var_type': 'float', 'is_last': False, 'original_var': 'H_TO'}, {'name': 'PD_ToPhaseCASLow', 'min_value': -30000.0, 'max_value': 30000.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PD_ToPhaseCASLow'}, {'name': 'airdis_WOW', 'min_value': 0.0, 'max_value': 1.0, 'var_type': 'bool', 'is_last': False, 'original_var': 'airdis_WOW'}, {'name': 'PD_ToPhaseTime1', 'min_value': -30000.0, 'max_value': 30000.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PD_ToPhaseTime1'}, {'name': 'PLA', 'min_value': -33.0, 'max_value': 85.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PLA'}, {'name': 'ES_flight_interrupt', 'min_value': 16.0, 'max_value': 16.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'ES_flight_interrupt', 'constant_value': 16.0}, {'name': 'CAS', 'min_value': -30000.0, 'max_value': 30000.0, 'var_type': 'float', 'is_last': False, 'original_var': 'CAS'}, {'name': 'H', 'min_value': -2000.0, 'max_value': 50000.0, 'var_type': 'float', 'is_last': False, 'original_var': 'H'}, {'name': 'PD_ToPhaseTime2', 'min_value': -30000.0, 'max_value': 30000.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PD_ToPhaseTime2'}, {'name': 'WOW_to_ground_time', 'min_value': -30000.0, 'max_value': 30000.0, 'var_type': 'float', 'is_last': False, 'original_var': 'WOW_to_ground_time'}, {'name': 'PD_ToPhaseHLow', 'min_value': -30000.0, 'max_value': 30000.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PD_ToPhaseHLow'}]
处理的变量: ['PD_ToPhaseCASHigh', 'WOW_ground_time', 'engine_state', 'H_TO', 'PD_ToPhaseCASLow', 'airdis_WOW', 'PD_ToPhaseTime1', 'PLA', 'ES_flight_interrupt', 'CAS', 'H', 'PD_ToPhaseTime2', 'WOW_to_ground_time', 'PD_ToPhaseHLow']
Z3表达式: airdis_WOW == 1
表达式类型: <class 'z3.z3.BoolRef'>
生成的MCDC条件数量: 0

==================================================
处理模块: 起飞锁定指令有效后锁定参数
提取到的if条件: ['to_lock_sig == 1']

处理条件 1: to_lock_sig == 1
解析后的Python条件表达式: to_lock_sig == 1
变量及其范围: [{'name': 'to_lock_sig', 'min_value': 0.0, 'max_value': 1.0, 'var_type': 'bool', 'is_last': False, 'original_var': 'to_lock_sig'}]
解析后的条件: to_lock_sig == 1
识别到的变量: [{'name': 'to_lock_sig', 'min_value': 0.0, 'max_value': 1.0, 'var_type': 'bool', 'is_last': False, 'original_var': 'to_lock_sig'}]
处理的变量: ['to_lock_sig']
Z3表达式: to_lock_sig == 1
表达式类型: <class 'z3.z3.BoolRef'>
生成的MCDC条件数量: 1

生成的测试用例:
- 条件: to_lock_sig == 1
  测试用例: to_lock_sig=1.0
  预期结果: True
- 条件: to_lock_sig == 1
  测试用例: to_lock_sig=0.5
  预期结果: False

==================================================
处理模块: 起飞阶段指令与起飞锁定指令同时无效采用实时参数
提取到的if条件: ['to_lock_sig == 0 && to_phase_sig == 0']

处理条件 1: to_lock_sig == 0 && to_phase_sig == 0
解析后的Python条件表达式: to_lock_sig == 0 and to_phase_sig == 0
变量及其范围: [{'name': 'to_lock_sig', 'min_value': 0.0, 'max_value': 1.0, 'var_type': 'bool', 'is_last': False, 'original_var': 'to_lock_sig'}, {'name': 'to_phase_sig', 'min_value': 0.0, 'max_value': 1.0, 'var_type': 'bool', 'is_last': False, 'original_var': 'to_phase_sig'}]
解析后的条件: to_lock_sig == 0 and to_phase_sig == 0
识别到的变量: [{'name': 'to_lock_sig', 'min_value': 0.0, 'max_value': 1.0, 'var_type': 'bool', 'is_last': False, 'original_var': 'to_lock_sig'}, {'name': 'to_phase_sig', 'min_value': 0.0, 'max_value': 1.0, 'var_type': 'bool', 'is_last': False, 'original_var': 'to_phase_sig'}]
处理的变量: ['to_lock_sig', 'to_phase_sig']
Z3表达式: to_lock_sig == 0
表达式类型: <class 'z3.z3.BoolRef'>
生成的MCDC条件数量: 1

生成的测试用例:
- 条件: to_lock_sig == 0 && to_phase_sig == 0
  测试用例: to_lock_sig=0.0, to_phase_sig=0.0
  预期结果: True
- 条件: to_lock_sig == 0 && to_phase_sig == 0
  测试用例: to_lock_sig=0.5, to_phase_sig=0.0
  预期结果: False

==================================================
处理模块: 起飞锁定指令失效后禁止再次启动起飞锁定指令
提取到的if条件: ['to_lock_sig == 0', 'airdis_WOW == 1 && CAS < PD_ToLockCASLow']

处理条件 1: to_lock_sig == 0
解析后的Python条件表达式: to_lock_sig == 0
变量及其范围: [{'name': 'to_lock_sig', 'min_value': 0.0, 'max_value': 1.0, 'var_type': 'bool', 'is_last': False, 'original_var': 'to_lock_sig'}]
解析后的条件: to_lock_sig == 0
识别到的变量: [{'name': 'to_lock_sig', 'min_value': 0.0, 'max_value': 1.0, 'var_type': 'bool', 'is_last': False, 'original_var': 'to_lock_sig'}]
处理的变量: ['to_lock_sig']
Z3表达式: to_lock_sig == 0
表达式类型: <class 'z3.z3.BoolRef'>
生成的MCDC条件数量: 1

处理条件 2: airdis_WOW == 1 && CAS < PD_ToLockCASLow
解析后的Python条件表达式: airdis_WOW == 1 and CAS < PD_ToLockCASLow
变量及其范围: [{'name': 'PD_ToLockCASLow', 'min_value': 0.0, 'max_value': 1000.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PD_ToLockCASLow'}, {'name': 'CAS', 'min_value': -30000.0, 'max_value': 30000.0, 'var_type': 'float', 'is_last': False, 'original_var': 'CAS'}, {'name': 'airdis_WOW', 'min_value': 0.0, 'max_value': 1.0, 'var_type': 'bool', 'is_last': False, 'original_var': 'airdis_WOW'}]
解析后的条件: airdis_WOW == 1 and CAS < PD_ToLockCASLow
识别到的变量: [{'name': 'PD_ToLockCASLow', 'min_value': 0.0, 'max_value': 1000.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PD_ToLockCASLow'}, {'name': 'CAS', 'min_value': -30000.0, 'max_value': 30000.0, 'var_type': 'float', 'is_last': False, 'original_var': 'CAS'}, {'name': 'airdis_WOW', 'min_value': 0.0, 'max_value': 1.0, 'var_type': 'bool', 'is_last': False, 'original_var': 'airdis_WOW'}]
处理的变量: ['PD_ToLockCASLow', 'CAS', 'airdis_WOW']
Z3表达式: airdis_WOW == 1
表达式类型: <class 'z3.z3.BoolRef'>
生成的MCDC条件数量: 0

生成的测试用例:
- 条件: to_lock_sig == 0
  测试用例: to_lock_sig=0.0
  预期结果: True
- 条件: to_lock_sig == 0
  测试用例: to_lock_sig=0.5
  预期结果: False

==================================================
处理模块: 起飞阶段指令失效后禁止再次启动起飞阶段指令
提取到的if条件: ['to_phase_sig == 0', 'airdis_WOW == 1 && CAS < PD_ToLockCASLow']

处理条件 1: to_phase_sig == 0
解析后的Python条件表达式: to_phase_sig == 0
变量及其范围: [{'name': 'to_phase_sig', 'min_value': 0.0, 'max_value': 1.0, 'var_type': 'bool', 'is_last': False, 'original_var': 'to_phase_sig'}]
解析后的条件: to_phase_sig == 0
识别到的变量: [{'name': 'to_phase_sig', 'min_value': 0.0, 'max_value': 1.0, 'var_type': 'bool', 'is_last': False, 'original_var': 'to_phase_sig'}]
处理的变量: ['to_phase_sig']
Z3表达式: to_phase_sig == 0
表达式类型: <class 'z3.z3.BoolRef'>
生成的MCDC条件数量: 1

处理条件 2: airdis_WOW == 1 && CAS < PD_ToLockCASLow
解析后的Python条件表达式: airdis_WOW == 1 and CAS < PD_ToLockCASLow
变量及其范围: [{'name': 'PD_ToLockCASLow', 'min_value': 0.0, 'max_value': 1000.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PD_ToLockCASLow'}, {'name': 'CAS', 'min_value': -30000.0, 'max_value': 30000.0, 'var_type': 'float', 'is_last': False, 'original_var': 'CAS'}, {'name': 'airdis_WOW', 'min_value': 0.0, 'max_value': 1.0, 'var_type': 'bool', 'is_last': False, 'original_var': 'airdis_WOW'}]
解析后的条件: airdis_WOW == 1 and CAS < PD_ToLockCASLow
识别到的变量: [{'name': 'PD_ToLockCASLow', 'min_value': 0.0, 'max_value': 1000.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PD_ToLockCASLow'}, {'name': 'CAS', 'min_value': -30000.0, 'max_value': 30000.0, 'var_type': 'float', 'is_last': False, 'original_var': 'CAS'}, {'name': 'airdis_WOW', 'min_value': 0.0, 'max_value': 1.0, 'var_type': 'bool', 'is_last': False, 'original_var': 'airdis_WOW'}]
处理的变量: ['PD_ToLockCASLow', 'CAS', 'airdis_WOW']
Z3表达式: airdis_WOW == 1
表达式类型: <class 'z3.z3.BoolRef'>
生成的MCDC条件数量: 0

生成的测试用例:
- 条件: to_phase_sig == 0
  测试用例: to_phase_sig=0.0
  预期结果: True
- 条件: to_phase_sig == 0
  测试用例: to_phase_sig=0.5
  预期结果: False

==================================================
处理模块: 基本推力计划计算_最大起飞（MTO）
模块中没有if语句，跳过

==================================================
处理模块: 基本推力计划计算_复飞（GA）
模块中没有if语句，跳过

==================================================
处理模块: 基本推力计划计算_减推力起飞1（DTO1）
模块中没有if语句，跳过

==================================================
处理模块: 基本推力计划计算_减推力起飞2（DTO2）
模块中没有if语句，跳过

==================================================
处理模块: 基本推力计划计算_增推力起飞（Bump）
模块中没有if语句，跳过

==================================================
处理模块: 基本推力计划计算_ 灵活起飞（FLEXTO）
模块中没有if语句，跳过

==================================================
处理模块: 基本推力计划计算_最大连续（MCT）
模块中没有if语句，跳过

==================================================
处理模块: 基本推力计划计算_最大爬升（MCL）
模块中没有if语句，跳过

==================================================
处理模块: 基本推力计划计算_减推力爬升1
模块中没有if语句，跳过

==================================================
处理模块: 基本推力计划计算_减推力爬升2
模块中没有if语句，跳过

==================================================
处理模块: 基本推力计划计算_最大巡航（MCR）
模块中没有if语句，跳过

==================================================
处理模块: 计算最大起飞正常引气修正
模块中没有if语句，跳过

==================================================
处理模块: 计算最大连续正常引气修正
模块中没有if语句，跳过

==================================================
处理模块: 计算最大爬升正常引气修正
模块中没有if语句，跳过

==================================================
处理模块: 计算最大巡航正常引气修正
模块中没有if语句，跳过

==================================================
处理模块: 计算最大起飞异常低引气修正
模块中没有if语句，跳过

==================================================
处理模块: 计算最大连续异常低引气修正
模块中没有if语句，跳过

==================================================
处理模块: 计算最大爬升异常低引气修正
模块中没有if语句，跳过

==================================================
处理模块: 计算最大巡航异常低引气修正
模块中没有if语句，跳过

==================================================
处理模块: 计算最大起飞异常高引气修正
模块中没有if语句，跳过

==================================================
处理模块: 计算最大连续异常高引气修正
模块中没有if语句，跳过

==================================================
处理模块: 计算最大爬升异常高引气修正
模块中没有if语句，跳过

==================================================
处理模块: 计算最大巡航异常高引气修正
模块中没有if语句，跳过

==================================================
处理模块: 设置ECS参数（无引气）
提取到的if条件: ['ECSBleedCfg == no_bleed']

处理条件 1: ECSBleedCfg == no_bleed
解析后的Python条件表达式: ECSBleedCfg == no_bleed
变量及其范围: [{'name': 'ECSBleedCfg', 'min_value': 0.0, 'max_value': 3.0, 'var_type': 'int', 'is_last': False, 'original_var': 'ECSBleedCfg'}, {'name': 'no_bleed', 'min_value': 0.0, 'max_value': 0.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'no_bleed', 'constant_value': 0.0}]
解析后的条件: ECSBleedCfg == no_bleed
识别到的变量: [{'name': 'ECSBleedCfg', 'min_value': 0.0, 'max_value': 3.0, 'var_type': 'int', 'is_last': False, 'original_var': 'ECSBleedCfg'}, {'name': 'no_bleed', 'min_value': 0.0, 'max_value': 0.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'no_bleed', 'constant_value': 0.0}]
处理的变量: ['ECSBleedCfg', 'no_bleed']
Z3表达式: 0 == ECSBleedCfg
表达式类型: <class 'z3.z3.BoolRef'>
生成的MCDC条件数量: 1

生成的测试用例:
- 条件: ECSBleedCfg == no_bleed
  测试用例: ECSBleedCfg=0, no_bleed=0.0
  预期结果: True
- 条件: ECSBleedCfg == no_bleed
  测试用例: ECSBleedCfg=1, no_bleed=0.0
  预期结果: False

==================================================
处理模块: 设置ECS参数（正常引气）
提取到的if条件: ['ECSBleedCfg == norm_bleed']

处理条件 1: ECSBleedCfg == norm_bleed
解析后的Python条件表达式: ECSBleedCfg == norm_bleed
变量及其范围: [{'name': 'norm_bleed', 'min_value': 1.0, 'max_value': 1.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'norm_bleed', 'constant_value': 1.0}, {'name': 'ECSBleedCfg', 'min_value': 0.0, 'max_value': 3.0, 'var_type': 'int', 'is_last': False, 'original_var': 'ECSBleedCfg'}]
解析后的条件: ECSBleedCfg == norm_bleed
识别到的变量: [{'name': 'norm_bleed', 'min_value': 1.0, 'max_value': 1.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'norm_bleed', 'constant_value': 1.0}, {'name': 'ECSBleedCfg', 'min_value': 0.0, 'max_value': 3.0, 'var_type': 'int', 'is_last': False, 'original_var': 'ECSBleedCfg'}]
处理的变量: ['norm_bleed', 'ECSBleedCfg']
Z3表达式: 1 == ECSBleedCfg
表达式类型: <class 'z3.z3.BoolRef'>
生成的MCDC条件数量: 1

生成的测试用例:
- 条件: ECSBleedCfg == norm_bleed
  测试用例: ECSBleedCfg=1, norm_bleed=1.0
  预期结果: True
- 条件: ECSBleedCfg == norm_bleed
  测试用例: ECSBleedCfg=0, norm_bleed=1.0
  预期结果: False

==================================================
处理模块: 设置ECS参数（异常低引气）
提取到的if条件: ['ECSBleedCfg == abn_low_bleed']

处理条件 1: ECSBleedCfg == abn_low_bleed
解析后的Python条件表达式: ECSBleedCfg == abn_low_bleed
变量及其范围: [{'name': 'abn_low_bleed', 'min_value': 2.0, 'max_value': 2.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'abn_low_bleed', 'constant_value': 2.0}, {'name': 'ECSBleedCfg', 'min_value': 0.0, 'max_value': 3.0, 'var_type': 'int', 'is_last': False, 'original_var': 'ECSBleedCfg'}]
解析后的条件: ECSBleedCfg == abn_low_bleed
识别到的变量: [{'name': 'abn_low_bleed', 'min_value': 2.0, 'max_value': 2.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'abn_low_bleed', 'constant_value': 2.0}, {'name': 'ECSBleedCfg', 'min_value': 0.0, 'max_value': 3.0, 'var_type': 'int', 'is_last': False, 'original_var': 'ECSBleedCfg'}]
处理的变量: ['abn_low_bleed', 'ECSBleedCfg']
Z3表达式: 2 == ECSBleedCfg
表达式类型: <class 'z3.z3.BoolRef'>
生成的MCDC条件数量: 1

生成的测试用例:
- 条件: ECSBleedCfg == abn_low_bleed
  测试用例: ECSBleedCfg=2, abn_low_bleed=2.0
  预期结果: True
- 条件: ECSBleedCfg == abn_low_bleed
  测试用例: ECSBleedCfg=1, abn_low_bleed=2.0
  预期结果: False

==================================================
处理模块: 设置ECS参数（异常高引气）
提取到的if条件: ['ECSBleedCfg == abn_high_bleed']

处理条件 1: ECSBleedCfg == abn_high_bleed
解析后的Python条件表达式: ECSBleedCfg == abn_high_bleed
变量及其范围: [{'name': 'abn_high_bleed', 'min_value': 3.0, 'max_value': 3.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'abn_high_bleed', 'constant_value': 3.0}, {'name': 'ECSBleedCfg', 'min_value': 0.0, 'max_value': 3.0, 'var_type': 'int', 'is_last': False, 'original_var': 'ECSBleedCfg'}]
解析后的条件: ECSBleedCfg == abn_high_bleed
识别到的变量: [{'name': 'abn_high_bleed', 'min_value': 3.0, 'max_value': 3.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'abn_high_bleed', 'constant_value': 3.0}, {'name': 'ECSBleedCfg', 'min_value': 0.0, 'max_value': 3.0, 'var_type': 'int', 'is_last': False, 'original_var': 'ECSBleedCfg'}]
处理的变量: ['abn_high_bleed', 'ECSBleedCfg']
Z3表达式: 3 == ECSBleedCfg
表达式类型: <class 'z3.z3.BoolRef'>
生成的MCDC条件数量: 1

生成的测试用例:
- 条件: ECSBleedCfg == abn_high_bleed
  测试用例: ECSBleedCfg=3, abn_high_bleed=3.0
  预期结果: True
- 条件: ECSBleedCfg == abn_high_bleed
  测试用例: ECSBleedCfg=2, abn_high_bleed=3.0
  预期结果: False

==================================================
处理模块: 计算N1RDemWAI1_MTO
模块中没有if语句，跳过

==================================================
处理模块: 计算N1RDemWAI1_MCT
模块中没有if语句，跳过

==================================================
处理模块: 计算N1RDemWAI2_MTO
模块中没有if语句，跳过

==================================================
处理模块: 计算N1RDemWAI2_MCT
模块中没有if语句，跳过

==================================================
处理模块: 计算DN1RWAImcl1
模块中没有if语句，跳过

==================================================
处理模块: 计算DN1RWAImcr1
模块中没有if语句，跳过

==================================================
处理模块: 计算DN1RWAImcl2
模块中没有if语句，跳过

==================================================
处理模块: 计算DN1RWAImcr2
模块中没有if语句，跳过

==================================================
处理模块: 设置WAI参数（无引气）
提取到的if条件: ['WAIBleedCfg == no_bleed']

处理条件 1: WAIBleedCfg == no_bleed
解析后的Python条件表达式: WAIBleedCfg == no_bleed
变量及其范围: [{'name': 'WAIBleedCfg', 'min_value': 0.0, 'max_value': 3.0, 'var_type': 'int', 'is_last': False, 'original_var': 'WAIBleedCfg'}, {'name': 'no_bleed', 'min_value': 0.0, 'max_value': 0.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'no_bleed', 'constant_value': 0.0}]
解析后的条件: WAIBleedCfg == no_bleed
识别到的变量: [{'name': 'WAIBleedCfg', 'min_value': 0.0, 'max_value': 3.0, 'var_type': 'int', 'is_last': False, 'original_var': 'WAIBleedCfg'}, {'name': 'no_bleed', 'min_value': 0.0, 'max_value': 0.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'no_bleed', 'constant_value': 0.0}]
处理的变量: ['WAIBleedCfg', 'no_bleed']
Z3表达式: 0 == WAIBleedCfg
表达式类型: <class 'z3.z3.BoolRef'>
生成的MCDC条件数量: 1

生成的测试用例:
- 条件: WAIBleedCfg == no_bleed
  测试用例: WAIBleedCfg=0, no_bleed=0.0
  预期结果: True
- 条件: WAIBleedCfg == no_bleed
  测试用例: WAIBleedCfg=1, no_bleed=0.0
  预期结果: False

==================================================
处理模块: 设置WAI参数（正常引气）
提取到的if条件: ['WAIBleedCfg == norm_bleed']

处理条件 1: WAIBleedCfg == norm_bleed
解析后的Python条件表达式: WAIBleedCfg == norm_bleed
变量及其范围: [{'name': 'WAIBleedCfg', 'min_value': 0.0, 'max_value': 3.0, 'var_type': 'int', 'is_last': False, 'original_var': 'WAIBleedCfg'}, {'name': 'norm_bleed', 'min_value': 1.0, 'max_value': 1.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'norm_bleed', 'constant_value': 1.0}]
解析后的条件: WAIBleedCfg == norm_bleed
识别到的变量: [{'name': 'WAIBleedCfg', 'min_value': 0.0, 'max_value': 3.0, 'var_type': 'int', 'is_last': False, 'original_var': 'WAIBleedCfg'}, {'name': 'norm_bleed', 'min_value': 1.0, 'max_value': 1.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'norm_bleed', 'constant_value': 1.0}]
处理的变量: ['WAIBleedCfg', 'norm_bleed']
Z3表达式: 1 == WAIBleedCfg
表达式类型: <class 'z3.z3.BoolRef'>
生成的MCDC条件数量: 1

生成的测试用例:
- 条件: WAIBleedCfg == norm_bleed
  测试用例: WAIBleedCfg=1, norm_bleed=1.0
  预期结果: True
- 条件: WAIBleedCfg == norm_bleed
  测试用例: WAIBleedCfg=0, norm_bleed=1.0
  预期结果: False

==================================================
处理模块: 设置WAI参数（异常高引气）
提取到的if条件: ['WAIBleedCfg == abn_high_bleed']

处理条件 1: WAIBleedCfg == abn_high_bleed
解析后的Python条件表达式: WAIBleedCfg == abn_high_bleed
变量及其范围: [{'name': 'WAIBleedCfg', 'min_value': 0.0, 'max_value': 3.0, 'var_type': 'int', 'is_last': False, 'original_var': 'WAIBleedCfg'}, {'name': 'abn_high_bleed', 'min_value': 3.0, 'max_value': 3.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'abn_high_bleed', 'constant_value': 3.0}]
解析后的条件: WAIBleedCfg == abn_high_bleed
识别到的变量: [{'name': 'WAIBleedCfg', 'min_value': 0.0, 'max_value': 3.0, 'var_type': 'int', 'is_last': False, 'original_var': 'WAIBleedCfg'}, {'name': 'abn_high_bleed', 'min_value': 3.0, 'max_value': 3.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'abn_high_bleed', 'constant_value': 3.0}]
处理的变量: ['WAIBleedCfg', 'abn_high_bleed']
Z3表达式: 3 == WAIBleedCfg
表达式类型: <class 'z3.z3.BoolRef'>
生成的MCDC条件数量: 1

生成的测试用例:
- 条件: WAIBleedCfg == abn_high_bleed
  测试用例: WAIBleedCfg=3, abn_high_bleed=3.0
  预期结果: True
- 条件: WAIBleedCfg == abn_high_bleed
  测试用例: WAIBleedCfg=2, abn_high_bleed=3.0
  预期结果: False

==================================================
处理模块: 计算N1RDemNAI1_MTO
模块中没有if语句，跳过

==================================================
处理模块: 计算N1RDemNAI1_MCT
模块中没有if语句，跳过

==================================================
处理模块: 计算DN1RNAImcl1
模块中没有if语句，跳过

==================================================
处理模块: 计算DN1RNAImcr1
模块中没有if语句，跳过

==================================================
处理模块: 设置NAI参数（关闭）
提取到的if条件: ['nai_control == 0']

处理条件 1: nai_control == 0
解析后的Python条件表达式: nai_control == 0
变量及其范围: [{'name': 'nai_control', 'min_value': 0.0, 'max_value': 1.0, 'var_type': 'bool', 'is_last': False, 'original_var': 'nai_control'}]
解析后的条件: nai_control == 0
识别到的变量: [{'name': 'nai_control', 'min_value': 0.0, 'max_value': 1.0, 'var_type': 'bool', 'is_last': False, 'original_var': 'nai_control'}]
处理的变量: ['nai_control']
Z3表达式: nai_control == 0
表达式类型: <class 'z3.z3.BoolRef'>
生成的MCDC条件数量: 1

生成的测试用例:
- 条件: nai_control == 0
  测试用例: nai_control=0.0
  预期结果: True
- 条件: nai_control == 0
  测试用例: nai_control=0.5
  预期结果: False

==================================================
处理模块: 设置NAI参数（打开）
提取到的if条件: ['nai_control == 1']

处理条件 1: nai_control == 1
解析后的Python条件表达式: nai_control == 1
变量及其范围: [{'name': 'nai_control', 'min_value': 0.0, 'max_value': 1.0, 'var_type': 'bool', 'is_last': False, 'original_var': 'nai_control'}]
解析后的条件: nai_control == 1
识别到的变量: [{'name': 'nai_control', 'min_value': 0.0, 'max_value': 1.0, 'var_type': 'bool', 'is_last': False, 'original_var': 'nai_control'}]
处理的变量: ['nai_control']
Z3表达式: nai_control == 1
表达式类型: <class 'z3.z3.BoolRef'>
生成的MCDC条件数量: 1

生成的测试用例:
- 条件: nai_control == 1
  测试用例: nai_control=1.0
  预期结果: True
- 条件: nai_control == 1
  测试用例: nai_control=0.5
  预期结果: False

==================================================
处理模块: 计算最大起飞引气修正量
模块中没有if语句，跳过

==================================================
处理模块: 计算最大连续引气修正量
模块中没有if语句，跳过

==================================================
处理模块: 计算最大爬升引气修正量
模块中没有if语句，跳过

==================================================
处理模块: 计算最大巡航引气修正量
模块中没有if语句，跳过

==================================================
处理模块: 设置减推力起飞DTO1、DTO2、灵活起飞FLEXTO、复飞GA、增推力起飞Bump的引气修正量
模块中没有if语句，跳过

==================================================
处理模块: 设置减推力爬升DCL1、DCL2的引气修正量
模块中没有if语句，跳过

==================================================
处理模块: 推力配平判断
提取到的if条件: ['(N1_trim_enable == 1) && (N1Trim_signal == 1) && (airdis_WOW == 0) && ((thrust_level == level_MCR) || (thrust_level == level_MCT) || (thrust_level == level_MCL) || (thrust_level == level_CR) || (thrust_level == level_CT) || (thrust_level == level_CL) || (thrust_level == level_DCL1) || (thrust_level == level_DCL2)) && ((dspeed_state == 0) || (((dspeed_state == 1) || (dspeed_state == 2)) && (dPLA < PD_atrimpla)))']

处理条件 1: (N1_trim_enable == 1) && (N1Trim_signal == 1) && (airdis_WOW == 0) && ((thrust_level == level_MCR) || (thrust_level == level_MCT) || (thrust_level == level_MCL) || (thrust_level == level_CR) || (thrust_level == level_CT) || (thrust_level == level_CL) || (thrust_level == level_DCL1) || (thrust_level == level_DCL2)) && ((dspeed_state == 0) || (((dspeed_state == 1) || (dspeed_state == 2)) && (dPLA < PD_atrimpla)))
解析后的Python条件表达式: (N1_trim_enable == 1) and (N1Trim_signal == 1) and (airdis_WOW == 0) and ((thrust_level == level_MCR) or (thrust_level == level_MCT) or (thrust_level == level_MCL) or (thrust_level == level_CR) or (thrust_level == level_CT) or (thrust_level == level_CL) or (thrust_level == level_DCL1) or (thrust_level == level_DCL2)) and ((dspeed_state == 0) or (((dspeed_state == 1) or (dspeed_state == 2)) and (dPLA < PD_atrimpla)))
变量及其范围: [{'name': 'thrust_level', 'min_value': 0.0, 'max_value': 23.0, 'var_type': 'int', 'is_last': False, 'original_var': 'thrust_level'}, {'name': 'dPLA', 'min_value': -33.0, 'max_value': 85.0, 'var_type': 'float', 'is_last': False, 'original_var': 'dPLA'}, {'name': 'dspeed_state', 'min_value': 0.0, 'max_value': 2.0, 'var_type': 'int', 'is_last': False, 'original_var': 'dspeed_state'}, {'name': 'N1Trim_signal', 'min_value': 0.0, 'max_value': 1.0, 'var_type': 'bool', 'is_last': False, 'original_var': 'N1Trim_signal'}, {'name': 'level_MCT', 'min_value': 14.0, 'max_value': 14.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_MCT', 'constant_value': 14.0}, {'name': 'level_DCL2', 'min_value': 12.0, 'max_value': 12.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_DCL2', 'constant_value': 12.0}, {'name': 'airdis_WOW', 'min_value': 0.0, 'max_value': 1.0, 'var_type': 'bool', 'is_last': False, 'original_var': 'airdis_WOW'}, {'name': 'N1_trim_enable', 'min_value': 0.0, 'max_value': 1.0, 'var_type': 'bool', 'is_last': False, 'original_var': 'N1_trim_enable'}, {'name': 'level_CR', 'min_value': 7.0, 'max_value': 7.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_CR', 'constant_value': 7.0}, {'name': 'level_MCL', 'min_value': 10.0, 'max_value': 10.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_MCL', 'constant_value': 10.0}, {'name': 'level_CT', 'min_value': 13.0, 'max_value': 13.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_CT', 'constant_value': 13.0}, {'name': 'level_DCL1', 'min_value': 11.0, 'max_value': 11.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_DCL1', 'constant_value': 11.0}, {'name': 'PD_atrimpla', 'min_value': -33.0, 'max_value': 85.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PD_atrimpla'}, {'name': 'level_MCR', 'min_value': 8.0, 'max_value': 8.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_MCR', 'constant_value': 8.0}, {'name': 'level_CL', 'min_value': 9.0, 'max_value': 9.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_CL', 'constant_value': 9.0}]
解析后的条件: (N1_trim_enable == 1) and (N1Trim_signal == 1) and (airdis_WOW == 0) and ((thrust_level == level_MCR) or (thrust_level == level_MCT) or (thrust_level == level_MCL) or (thrust_level == level_CR) or (thrust_level == level_CT) or (thrust_level == level_CL) or (thrust_level == level_DCL1) or (thrust_level == level_DCL2)) and ((dspeed_state == 0) or (((dspeed_state == 1) or (dspeed_state == 2)) and (dPLA < PD_atrimpla)))
识别到的变量: [{'name': 'thrust_level', 'min_value': 0.0, 'max_value': 23.0, 'var_type': 'int', 'is_last': False, 'original_var': 'thrust_level'}, {'name': 'dPLA', 'min_value': -33.0, 'max_value': 85.0, 'var_type': 'float', 'is_last': False, 'original_var': 'dPLA'}, {'name': 'dspeed_state', 'min_value': 0.0, 'max_value': 2.0, 'var_type': 'int', 'is_last': False, 'original_var': 'dspeed_state'}, {'name': 'N1Trim_signal', 'min_value': 0.0, 'max_value': 1.0, 'var_type': 'bool', 'is_last': False, 'original_var': 'N1Trim_signal'}, {'name': 'level_MCT', 'min_value': 14.0, 'max_value': 14.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_MCT', 'constant_value': 14.0}, {'name': 'level_DCL2', 'min_value': 12.0, 'max_value': 12.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_DCL2', 'constant_value': 12.0}, {'name': 'airdis_WOW', 'min_value': 0.0, 'max_value': 1.0, 'var_type': 'bool', 'is_last': False, 'original_var': 'airdis_WOW'}, {'name': 'N1_trim_enable', 'min_value': 0.0, 'max_value': 1.0, 'var_type': 'bool', 'is_last': False, 'original_var': 'N1_trim_enable'}, {'name': 'level_CR', 'min_value': 7.0, 'max_value': 7.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_CR', 'constant_value': 7.0}, {'name': 'level_MCL', 'min_value': 10.0, 'max_value': 10.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_MCL', 'constant_value': 10.0}, {'name': 'level_CT', 'min_value': 13.0, 'max_value': 13.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_CT', 'constant_value': 13.0}, {'name': 'level_DCL1', 'min_value': 11.0, 'max_value': 11.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_DCL1', 'constant_value': 11.0}, {'name': 'PD_atrimpla', 'min_value': -33.0, 'max_value': 85.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PD_atrimpla'}, {'name': 'level_MCR', 'min_value': 8.0, 'max_value': 8.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_MCR', 'constant_value': 8.0}, {'name': 'level_CL', 'min_value': 9.0, 'max_value': 9.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_CL', 'constant_value': 9.0}]
处理的变量: ['thrust_level', 'dPLA', 'dspeed_state', 'N1Trim_signal', 'level_MCT', 'level_DCL2', 'airdis_WOW', 'N1_trim_enable', 'level_CR', 'level_MCL', 'level_CT', 'level_DCL1', 'PD_atrimpla', 'level_MCR', 'level_CL']
Z3表达式: N1_trim_enable == 1
表达式类型: <class 'z3.z3.BoolRef'>
生成的MCDC条件数量: 0

==================================================
处理模块: 计算推力配平修正量
模块中没有if语句，跳过

==================================================
处理模块: 设置最大巡航、最大爬升、减推力爬升1、减推力爬升2、最大连续的推力配平修正量
模块中没有if语句，跳过

==================================================
处理模块: 设置最大起飞、减推力起飞1、减推力起飞2、复飞、灵活起飞、增推力起飞的推力配平修正量
模块中没有if语句，跳过

==================================================
处理模块: 油门杆插值目标计算-最大起飞
模块中没有if语句，跳过

==================================================
处理模块: 油门杆插值目标计算-复飞
模块中没有if语句，跳过

==================================================
处理模块: 油门杆插值目标计算-减推力起飞1
模块中没有if语句，跳过

==================================================
处理模块: 油门杆插值目标计算-减推力起飞2
模块中没有if语句，跳过

==================================================
处理模块: 油门杆插值目标计算-增推力起飞
模块中没有if语句，跳过

==================================================
处理模块: 油门杆插值目标计算-灵活起飞
模块中没有if语句，跳过

==================================================
处理模块: 油门杆插值目标计算-最大连续
模块中没有if语句，跳过

==================================================
处理模块: 油门杆插值目标计算-最大爬升
模块中没有if语句，跳过

==================================================
处理模块: 油门杆插值目标计算-减推力爬升1
模块中没有if语句，跳过

==================================================
处理模块: 油门杆插值目标计算-减推力爬升2
模块中没有if语句，跳过

==================================================
处理模块: 油门杆插值目标计算-最大巡航
模块中没有if语句，跳过

==================================================
处理模块: 油门杆插值目标计算-最大反推(MREV)
模块中没有if语句，跳过

==================================================
处理模块: 油门杆插值目标计算-最大推力增量计算
模块中没有if语句，跳过

==================================================
处理模块: 油门杆插值目标计算-最大推力计算
模块中没有if语句，跳过

==================================================
处理模块: 油门杆插值目标计算-N1RDem_PLATO计算
提取到的if条件: ['TL_require!=DTO1&&TL_require!=DTO2&&TL_require!=GA&&TL_require!=Bump&&(TL_require!=FLEXTO||(TL_require==FLEXTO&&flex_dT_flag==0))', 'TL_require==DTO1', 'TL_require==DTO2', 'TL_require==GA', 'TL_require==FLEXTO&&flex_dT_flag==1', 'TL_require==Bump']

处理条件 1: TL_require!=DTO1&&TL_require!=DTO2&&TL_require!=GA&&TL_require!=Bump&&(TL_require!=FLEXTO||(TL_require==FLEXTO&&flex_dT_flag==0))
解析后的Python条件表达式: TL_require != DTO1 and TL_require != DTO2 and TL_require != GA and TL_require != Bump and (TL_require != FLEXTO or (TL_require == FLEXTO and flex_dT_flag == 0))
变量及其范围: [{'name': 'GA', 'min_value': 2.0, 'max_value': 2.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'GA', 'constant_value': 2.0}, {'name': 'Bump', 'min_value': 3.0, 'max_value': 3.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'Bump', 'constant_value': 3.0}, {'name': 'FLEXTO', 'min_value': 4.0, 'max_value': 4.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'FLEXTO', 'constant_value': 4.0}, {'name': 'DTO2', 'min_value': 1.0, 'max_value': 1.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'DTO2', 'constant_value': 1.0}, {'name': 'flex_dT_flag', 'min_value': 0.0, 'max_value': 1.0, 'var_type': 'bool', 'is_last': False, 'original_var': 'flex_dT_flag'}, {'name': 'DTO1', 'min_value': 0.0, 'max_value': 0.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'DTO1', 'constant_value': 0.0}, {'name': 'TL_require', 'min_value': 0.0, 'max_value': 6.0, 'var_type': 'int', 'is_last': False, 'original_var': 'TL_require'}]
解析后的条件: TL_require != DTO1 and TL_require != DTO2 and TL_require != GA and TL_require != Bump and (TL_require != FLEXTO or (TL_require == FLEXTO and flex_dT_flag == 0))
识别到的变量: [{'name': 'GA', 'min_value': 2.0, 'max_value': 2.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'GA', 'constant_value': 2.0}, {'name': 'Bump', 'min_value': 3.0, 'max_value': 3.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'Bump', 'constant_value': 3.0}, {'name': 'FLEXTO', 'min_value': 4.0, 'max_value': 4.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'FLEXTO', 'constant_value': 4.0}, {'name': 'DTO2', 'min_value': 1.0, 'max_value': 1.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'DTO2', 'constant_value': 1.0}, {'name': 'flex_dT_flag', 'min_value': 0.0, 'max_value': 1.0, 'var_type': 'bool', 'is_last': False, 'original_var': 'flex_dT_flag'}, {'name': 'DTO1', 'min_value': 0.0, 'max_value': 0.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'DTO1', 'constant_value': 0.0}, {'name': 'TL_require', 'min_value': 0.0, 'max_value': 6.0, 'var_type': 'int', 'is_last': False, 'original_var': 'TL_require'}]
处理的变量: ['GA', 'Bump', 'FLEXTO', 'DTO2', 'flex_dT_flag', 'DTO1', 'TL_require']
条件解析错误: TL_require != DTO1 and TL_require != DTO2 and TL_require != GA and TL_require != Bump and (TL_require != FLEXTO or (TL_require == FLEXTO and flex_dT_flag == 0))
错误信息: Symbolic expressions cannot be cast to concrete Boolean values.
变量类型:
  GA: <class 'z3.z3.IntNumRef'>
    - 是算术表达式
  Bump: <class 'z3.z3.IntNumRef'>
    - 是算术表达式
  FLEXTO: <class 'z3.z3.IntNumRef'>
    - 是算术表达式
  DTO2: <class 'z3.z3.IntNumRef'>
    - 是算术表达式
  flex_dT_flag: <class 'z3.z3.ArithRef'>
    - 是算术表达式
  DTO1: <class 'z3.z3.IntNumRef'>
    - 是算术表达式
  TL_require: <class 'z3.z3.ArithRef'>
    - 是算术表达式
生成的MCDC条件数量: 0

处理条件 2: TL_require==DTO1
解析后的Python条件表达式: TL_require == DTO1
变量及其范围: [{'name': 'TL_require', 'min_value': 0.0, 'max_value': 6.0, 'var_type': 'int', 'is_last': False, 'original_var': 'TL_require'}, {'name': 'DTO1', 'min_value': 0.0, 'max_value': 0.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'DTO1', 'constant_value': 0.0}]
解析后的条件: TL_require == DTO1
识别到的变量: [{'name': 'TL_require', 'min_value': 0.0, 'max_value': 6.0, 'var_type': 'int', 'is_last': False, 'original_var': 'TL_require'}, {'name': 'DTO1', 'min_value': 0.0, 'max_value': 0.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'DTO1', 'constant_value': 0.0}]
处理的变量: ['TL_require', 'DTO1']
Z3表达式: 0 == TL_require
表达式类型: <class 'z3.z3.BoolRef'>
生成的MCDC条件数量: 1

处理条件 3: TL_require==DTO2
解析后的Python条件表达式: TL_require == DTO2
变量及其范围: [{'name': 'TL_require', 'min_value': 0.0, 'max_value': 6.0, 'var_type': 'int', 'is_last': False, 'original_var': 'TL_require'}, {'name': 'DTO2', 'min_value': 1.0, 'max_value': 1.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'DTO2', 'constant_value': 1.0}]
解析后的条件: TL_require == DTO2
识别到的变量: [{'name': 'TL_require', 'min_value': 0.0, 'max_value': 6.0, 'var_type': 'int', 'is_last': False, 'original_var': 'TL_require'}, {'name': 'DTO2', 'min_value': 1.0, 'max_value': 1.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'DTO2', 'constant_value': 1.0}]
处理的变量: ['TL_require', 'DTO2']
Z3表达式: 1 == TL_require
表达式类型: <class 'z3.z3.BoolRef'>
生成的MCDC条件数量: 1

处理条件 4: TL_require==GA
解析后的Python条件表达式: TL_require == GA
变量及其范围: [{'name': 'GA', 'min_value': 2.0, 'max_value': 2.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'GA', 'constant_value': 2.0}, {'name': 'TL_require', 'min_value': 0.0, 'max_value': 6.0, 'var_type': 'int', 'is_last': False, 'original_var': 'TL_require'}]
解析后的条件: TL_require == GA
识别到的变量: [{'name': 'GA', 'min_value': 2.0, 'max_value': 2.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'GA', 'constant_value': 2.0}, {'name': 'TL_require', 'min_value': 0.0, 'max_value': 6.0, 'var_type': 'int', 'is_last': False, 'original_var': 'TL_require'}]
处理的变量: ['GA', 'TL_require']
Z3表达式: 2 == TL_require
表达式类型: <class 'z3.z3.BoolRef'>
生成的MCDC条件数量: 1

处理条件 5: TL_require==FLEXTO&&flex_dT_flag==1
解析后的Python条件表达式: TL_require == FLEXTO and flex_dT_flag == 1
变量及其范围: [{'name': 'FLEXTO', 'min_value': 4.0, 'max_value': 4.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'FLEXTO', 'constant_value': 4.0}, {'name': 'TL_require', 'min_value': 0.0, 'max_value': 6.0, 'var_type': 'int', 'is_last': False, 'original_var': 'TL_require'}, {'name': 'flex_dT_flag', 'min_value': 0.0, 'max_value': 1.0, 'var_type': 'bool', 'is_last': False, 'original_var': 'flex_dT_flag'}]
解析后的条件: TL_require == FLEXTO and flex_dT_flag == 1
识别到的变量: [{'name': 'FLEXTO', 'min_value': 4.0, 'max_value': 4.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'FLEXTO', 'constant_value': 4.0}, {'name': 'TL_require', 'min_value': 0.0, 'max_value': 6.0, 'var_type': 'int', 'is_last': False, 'original_var': 'TL_require'}, {'name': 'flex_dT_flag', 'min_value': 0.0, 'max_value': 1.0, 'var_type': 'bool', 'is_last': False, 'original_var': 'flex_dT_flag'}]
处理的变量: ['FLEXTO', 'TL_require', 'flex_dT_flag']
Z3表达式: 4 == TL_require
表达式类型: <class 'z3.z3.BoolRef'>
生成的MCDC条件数量: 0

处理条件 6: TL_require==Bump
解析后的Python条件表达式: TL_require == Bump
变量及其范围: [{'name': 'Bump', 'min_value': 3.0, 'max_value': 3.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'Bump', 'constant_value': 3.0}, {'name': 'TL_require', 'min_value': 0.0, 'max_value': 6.0, 'var_type': 'int', 'is_last': False, 'original_var': 'TL_require'}]
解析后的条件: TL_require == Bump
识别到的变量: [{'name': 'Bump', 'min_value': 3.0, 'max_value': 3.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'Bump', 'constant_value': 3.0}, {'name': 'TL_require', 'min_value': 0.0, 'max_value': 6.0, 'var_type': 'int', 'is_last': False, 'original_var': 'TL_require'}]
处理的变量: ['Bump', 'TL_require']
Z3表达式: 3 == TL_require
表达式类型: <class 'z3.z3.BoolRef'>
生成的MCDC条件数量: 1

生成的测试用例:
- 条件: TL_require==DTO1
  测试用例: DTO1=0.0, TL_require=0
  预期结果: True
- 条件: TL_require==DTO1
  测试用例: DTO1=0.0, TL_require=1
  预期结果: False
- 条件: TL_require==DTO2
  测试用例: DTO2=1.0, TL_require=1
  预期结果: True
- 条件: TL_require==DTO2
  测试用例: DTO2=1.0, TL_require=0
  预期结果: False
- 条件: TL_require==GA
  测试用例: GA=2.0, TL_require=2
  预期结果: True
- 条件: TL_require==GA
  测试用例: GA=2.0, TL_require=1
  预期结果: False
- 条件: TL_require==Bump
  测试用例: Bump=3.0, TL_require=3
  预期结果: True
- 条件: TL_require==Bump
  测试用例: Bump=3.0, TL_require=2
  预期结果: False

==================================================
处理模块: 油门杆插值目标计算-N1RDem_PLACL计算
提取到的if条件: ['TL_require!=DCL1&&TL_require!=DCL2', 'TL_require==DCL1', 'TL_require==DCL2']

处理条件 1: TL_require!=DCL1&&TL_require!=DCL2
解析后的Python条件表达式: TL_require != DCL1 and TL_require != DCL2
变量及其范围: [{'name': 'TL_require', 'min_value': 0.0, 'max_value': 6.0, 'var_type': 'int', 'is_last': False, 'original_var': 'TL_require'}, {'name': 'DCL2', 'min_value': 6.0, 'max_value': 6.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'DCL2', 'constant_value': 6.0}, {'name': 'DCL1', 'min_value': 5.0, 'max_value': 5.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'DCL1', 'constant_value': 5.0}]
解析后的条件: TL_require != DCL1 and TL_require != DCL2
识别到的变量: [{'name': 'TL_require', 'min_value': 0.0, 'max_value': 6.0, 'var_type': 'int', 'is_last': False, 'original_var': 'TL_require'}, {'name': 'DCL2', 'min_value': 6.0, 'max_value': 6.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'DCL2', 'constant_value': 6.0}, {'name': 'DCL1', 'min_value': 5.0, 'max_value': 5.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'DCL1', 'constant_value': 5.0}]
处理的变量: ['TL_require', 'DCL2', 'DCL1']
条件解析错误: TL_require != DCL1 and TL_require != DCL2
错误信息: Symbolic expressions cannot be cast to concrete Boolean values.
变量类型:
  TL_require: <class 'z3.z3.ArithRef'>
    - 是算术表达式
  DCL2: <class 'z3.z3.IntNumRef'>
    - 是算术表达式
  DCL1: <class 'z3.z3.IntNumRef'>
    - 是算术表达式
生成的MCDC条件数量: 0

处理条件 2: TL_require==DCL1
解析后的Python条件表达式: TL_require == DCL1
变量及其范围: [{'name': 'TL_require', 'min_value': 0.0, 'max_value': 6.0, 'var_type': 'int', 'is_last': False, 'original_var': 'TL_require'}, {'name': 'DCL1', 'min_value': 5.0, 'max_value': 5.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'DCL1', 'constant_value': 5.0}]
解析后的条件: TL_require == DCL1
识别到的变量: [{'name': 'TL_require', 'min_value': 0.0, 'max_value': 6.0, 'var_type': 'int', 'is_last': False, 'original_var': 'TL_require'}, {'name': 'DCL1', 'min_value': 5.0, 'max_value': 5.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'DCL1', 'constant_value': 5.0}]
处理的变量: ['TL_require', 'DCL1']
Z3表达式: 5 == TL_require
表达式类型: <class 'z3.z3.BoolRef'>
生成的MCDC条件数量: 1

处理条件 3: TL_require==DCL2
解析后的Python条件表达式: TL_require == DCL2
变量及其范围: [{'name': 'TL_require', 'min_value': 0.0, 'max_value': 6.0, 'var_type': 'int', 'is_last': False, 'original_var': 'TL_require'}, {'name': 'DCL2', 'min_value': 6.0, 'max_value': 6.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'DCL2', 'constant_value': 6.0}]
解析后的条件: TL_require == DCL2
识别到的变量: [{'name': 'TL_require', 'min_value': 0.0, 'max_value': 6.0, 'var_type': 'int', 'is_last': False, 'original_var': 'TL_require'}, {'name': 'DCL2', 'min_value': 6.0, 'max_value': 6.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'DCL2', 'constant_value': 6.0}]
处理的变量: ['TL_require', 'DCL2']
Z3表达式: 6 == TL_require
表达式类型: <class 'z3.z3.BoolRef'>
生成的MCDC条件数量: 1

生成的测试用例:
- 条件: TL_require==DCL1
  测试用例: DCL1=5.0, TL_require=5
  预期结果: True
- 条件: TL_require==DCL1
  测试用例: DCL1=5.0, TL_require=4
  预期结果: False
- 条件: TL_require==DCL2
  测试用例: DCL2=6.0, TL_require=6
  预期结果: True
- 条件: TL_require==DCL2
  测试用例: DCL2=6.0, TL_require=5
  预期结果: False

==================================================
处理模块: 油门杆插值目标计算-转换点转速N1Rtr计算-慢车域实时N2R25控制目标计算
提取到的if条件: ['airdis_WOW==1&&PLA<0', 'airdis_WOW==1&&PLA>=0', 'airdis_WOW==0&&approach_air==1', 'airdis_WOW==0&&approach_air==0']

处理条件 1: airdis_WOW==1&&PLA<0
解析后的Python条件表达式: airdis_WOW == 1 and PLA < 0
变量及其范围: [{'name': 'PLA', 'min_value': -33.0, 'max_value': 85.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PLA'}, {'name': 'airdis_WOW', 'min_value': 0.0, 'max_value': 1.0, 'var_type': 'bool', 'is_last': False, 'original_var': 'airdis_WOW'}]
解析后的条件: airdis_WOW == 1 and PLA < 0
识别到的变量: [{'name': 'PLA', 'min_value': -33.0, 'max_value': 85.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PLA'}, {'name': 'airdis_WOW', 'min_value': 0.0, 'max_value': 1.0, 'var_type': 'bool', 'is_last': False, 'original_var': 'airdis_WOW'}]
处理的变量: ['PLA', 'airdis_WOW']
Z3表达式: airdis_WOW == 1
表达式类型: <class 'z3.z3.BoolRef'>
生成的MCDC条件数量: 0

处理条件 2: airdis_WOW==1&&PLA>=0
解析后的Python条件表达式: airdis_WOW == 1 and PLA >= 0
变量及其范围: [{'name': 'PLA', 'min_value': -33.0, 'max_value': 85.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PLA'}, {'name': 'airdis_WOW', 'min_value': 0.0, 'max_value': 1.0, 'var_type': 'bool', 'is_last': False, 'original_var': 'airdis_WOW'}]
解析后的条件: airdis_WOW == 1 and PLA >= 0
识别到的变量: [{'name': 'PLA', 'min_value': -33.0, 'max_value': 85.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PLA'}, {'name': 'airdis_WOW', 'min_value': 0.0, 'max_value': 1.0, 'var_type': 'bool', 'is_last': False, 'original_var': 'airdis_WOW'}]
处理的变量: ['PLA', 'airdis_WOW']
Z3表达式: airdis_WOW == 1
表达式类型: <class 'z3.z3.BoolRef'>
生成的MCDC条件数量: 1

处理条件 3: airdis_WOW==0&&approach_air==1
解析后的Python条件表达式: airdis_WOW == 0 and approach_air == 1
变量及其范围: [{'name': 'airdis_WOW', 'min_value': 0.0, 'max_value': 1.0, 'var_type': 'bool', 'is_last': False, 'original_var': 'airdis_WOW'}, {'name': 'approach_air', 'min_value': 0.0, 'max_value': 1.0, 'var_type': 'bool', 'is_last': False, 'original_var': 'approach_air'}]
解析后的条件: airdis_WOW == 0 and approach_air == 1
识别到的变量: [{'name': 'airdis_WOW', 'min_value': 0.0, 'max_value': 1.0, 'var_type': 'bool', 'is_last': False, 'original_var': 'airdis_WOW'}, {'name': 'approach_air', 'min_value': 0.0, 'max_value': 1.0, 'var_type': 'bool', 'is_last': False, 'original_var': 'approach_air'}]
处理的变量: ['airdis_WOW', 'approach_air']
Z3表达式: airdis_WOW == 0
表达式类型: <class 'z3.z3.BoolRef'>
生成的MCDC条件数量: 0

处理条件 4: airdis_WOW==0&&approach_air==0
解析后的Python条件表达式: airdis_WOW == 0 and approach_air == 0
变量及其范围: [{'name': 'airdis_WOW', 'min_value': 0.0, 'max_value': 1.0, 'var_type': 'bool', 'is_last': False, 'original_var': 'airdis_WOW'}, {'name': 'approach_air', 'min_value': 0.0, 'max_value': 1.0, 'var_type': 'bool', 'is_last': False, 'original_var': 'approach_air'}]
解析后的条件: airdis_WOW == 0 and approach_air == 0
识别到的变量: [{'name': 'airdis_WOW', 'min_value': 0.0, 'max_value': 1.0, 'var_type': 'bool', 'is_last': False, 'original_var': 'airdis_WOW'}, {'name': 'approach_air', 'min_value': 0.0, 'max_value': 1.0, 'var_type': 'bool', 'is_last': False, 'original_var': 'approach_air'}]
处理的变量: ['airdis_WOW', 'approach_air']
Z3表达式: airdis_WOW == 0
表达式类型: <class 'z3.z3.BoolRef'>
生成的MCDC条件数量: 1

生成的测试用例:
- 条件: airdis_WOW==1&&PLA>=0
  测试用例: PLA=0.0, airdis_WOW=1.0
  预期结果: True
- 条件: airdis_WOW==1&&PLA>=0
  测试用例: PLA=0.0, airdis_WOW=0.5
  预期结果: False
- 条件: airdis_WOW==0&&approach_air==0
  测试用例: airdis_WOW=0.0, approach_air=0.0
  预期结果: True
- 条件: airdis_WOW==0&&approach_air==0
  测试用例: airdis_WOW=0.5, approach_air=0.0
  预期结果: False

==================================================
处理模块: 油门杆插值目标计算-转换点转速N1Rtr计算-高低压换算转速
模块中没有if语句，跳过

==================================================
处理模块: 油门杆插值目标计算-转换点转速N1Rtr计算-N1r-PLAIdle
提取到的if条件: ['N1r>N1RDem_PLAIdle']

处理条件 1: N1r>N1RDem_PLAIdle
解析后的Python条件表达式: N1r > N1RDem_PLAIdle
变量及其范围: [{'name': 'N1RDem_PLAIdle', 'min_value': -30000.0, 'max_value': 30000.0, 'var_type': 'float', 'is_last': False, 'original_var': 'N1RDem_PLAIdle'}, {'name': 'N1r', 'min_value': 0.0, 'max_value': 6000.0, 'var_type': 'float', 'is_last': False, 'original_var': 'N1r'}]
解析后的条件: N1r > N1RDem_PLAIdle
识别到的变量: [{'name': 'N1RDem_PLAIdle', 'min_value': -30000.0, 'max_value': 30000.0, 'var_type': 'float', 'is_last': False, 'original_var': 'N1RDem_PLAIdle'}, {'name': 'N1r', 'min_value': 0.0, 'max_value': 6000.0, 'var_type': 'float', 'is_last': False, 'original_var': 'N1r'}]
处理的变量: ['N1RDem_PLAIdle', 'N1r']
Z3表达式: N1r > N1RDem_PLAIdle
表达式类型: <class 'z3.z3.BoolRef'>
生成的MCDC条件数量: 2

生成的测试用例:
- 条件: N1r>N1RDem_PLAIdle
  测试用例: N1RDem_PLAIdle=-0.5, N1r=0.0
  预期结果: True
- 条件: N1r>N1RDem_PLAIdle
  测试用例: N1RDem_PLAIdle=0.0, N1r=0.0
  预期结果: False
- 条件: N1r>N1RDem_PLAIdle
  测试用例: N1RDem_PLAIdle=0.0, N1r=0.5
  预期结果: True
- 条件: N1r>N1RDem_PLAIdle
  测试用例: N1RDem_PLAIdle=0.0, N1r=0.0
  预期结果: False

==================================================
处理模块: 油门杆插值目标计算-转换点转速N1Rtr计算-MCR
提取到的if条件: ['N2R25Dem_PLAIdle==N2R25Dem_GI||N2R25Dem_PLAIdle==N2R25Dem_FI||N2R25Dem_PLAIdle==N2R25Dem_AI&&(N1Rtr>N1RDem_MCR)']

处理条件 1: N2R25Dem_PLAIdle==N2R25Dem_GI||N2R25Dem_PLAIdle==N2R25Dem_FI||N2R25Dem_PLAIdle==N2R25Dem_AI&&(N1Rtr>N1RDem_MCR)
解析后的Python条件表达式: N2R25Dem_PLAIdle == N2R25Dem_GI or N2R25Dem_PLAIdle == N2R25Dem_FI or N2R25Dem_PLAIdle == N2R25Dem_AI and (N1Rtr > N1RDem_MCR)
变量及其范围: [{'name': 'N2R25Dem_AI', 'min_value': 0.0, 'max_value': 20000.0, 'var_type': 'float', 'is_last': False, 'original_var': 'N2R25Dem_AI'}, {'name': 'N1RDem_MCR', 'min_value': -30000.0, 'max_value': 30000.0, 'var_type': 'float', 'is_last': False, 'original_var': 'N1RDem_MCR'}, {'name': 'N2R25Dem_FI', 'min_value': 0.0, 'max_value': 20000.0, 'var_type': 'float', 'is_last': False, 'original_var': 'N2R25Dem_FI'}, {'name': 'N2R25Dem_PLAIdle', 'min_value': 0.0, 'max_value': 20000.0, 'var_type': 'float', 'is_last': False, 'original_var': 'N2R25Dem_PLAIdle'}, {'name': 'N2R25Dem_GI', 'min_value': 0.0, 'max_value': 20000.0, 'var_type': 'float', 'is_last': False, 'original_var': 'N2R25Dem_GI'}, {'name': 'N1Rtr', 'min_value': -30000.0, 'max_value': 30000.0, 'var_type': 'float', 'is_last': False, 'original_var': 'N1Rtr'}]
解析后的条件: N2R25Dem_PLAIdle == N2R25Dem_GI or N2R25Dem_PLAIdle == N2R25Dem_FI or N2R25Dem_PLAIdle == N2R25Dem_AI and (N1Rtr > N1RDem_MCR)
识别到的变量: [{'name': 'N2R25Dem_AI', 'min_value': 0.0, 'max_value': 20000.0, 'var_type': 'float', 'is_last': False, 'original_var': 'N2R25Dem_AI'}, {'name': 'N1RDem_MCR', 'min_value': -30000.0, 'max_value': 30000.0, 'var_type': 'float', 'is_last': False, 'original_var': 'N1RDem_MCR'}, {'name': 'N2R25Dem_FI', 'min_value': 0.0, 'max_value': 20000.0, 'var_type': 'float', 'is_last': False, 'original_var': 'N2R25Dem_FI'}, {'name': 'N2R25Dem_PLAIdle', 'min_value': 0.0, 'max_value': 20000.0, 'var_type': 'float', 'is_last': False, 'original_var': 'N2R25Dem_PLAIdle'}, {'name': 'N2R25Dem_GI', 'min_value': 0.0, 'max_value': 20000.0, 'var_type': 'float', 'is_last': False, 'original_var': 'N2R25Dem_GI'}, {'name': 'N1Rtr', 'min_value': -30000.0, 'max_value': 30000.0, 'var_type': 'float', 'is_last': False, 'original_var': 'N1Rtr'}]
处理的变量: ['N2R25Dem_AI', 'N1RDem_MCR', 'N2R25Dem_FI', 'N2R25Dem_PLAIdle', 'N2R25Dem_GI', 'N1Rtr']
Z3表达式: N2R25Dem_PLAIdle == N2R25Dem_AI
表达式类型: <class 'z3.z3.BoolRef'>
生成的MCDC条件数量: 0

==================================================
处理模块: 油门杆插值目标计算-转换点转速N1Rtr计算-MREV
提取到的if条件: ['N2R25Dem_PLAIdle==N2R25Dem_RI&&N1Rtr>N1RDem_MREV']

处理条件 1: N2R25Dem_PLAIdle==N2R25Dem_RI&&N1Rtr>N1RDem_MREV
解析后的Python条件表达式: N2R25Dem_PLAIdle == N2R25Dem_RI and N1Rtr > N1RDem_MREV
变量及其范围: [{'name': 'N1Rtr', 'min_value': -30000.0, 'max_value': 30000.0, 'var_type': 'float', 'is_last': False, 'original_var': 'N1Rtr'}, {'name': 'N1RDem_MREV', 'min_value': -30000.0, 'max_value': 30000.0, 'var_type': 'float', 'is_last': False, 'original_var': 'N1RDem_MREV'}, {'name': 'N2R25Dem_RI', 'min_value': 0.0, 'max_value': 20000.0, 'var_type': 'float', 'is_last': False, 'original_var': 'N2R25Dem_RI'}, {'name': 'N2R25Dem_PLAIdle', 'min_value': 0.0, 'max_value': 20000.0, 'var_type': 'float', 'is_last': False, 'original_var': 'N2R25Dem_PLAIdle'}]
解析后的条件: N2R25Dem_PLAIdle == N2R25Dem_RI and N1Rtr > N1RDem_MREV
识别到的变量: [{'name': 'N1Rtr', 'min_value': -30000.0, 'max_value': 30000.0, 'var_type': 'float', 'is_last': False, 'original_var': 'N1Rtr'}, {'name': 'N1RDem_MREV', 'min_value': -30000.0, 'max_value': 30000.0, 'var_type': 'float', 'is_last': False, 'original_var': 'N1RDem_MREV'}, {'name': 'N2R25Dem_RI', 'min_value': 0.0, 'max_value': 20000.0, 'var_type': 'float', 'is_last': False, 'original_var': 'N2R25Dem_RI'}, {'name': 'N2R25Dem_PLAIdle', 'min_value': 0.0, 'max_value': 20000.0, 'var_type': 'float', 'is_last': False, 'original_var': 'N2R25Dem_PLAIdle'}]
处理的变量: ['N1Rtr', 'N1RDem_MREV', 'N2R25Dem_RI', 'N2R25Dem_PLAIdle']
Z3表达式: N2R25Dem_PLAIdle == N2R25Dem_RI
表达式类型: <class 'z3.z3.BoolRef'>
生成的MCDC条件数量: 0

==================================================
处理模块: 油门杆插值目标计算-准最大推力
模块中没有if语句，跳过

==================================================
处理模块: 油门杆插值目标计算-起飞（TO）
模块中没有if语句，跳过

==================================================
处理模块: 油门杆插值目标计算-连续（CT）
模块中没有if语句，跳过

==================================================
处理模块: 油门杆插值目标计算-爬升（CL）
模块中没有if语句，跳过

==================================================
处理模块: 油门杆插值目标计算-巡航（CR）
模块中没有if语句，跳过

==================================================
处理模块: 油门杆插值目标计算-反推（REV）
模块中没有if语句，跳过

==================================================
处理模块: 油门杆插值目标计算-N1RDem_BAK计算
模块中没有if语句，跳过

==================================================
处理模块: N1R指示量N1RDemInd计算（最大反推）
提取到的if条件: ['thrust_level == level_MREV']

处理条件 1: thrust_level == level_MREV
解析后的Python条件表达式: thrust_level == level_MREV
变量及其范围: [{'name': 'thrust_level', 'min_value': 0.0, 'max_value': 23.0, 'var_type': 'int', 'is_last': False, 'original_var': 'thrust_level'}, {'name': 'level_MREV', 'min_value': 1.0, 'max_value': 1.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_MREV', 'constant_value': 1.0}]
解析后的条件: thrust_level == level_MREV
识别到的变量: [{'name': 'thrust_level', 'min_value': 0.0, 'max_value': 23.0, 'var_type': 'int', 'is_last': False, 'original_var': 'thrust_level'}, {'name': 'level_MREV', 'min_value': 1.0, 'max_value': 1.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_MREV', 'constant_value': 1.0}]
处理的变量: ['thrust_level', 'level_MREV']
Z3表达式: 1 == thrust_level
表达式类型: <class 'z3.z3.BoolRef'>
生成的MCDC条件数量: 1

生成的测试用例:
- 条件: thrust_level == level_MREV
  测试用例: level_MREV=1.0, thrust_level=1
  预期结果: True
- 条件: thrust_level == level_MREV
  测试用例: level_MREV=1.0, thrust_level=0
  预期结果: False

==================================================
处理模块: N1R指示量N1RDemInd计算（反推）
提取到的if条件: ['thrust_level == level_REV']

处理条件 1: thrust_level == level_REV
解析后的Python条件表达式: thrust_level == level_REV
变量及其范围: [{'name': 'level_REV', 'min_value': 2.0, 'max_value': 2.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_REV', 'constant_value': 2.0}, {'name': 'thrust_level', 'min_value': 0.0, 'max_value': 23.0, 'var_type': 'int', 'is_last': False, 'original_var': 'thrust_level'}]
解析后的条件: thrust_level == level_REV
识别到的变量: [{'name': 'level_REV', 'min_value': 2.0, 'max_value': 2.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_REV', 'constant_value': 2.0}, {'name': 'thrust_level', 'min_value': 0.0, 'max_value': 23.0, 'var_type': 'int', 'is_last': False, 'original_var': 'thrust_level'}]
处理的变量: ['level_REV', 'thrust_level']
Z3表达式: 2 == thrust_level
表达式类型: <class 'z3.z3.BoolRef'>
生成的MCDC条件数量: 1

生成的测试用例:
- 条件: thrust_level == level_REV
  测试用例: level_REV=2.0, thrust_level=2
  预期结果: True
- 条件: thrust_level == level_REV
  测试用例: level_REV=2.0, thrust_level=1
  预期结果: False

==================================================
处理模块: N1R指示量N1RDemInd计算（反推慢车、地面慢车、空中慢车、进近慢车）
提取到的if条件: ['thrust_level == level_RI || thrust_level == level_GI || thrust_level == level_FI || thrust_level == level_AI']

处理条件 1: thrust_level == level_RI || thrust_level == level_GI || thrust_level == level_FI || thrust_level == level_AI
解析后的Python条件表达式: thrust_level == level_RI or thrust_level == level_GI or thrust_level == level_FI or thrust_level == level_AI
变量及其范围: [{'name': 'thrust_level', 'min_value': 0.0, 'max_value': 23.0, 'var_type': 'int', 'is_last': False, 'original_var': 'thrust_level'}, {'name': 'level_AI', 'min_value': 6.0, 'max_value': 6.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_AI', 'constant_value': 6.0}, {'name': 'level_RI', 'min_value': 3.0, 'max_value': 3.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_RI', 'constant_value': 3.0}, {'name': 'level_GI', 'min_value': 4.0, 'max_value': 4.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_GI', 'constant_value': 4.0}, {'name': 'level_FI', 'min_value': 5.0, 'max_value': 5.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_FI', 'constant_value': 5.0}]
解析后的条件: thrust_level == level_RI or thrust_level == level_GI or thrust_level == level_FI or thrust_level == level_AI
识别到的变量: [{'name': 'thrust_level', 'min_value': 0.0, 'max_value': 23.0, 'var_type': 'int', 'is_last': False, 'original_var': 'thrust_level'}, {'name': 'level_AI', 'min_value': 6.0, 'max_value': 6.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_AI', 'constant_value': 6.0}, {'name': 'level_RI', 'min_value': 3.0, 'max_value': 3.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_RI', 'constant_value': 3.0}, {'name': 'level_GI', 'min_value': 4.0, 'max_value': 4.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_GI', 'constant_value': 4.0}, {'name': 'level_FI', 'min_value': 5.0, 'max_value': 5.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_FI', 'constant_value': 5.0}]
处理的变量: ['thrust_level', 'level_AI', 'level_RI', 'level_GI', 'level_FI']
Z3表达式: 6 == thrust_level
表达式类型: <class 'z3.z3.BoolRef'>
生成的MCDC条件数量: 0

==================================================
处理模块: N1R指示量N1RDemInd计算（巡航）
提取到的if条件: ['thrust_level == level_CR']

处理条件 1: thrust_level == level_CR
解析后的Python条件表达式: thrust_level == level_CR
变量及其范围: [{'name': 'thrust_level', 'min_value': 0.0, 'max_value': 23.0, 'var_type': 'int', 'is_last': False, 'original_var': 'thrust_level'}, {'name': 'level_CR', 'min_value': 7.0, 'max_value': 7.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_CR', 'constant_value': 7.0}]
解析后的条件: thrust_level == level_CR
识别到的变量: [{'name': 'thrust_level', 'min_value': 0.0, 'max_value': 23.0, 'var_type': 'int', 'is_last': False, 'original_var': 'thrust_level'}, {'name': 'level_CR', 'min_value': 7.0, 'max_value': 7.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_CR', 'constant_value': 7.0}]
处理的变量: ['thrust_level', 'level_CR']
Z3表达式: 7 == thrust_level
表达式类型: <class 'z3.z3.BoolRef'>
生成的MCDC条件数量: 1

生成的测试用例:
- 条件: thrust_level == level_CR
  测试用例: level_CR=7.0, thrust_level=7
  预期结果: True
- 条件: thrust_level == level_CR
  测试用例: level_CR=7.0, thrust_level=6
  预期结果: False

==================================================
处理模块: N1R指示量N1RDemInd计算（最大巡航）
提取到的if条件: ['thrust_level == level_MCR']

处理条件 1: thrust_level == level_MCR
解析后的Python条件表达式: thrust_level == level_MCR
变量及其范围: [{'name': 'thrust_level', 'min_value': 0.0, 'max_value': 23.0, 'var_type': 'int', 'is_last': False, 'original_var': 'thrust_level'}, {'name': 'level_MCR', 'min_value': 8.0, 'max_value': 8.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_MCR', 'constant_value': 8.0}]
解析后的条件: thrust_level == level_MCR
识别到的变量: [{'name': 'thrust_level', 'min_value': 0.0, 'max_value': 23.0, 'var_type': 'int', 'is_last': False, 'original_var': 'thrust_level'}, {'name': 'level_MCR', 'min_value': 8.0, 'max_value': 8.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_MCR', 'constant_value': 8.0}]
处理的变量: ['thrust_level', 'level_MCR']
Z3表达式: 8 == thrust_level
表达式类型: <class 'z3.z3.BoolRef'>
生成的MCDC条件数量: 1

生成的测试用例:
- 条件: thrust_level == level_MCR
  测试用例: level_MCR=8.0, thrust_level=8
  预期结果: True
- 条件: thrust_level == level_MCR
  测试用例: level_MCR=8.0, thrust_level=7
  预期结果: False

==================================================
处理模块: N1R指示量N1RDemInd计算（爬升）
提取到的if条件: ['thrust_level == level_CL']

处理条件 1: thrust_level == level_CL
解析后的Python条件表达式: thrust_level == level_CL
变量及其范围: [{'name': 'level_CL', 'min_value': 9.0, 'max_value': 9.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_CL', 'constant_value': 9.0}, {'name': 'thrust_level', 'min_value': 0.0, 'max_value': 23.0, 'var_type': 'int', 'is_last': False, 'original_var': 'thrust_level'}]
解析后的条件: thrust_level == level_CL
识别到的变量: [{'name': 'level_CL', 'min_value': 9.0, 'max_value': 9.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_CL', 'constant_value': 9.0}, {'name': 'thrust_level', 'min_value': 0.0, 'max_value': 23.0, 'var_type': 'int', 'is_last': False, 'original_var': 'thrust_level'}]
处理的变量: ['level_CL', 'thrust_level']
Z3表达式: 9 == thrust_level
表达式类型: <class 'z3.z3.BoolRef'>
生成的MCDC条件数量: 1

生成的测试用例:
- 条件: thrust_level == level_CL
  测试用例: level_CL=9.0, thrust_level=9
  预期结果: True
- 条件: thrust_level == level_CL
  测试用例: level_CL=9.0, thrust_level=8
  预期结果: False

==================================================
处理模块: N1R指示量N1RDemInd计算（最大爬升）
提取到的if条件: ['thrust_level == level_MCL']

处理条件 1: thrust_level == level_MCL
解析后的Python条件表达式: thrust_level == level_MCL
变量及其范围: [{'name': 'level_MCL', 'min_value': 10.0, 'max_value': 10.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_MCL', 'constant_value': 10.0}, {'name': 'thrust_level', 'min_value': 0.0, 'max_value': 23.0, 'var_type': 'int', 'is_last': False, 'original_var': 'thrust_level'}]
解析后的条件: thrust_level == level_MCL
识别到的变量: [{'name': 'level_MCL', 'min_value': 10.0, 'max_value': 10.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_MCL', 'constant_value': 10.0}, {'name': 'thrust_level', 'min_value': 0.0, 'max_value': 23.0, 'var_type': 'int', 'is_last': False, 'original_var': 'thrust_level'}]
处理的变量: ['level_MCL', 'thrust_level']
Z3表达式: 10 == thrust_level
表达式类型: <class 'z3.z3.BoolRef'>
生成的MCDC条件数量: 1

生成的测试用例:
- 条件: thrust_level == level_MCL
  测试用例: level_MCL=10.0, thrust_level=10
  预期结果: True
- 条件: thrust_level == level_MCL
  测试用例: level_MCL=10.0, thrust_level=9
  预期结果: False

==================================================
处理模块: N1R指示量N1RDemInd计算（减推力爬升1）
提取到的if条件: ['thrust_level == level_DCL1']

处理条件 1: thrust_level == level_DCL1
解析后的Python条件表达式: thrust_level == level_DCL1
变量及其范围: [{'name': 'thrust_level', 'min_value': 0.0, 'max_value': 23.0, 'var_type': 'int', 'is_last': False, 'original_var': 'thrust_level'}, {'name': 'level_DCL1', 'min_value': 11.0, 'max_value': 11.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_DCL1', 'constant_value': 11.0}]
解析后的条件: thrust_level == level_DCL1
识别到的变量: [{'name': 'thrust_level', 'min_value': 0.0, 'max_value': 23.0, 'var_type': 'int', 'is_last': False, 'original_var': 'thrust_level'}, {'name': 'level_DCL1', 'min_value': 11.0, 'max_value': 11.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_DCL1', 'constant_value': 11.0}]
处理的变量: ['thrust_level', 'level_DCL1']
Z3表达式: 11 == thrust_level
表达式类型: <class 'z3.z3.BoolRef'>
生成的MCDC条件数量: 1

生成的测试用例:
- 条件: thrust_level == level_DCL1
  测试用例: level_DCL1=11.0, thrust_level=11
  预期结果: True
- 条件: thrust_level == level_DCL1
  测试用例: level_DCL1=11.0, thrust_level=10
  预期结果: False

==================================================
处理模块: N1R指示量N1RDemInd计算（减推力爬升2）
提取到的if条件: ['thrust_level == level_DCL2']

处理条件 1: thrust_level == level_DCL2
解析后的Python条件表达式: thrust_level == level_DCL2
变量及其范围: [{'name': 'thrust_level', 'min_value': 0.0, 'max_value': 23.0, 'var_type': 'int', 'is_last': False, 'original_var': 'thrust_level'}, {'name': 'level_DCL2', 'min_value': 12.0, 'max_value': 12.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_DCL2', 'constant_value': 12.0}]
解析后的条件: thrust_level == level_DCL2
识别到的变量: [{'name': 'thrust_level', 'min_value': 0.0, 'max_value': 23.0, 'var_type': 'int', 'is_last': False, 'original_var': 'thrust_level'}, {'name': 'level_DCL2', 'min_value': 12.0, 'max_value': 12.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_DCL2', 'constant_value': 12.0}]
处理的变量: ['thrust_level', 'level_DCL2']
Z3表达式: 12 == thrust_level
表达式类型: <class 'z3.z3.BoolRef'>
生成的MCDC条件数量: 1

生成的测试用例:
- 条件: thrust_level == level_DCL2
  测试用例: level_DCL2=12.0, thrust_level=12
  预期结果: True
- 条件: thrust_level == level_DCL2
  测试用例: level_DCL2=12.0, thrust_level=11
  预期结果: False

==================================================
处理模块: N1R指示量N1RDemInd计算（连续）
提取到的if条件: ['thrust_level == level_CT']

处理条件 1: thrust_level == level_CT
解析后的Python条件表达式: thrust_level == level_CT
变量及其范围: [{'name': 'level_CT', 'min_value': 13.0, 'max_value': 13.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_CT', 'constant_value': 13.0}, {'name': 'thrust_level', 'min_value': 0.0, 'max_value': 23.0, 'var_type': 'int', 'is_last': False, 'original_var': 'thrust_level'}]
解析后的条件: thrust_level == level_CT
识别到的变量: [{'name': 'level_CT', 'min_value': 13.0, 'max_value': 13.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_CT', 'constant_value': 13.0}, {'name': 'thrust_level', 'min_value': 0.0, 'max_value': 23.0, 'var_type': 'int', 'is_last': False, 'original_var': 'thrust_level'}]
处理的变量: ['level_CT', 'thrust_level']
Z3表达式: 13 == thrust_level
表达式类型: <class 'z3.z3.BoolRef'>
生成的MCDC条件数量: 1

生成的测试用例:
- 条件: thrust_level == level_CT
  测试用例: level_CT=13.0, thrust_level=13
  预期结果: True
- 条件: thrust_level == level_CT
  测试用例: level_CT=13.0, thrust_level=12
  预期结果: False

==================================================
处理模块: N1R指示量N1RDemInd计算（最大连续）
提取到的if条件: ['thrust_level == level_MCT']

处理条件 1: thrust_level == level_MCT
解析后的Python条件表达式: thrust_level == level_MCT
变量及其范围: [{'name': 'thrust_level', 'min_value': 0.0, 'max_value': 23.0, 'var_type': 'int', 'is_last': False, 'original_var': 'thrust_level'}, {'name': 'level_MCT', 'min_value': 14.0, 'max_value': 14.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_MCT', 'constant_value': 14.0}]
解析后的条件: thrust_level == level_MCT
识别到的变量: [{'name': 'thrust_level', 'min_value': 0.0, 'max_value': 23.0, 'var_type': 'int', 'is_last': False, 'original_var': 'thrust_level'}, {'name': 'level_MCT', 'min_value': 14.0, 'max_value': 14.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_MCT', 'constant_value': 14.0}]
处理的变量: ['thrust_level', 'level_MCT']
Z3表达式: 14 == thrust_level
表达式类型: <class 'z3.z3.BoolRef'>
生成的MCDC条件数量: 1

生成的测试用例:
- 条件: thrust_level == level_MCT
  测试用例: level_MCT=14.0, thrust_level=14
  预期结果: True
- 条件: thrust_level == level_MCT
  测试用例: level_MCT=14.0, thrust_level=13
  预期结果: False

==================================================
处理模块: N1R指示量N1RDemInd计算（起飞）
提取到的if条件: ['thrust_level == level_TO']

处理条件 1: thrust_level == level_TO
解析后的Python条件表达式: thrust_level == level_TO
变量及其范围: [{'name': 'thrust_level', 'min_value': 0.0, 'max_value': 23.0, 'var_type': 'int', 'is_last': False, 'original_var': 'thrust_level'}, {'name': 'level_TO', 'min_value': 15.0, 'max_value': 15.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_TO', 'constant_value': 15.0}]
解析后的条件: thrust_level == level_TO
识别到的变量: [{'name': 'thrust_level', 'min_value': 0.0, 'max_value': 23.0, 'var_type': 'int', 'is_last': False, 'original_var': 'thrust_level'}, {'name': 'level_TO', 'min_value': 15.0, 'max_value': 15.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_TO', 'constant_value': 15.0}]
处理的变量: ['thrust_level', 'level_TO']
Z3表达式: 15 == thrust_level
表达式类型: <class 'z3.z3.BoolRef'>
生成的MCDC条件数量: 1

生成的测试用例:
- 条件: thrust_level == level_TO
  测试用例: level_TO=15.0, thrust_level=15
  预期结果: True
- 条件: thrust_level == level_TO
  测试用例: level_TO=15.0, thrust_level=14
  预期结果: False

==================================================
处理模块: N1R指示量N1RDemInd计算（最大起飞）
提取到的if条件: ['thrust_level == level_MTO']

处理条件 1: thrust_level == level_MTO
解析后的Python条件表达式: thrust_level == level_MTO
变量及其范围: [{'name': 'thrust_level', 'min_value': 0.0, 'max_value': 23.0, 'var_type': 'int', 'is_last': False, 'original_var': 'thrust_level'}, {'name': 'level_MTO', 'min_value': 16.0, 'max_value': 16.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_MTO', 'constant_value': 16.0}]
解析后的条件: thrust_level == level_MTO
识别到的变量: [{'name': 'thrust_level', 'min_value': 0.0, 'max_value': 23.0, 'var_type': 'int', 'is_last': False, 'original_var': 'thrust_level'}, {'name': 'level_MTO', 'min_value': 16.0, 'max_value': 16.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_MTO', 'constant_value': 16.0}]
处理的变量: ['thrust_level', 'level_MTO']
Z3表达式: 16 == thrust_level
表达式类型: <class 'z3.z3.BoolRef'>
生成的MCDC条件数量: 1

生成的测试用例:
- 条件: thrust_level == level_MTO
  测试用例: level_MTO=16.0, thrust_level=16
  预期结果: True
- 条件: thrust_level == level_MTO
  测试用例: level_MTO=16.0, thrust_level=15
  预期结果: False

==================================================
处理模块: N1R指示量N1RDemInd计算（减推力起飞1）
提取到的if条件: ['thrust_level == level_DTO1']

处理条件 1: thrust_level == level_DTO1
解析后的Python条件表达式: thrust_level == level_DTO1
变量及其范围: [{'name': 'thrust_level', 'min_value': 0.0, 'max_value': 23.0, 'var_type': 'int', 'is_last': False, 'original_var': 'thrust_level'}, {'name': 'level_DTO1', 'min_value': 17.0, 'max_value': 17.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_DTO1', 'constant_value': 17.0}]
解析后的条件: thrust_level == level_DTO1
识别到的变量: [{'name': 'thrust_level', 'min_value': 0.0, 'max_value': 23.0, 'var_type': 'int', 'is_last': False, 'original_var': 'thrust_level'}, {'name': 'level_DTO1', 'min_value': 17.0, 'max_value': 17.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_DTO1', 'constant_value': 17.0}]
处理的变量: ['thrust_level', 'level_DTO1']
Z3表达式: 17 == thrust_level
表达式类型: <class 'z3.z3.BoolRef'>
生成的MCDC条件数量: 1

生成的测试用例:
- 条件: thrust_level == level_DTO1
  测试用例: level_DTO1=17.0, thrust_level=17
  预期结果: True
- 条件: thrust_level == level_DTO1
  测试用例: level_DTO1=17.0, thrust_level=16
  预期结果: False

==================================================
处理模块: N1R指示量N1RDemInd计算（减推力起飞2）
提取到的if条件: ['thrust_level == level_DTO2']

处理条件 1: thrust_level == level_DTO2
解析后的Python条件表达式: thrust_level == level_DTO2
变量及其范围: [{'name': 'thrust_level', 'min_value': 0.0, 'max_value': 23.0, 'var_type': 'int', 'is_last': False, 'original_var': 'thrust_level'}, {'name': 'level_DTO2', 'min_value': 18.0, 'max_value': 18.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_DTO2', 'constant_value': 18.0}]
解析后的条件: thrust_level == level_DTO2
识别到的变量: [{'name': 'thrust_level', 'min_value': 0.0, 'max_value': 23.0, 'var_type': 'int', 'is_last': False, 'original_var': 'thrust_level'}, {'name': 'level_DTO2', 'min_value': 18.0, 'max_value': 18.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_DTO2', 'constant_value': 18.0}]
处理的变量: ['thrust_level', 'level_DTO2']
Z3表达式: 18 == thrust_level
表达式类型: <class 'z3.z3.BoolRef'>
生成的MCDC条件数量: 1

生成的测试用例:
- 条件: thrust_level == level_DTO2
  测试用例: level_DTO2=18.0, thrust_level=18
  预期结果: True
- 条件: thrust_level == level_DTO2
  测试用例: level_DTO2=18.0, thrust_level=17
  预期结果: False

==================================================
处理模块: N1R指示量N1RDemInd计算（复飞）
提取到的if条件: ['thrust_level == level_GA']

处理条件 1: thrust_level == level_GA
解析后的Python条件表达式: thrust_level == level_GA
变量及其范围: [{'name': 'thrust_level', 'min_value': 0.0, 'max_value': 23.0, 'var_type': 'int', 'is_last': False, 'original_var': 'thrust_level'}, {'name': 'level_GA', 'min_value': 21.0, 'max_value': 21.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_GA', 'constant_value': 21.0}]
解析后的条件: thrust_level == level_GA
识别到的变量: [{'name': 'thrust_level', 'min_value': 0.0, 'max_value': 23.0, 'var_type': 'int', 'is_last': False, 'original_var': 'thrust_level'}, {'name': 'level_GA', 'min_value': 21.0, 'max_value': 21.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_GA', 'constant_value': 21.0}]
处理的变量: ['thrust_level', 'level_GA']
Z3表达式: 21 == thrust_level
表达式类型: <class 'z3.z3.BoolRef'>
生成的MCDC条件数量: 1

生成的测试用例:
- 条件: thrust_level == level_GA
  测试用例: level_GA=21.0, thrust_level=21
  预期结果: True
- 条件: thrust_level == level_GA
  测试用例: level_GA=21.0, thrust_level=20
  预期结果: False

==================================================
处理模块: N1R指示量N1RDemInd计算（增推力起飞）
提取到的if条件: ['thrust_level == level_Bump']

处理条件 1: thrust_level == level_Bump
解析后的Python条件表达式: thrust_level == level_Bump
变量及其范围: [{'name': 'thrust_level', 'min_value': 0.0, 'max_value': 23.0, 'var_type': 'int', 'is_last': False, 'original_var': 'thrust_level'}, {'name': 'level_Bump', 'min_value': 19.0, 'max_value': 19.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_Bump', 'constant_value': 19.0}]
解析后的条件: thrust_level == level_Bump
识别到的变量: [{'name': 'thrust_level', 'min_value': 0.0, 'max_value': 23.0, 'var_type': 'int', 'is_last': False, 'original_var': 'thrust_level'}, {'name': 'level_Bump', 'min_value': 19.0, 'max_value': 19.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_Bump', 'constant_value': 19.0}]
处理的变量: ['thrust_level', 'level_Bump']
Z3表达式: 19 == thrust_level
表达式类型: <class 'z3.z3.BoolRef'>
生成的MCDC条件数量: 1

生成的测试用例:
- 条件: thrust_level == level_Bump
  测试用例: level_Bump=19.0, thrust_level=19
  预期结果: True
- 条件: thrust_level == level_Bump
  测试用例: level_Bump=19.0, thrust_level=18
  预期结果: False

==================================================
处理模块: N1R指示量N1RDemInd计算（灵活起飞）
提取到的if条件: ['thrust_level == level_FLEXTO']

处理条件 1: thrust_level == level_FLEXTO
解析后的Python条件表达式: thrust_level == level_FLEXTO
变量及其范围: [{'name': 'level_FLEXTO', 'min_value': 20.0, 'max_value': 20.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_FLEXTO', 'constant_value': 20.0}, {'name': 'thrust_level', 'min_value': 0.0, 'max_value': 23.0, 'var_type': 'int', 'is_last': False, 'original_var': 'thrust_level'}]
解析后的条件: thrust_level == level_FLEXTO
识别到的变量: [{'name': 'level_FLEXTO', 'min_value': 20.0, 'max_value': 20.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_FLEXTO', 'constant_value': 20.0}, {'name': 'thrust_level', 'min_value': 0.0, 'max_value': 23.0, 'var_type': 'int', 'is_last': False, 'original_var': 'thrust_level'}]
处理的变量: ['level_FLEXTO', 'thrust_level']
Z3表达式: 20 == thrust_level
表达式类型: <class 'z3.z3.BoolRef'>
生成的MCDC条件数量: 1

生成的测试用例:
- 条件: thrust_level == level_FLEXTO
  测试用例: level_FLEXTO=20.0, thrust_level=20
  预期结果: True
- 条件: thrust_level == level_FLEXTO
  测试用例: level_FLEXTO=20.0, thrust_level=19
  预期结果: False

==================================================
处理模块: N1R指示量N1RDemInd计算（准最大推力）
提取到的if条件: ['thrust_level == level_TO2MAX']

处理条件 1: thrust_level == level_TO2MAX
解析后的Python条件表达式: thrust_level == level_TO2MAX
变量及其范围: [{'name': 'thrust_level', 'min_value': 0.0, 'max_value': 23.0, 'var_type': 'int', 'is_last': False, 'original_var': 'thrust_level'}, {'name': 'level_TO2MAX', 'min_value': 23.0, 'max_value': 23.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_TO2MAX', 'constant_value': 23.0}]
解析后的条件: thrust_level == level_TO2MAX
识别到的变量: [{'name': 'thrust_level', 'min_value': 0.0, 'max_value': 23.0, 'var_type': 'int', 'is_last': False, 'original_var': 'thrust_level'}, {'name': 'level_TO2MAX', 'min_value': 23.0, 'max_value': 23.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_TO2MAX', 'constant_value': 23.0}]
处理的变量: ['thrust_level', 'level_TO2MAX']
Z3表达式: 23 == thrust_level
表达式类型: <class 'z3.z3.BoolRef'>
生成的MCDC条件数量: 1

生成的测试用例:
- 条件: thrust_level == level_TO2MAX
  测试用例: level_TO2MAX=23.0, thrust_level=23
  预期结果: True
- 条件: thrust_level == level_TO2MAX
  测试用例: level_TO2MAX=23.0, thrust_level=22
  预期结果: False

==================================================
处理模块: N1R指示量N1RDemInd计算（最大推力）
提取到的if条件: ['thrust_level == level_MAX']

处理条件 1: thrust_level == level_MAX
解析后的Python条件表达式: thrust_level == level_MAX
变量及其范围: [{'name': 'level_MAX', 'min_value': 22.0, 'max_value': 22.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_MAX', 'constant_value': 22.0}, {'name': 'thrust_level', 'min_value': 0.0, 'max_value': 23.0, 'var_type': 'int', 'is_last': False, 'original_var': 'thrust_level'}]
解析后的条件: thrust_level == level_MAX
识别到的变量: [{'name': 'level_MAX', 'min_value': 22.0, 'max_value': 22.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_MAX', 'constant_value': 22.0}, {'name': 'thrust_level', 'min_value': 0.0, 'max_value': 23.0, 'var_type': 'int', 'is_last': False, 'original_var': 'thrust_level'}]
处理的变量: ['level_MAX', 'thrust_level']
Z3表达式: 22 == thrust_level
表达式类型: <class 'z3.z3.BoolRef'>
生成的MCDC条件数量: 1

生成的测试用例:
- 条件: thrust_level == level_MAX
  测试用例: level_MAX=22.0, thrust_level=22
  预期结果: True
- 条件: thrust_level == level_MAX
  测试用例: level_MAX=22.0, thrust_level=21
  预期结果: False

==================================================
处理模块: N1R指示量N1RDemInd计算（无指定推力等级补充1）
提取到的if条件: ['thrust_level == level_default && (engine_state == ES_ground_start || engine_state == ES_windmill_start || engine_state == ES_Qwindmill_start || engine_state == ES_assist_start)']

处理条件 1: thrust_level == level_default && (engine_state == ES_ground_start || engine_state == ES_windmill_start || engine_state == ES_Qwindmill_start || engine_state == ES_assist_start)
解析后的Python条件表达式: thrust_level == level_default and (engine_state == ES_ground_start or engine_state == ES_windmill_start or engine_state == ES_Qwindmill_start or engine_state == ES_assist_start)
变量及其范围: [{'name': 'thrust_level', 'min_value': 0.0, 'max_value': 23.0, 'var_type': 'int', 'is_last': False, 'original_var': 'thrust_level'}, {'name': 'ES_assist_start', 'min_value': 10.0, 'max_value': 10.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'ES_assist_start', 'constant_value': 10.0}, {'name': 'level_default', 'min_value': 0.0, 'max_value': 0.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_default', 'constant_value': 0.0}, {'name': 'ES_Qwindmill_start', 'min_value': 13.0, 'max_value': 13.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'ES_Qwindmill_start', 'constant_value': 13.0}, {'name': 'engine_state', 'min_value': 0.0, 'max_value': 16.0, 'var_type': 'int', 'is_last': False, 'original_var': 'engine_state'}, {'name': 'ES_ground_start', 'min_value': 9.0, 'max_value': 9.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'ES_ground_start', 'constant_value': 9.0}, {'name': 'ES_windmill_start', 'min_value': 11.0, 'max_value': 11.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'ES_windmill_start', 'constant_value': 11.0}]
解析后的条件: thrust_level == level_default and (engine_state == ES_ground_start or engine_state == ES_windmill_start or engine_state == ES_Qwindmill_start or engine_state == ES_assist_start)
识别到的变量: [{'name': 'thrust_level', 'min_value': 0.0, 'max_value': 23.0, 'var_type': 'int', 'is_last': False, 'original_var': 'thrust_level'}, {'name': 'ES_assist_start', 'min_value': 10.0, 'max_value': 10.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'ES_assist_start', 'constant_value': 10.0}, {'name': 'level_default', 'min_value': 0.0, 'max_value': 0.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_default', 'constant_value': 0.0}, {'name': 'ES_Qwindmill_start', 'min_value': 13.0, 'max_value': 13.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'ES_Qwindmill_start', 'constant_value': 13.0}, {'name': 'engine_state', 'min_value': 0.0, 'max_value': 16.0, 'var_type': 'int', 'is_last': False, 'original_var': 'engine_state'}, {'name': 'ES_ground_start', 'min_value': 9.0, 'max_value': 9.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'ES_ground_start', 'constant_value': 9.0}, {'name': 'ES_windmill_start', 'min_value': 11.0, 'max_value': 11.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'ES_windmill_start', 'constant_value': 11.0}]
处理的变量: ['thrust_level', 'ES_assist_start', 'level_default', 'ES_Qwindmill_start', 'engine_state', 'ES_ground_start', 'ES_windmill_start']
Z3表达式: 0 == thrust_level
表达式类型: <class 'z3.z3.BoolRef'>
生成的MCDC条件数量: 0

==================================================
处理模块: N1R指示量N1RDemInd计算（无指定推力等级补充2）
提取到的if条件: ['thrust_level == level_default && (engine_state == ES_origin || engine_state == ES_ground_standby || engine_state == ES_flight_standby || engine_state == ES_cold_operation || engine_state == ES_DR_OS_Us || engine_state == ES_normal_stop || engine_state == ES_emergency_stop || engine_state == ES_ground_start_termination || engine_state == ES_flight_start_terminnation)']

处理条件 1: thrust_level == level_default && (engine_state == ES_origin || engine_state == ES_ground_standby || engine_state == ES_flight_standby || engine_state == ES_cold_operation || engine_state == ES_DR_OS_Us || engine_state == ES_normal_stop || engine_state == ES_emergency_stop || engine_state == ES_ground_start_termination || engine_state == ES_flight_start_terminnation)
解析后的Python条件表达式: thrust_level == level_default and (engine_state == ES_origin or engine_state == ES_ground_standby or engine_state == ES_flight_standby or engine_state == ES_cold_operation or engine_state == ES_DR_OS_Us or engine_state == ES_normal_stop or engine_state == ES_emergency_stop or engine_state == ES_ground_start_termination or engine_state == ES_flight_start_terminnation)
变量及其范围: [{'name': 'thrust_level', 'min_value': 0.0, 'max_value': 23.0, 'var_type': 'int', 'is_last': False, 'original_var': 'thrust_level'}, {'name': 'ES_normal_stop', 'min_value': 5.0, 'max_value': 5.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'ES_normal_stop', 'constant_value': 5.0}, {'name': 'level_default', 'min_value': 0.0, 'max_value': 0.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_default', 'constant_value': 0.0}, {'name': 'ES_cold_operation', 'min_value': 3.0, 'max_value': 3.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'ES_cold_operation', 'constant_value': 3.0}, {'name': 'engine_state', 'min_value': 0.0, 'max_value': 16.0, 'var_type': 'int', 'is_last': False, 'original_var': 'engine_state'}, {'name': 'ES_DR_OS_Us', 'min_value': 4.0, 'max_value': 4.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'ES_DR_OS_Us', 'constant_value': 4.0}, {'name': 'ES_ground_standby', 'min_value': 1.0, 'max_value': 1.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'ES_ground_standby', 'constant_value': 1.0}, {'name': 'ES_emergency_stop', 'min_value': 6.0, 'max_value': 6.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'ES_emergency_stop', 'constant_value': 6.0}, {'name': 'ES_ground_start_termination', 'min_value': 7.0, 'max_value': 7.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'ES_ground_start_termination', 'constant_value': 7.0}, {'name': 'ES_flight_start_terminnation', 'min_value': 8.0, 'max_value': 8.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'ES_flight_start_terminnation', 'constant_value': 8.0}, {'name': 'ES_flight_standby', 'min_value': 2.0, 'max_value': 2.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'ES_flight_standby', 'constant_value': 2.0}, {'name': 'ES_origin', 'min_value': 0.0, 'max_value': 0.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'ES_origin', 'constant_value': 0.0}]
解析后的条件: thrust_level == level_default and (engine_state == ES_origin or engine_state == ES_ground_standby or engine_state == ES_flight_standby or engine_state == ES_cold_operation or engine_state == ES_DR_OS_Us or engine_state == ES_normal_stop or engine_state == ES_emergency_stop or engine_state == ES_ground_start_termination or engine_state == ES_flight_start_terminnation)
识别到的变量: [{'name': 'thrust_level', 'min_value': 0.0, 'max_value': 23.0, 'var_type': 'int', 'is_last': False, 'original_var': 'thrust_level'}, {'name': 'ES_normal_stop', 'min_value': 5.0, 'max_value': 5.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'ES_normal_stop', 'constant_value': 5.0}, {'name': 'level_default', 'min_value': 0.0, 'max_value': 0.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_default', 'constant_value': 0.0}, {'name': 'ES_cold_operation', 'min_value': 3.0, 'max_value': 3.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'ES_cold_operation', 'constant_value': 3.0}, {'name': 'engine_state', 'min_value': 0.0, 'max_value': 16.0, 'var_type': 'int', 'is_last': False, 'original_var': 'engine_state'}, {'name': 'ES_DR_OS_Us', 'min_value': 4.0, 'max_value': 4.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'ES_DR_OS_Us', 'constant_value': 4.0}, {'name': 'ES_ground_standby', 'min_value': 1.0, 'max_value': 1.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'ES_ground_standby', 'constant_value': 1.0}, {'name': 'ES_emergency_stop', 'min_value': 6.0, 'max_value': 6.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'ES_emergency_stop', 'constant_value': 6.0}, {'name': 'ES_ground_start_termination', 'min_value': 7.0, 'max_value': 7.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'ES_ground_start_termination', 'constant_value': 7.0}, {'name': 'ES_flight_start_terminnation', 'min_value': 8.0, 'max_value': 8.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'ES_flight_start_terminnation', 'constant_value': 8.0}, {'name': 'ES_flight_standby', 'min_value': 2.0, 'max_value': 2.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'ES_flight_standby', 'constant_value': 2.0}, {'name': 'ES_origin', 'min_value': 0.0, 'max_value': 0.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'ES_origin', 'constant_value': 0.0}]
处理的变量: ['thrust_level', 'ES_normal_stop', 'level_default', 'ES_cold_operation', 'engine_state', 'ES_DR_OS_Us', 'ES_ground_standby', 'ES_emergency_stop', 'ES_ground_start_termination', 'ES_flight_start_terminnation', 'ES_flight_standby', 'ES_origin']
Z3表达式: 0 == thrust_level
表达式类型: <class 'z3.z3.BoolRef'>
生成的MCDC条件数量: 1

生成的测试用例:
- 条件: thrust_level == level_default && (engine_state == ES_origin || engine_state == ES_ground_standby || engine_state == ES_flight_standby || engine_state == ES_cold_operation || engine_state == ES_DR_OS_Us || engine_state == ES_normal_stop || engine_state == ES_emergency_stop || engine_state == ES_ground_start_termination || engine_state == ES_flight_start_terminnation)
  测试用例: ES_DR_OS_Us=4.0, ES_cold_operation=3.0, ES_emergency_stop=6.0, ES_flight_standby=2.0, ES_flight_start_terminnation=8.0, ES_ground_standby=1.0, ES_ground_start_termination=7.0, ES_normal_stop=5.0, ES_origin=0.0, engine_state=0, level_default=0.0, thrust_level=0
  预期结果: True
- 条件: thrust_level == level_default && (engine_state == ES_origin || engine_state == ES_ground_standby || engine_state == ES_flight_standby || engine_state == ES_cold_operation || engine_state == ES_DR_OS_Us || engine_state == ES_normal_stop || engine_state == ES_emergency_stop || engine_state == ES_ground_start_termination || engine_state == ES_flight_start_terminnation)
  测试用例: ES_DR_OS_Us=4.0, ES_cold_operation=3.0, ES_emergency_stop=6.0, ES_flight_standby=2.0, ES_flight_start_terminnation=8.0, ES_ground_standby=1.0, ES_ground_start_termination=7.0, ES_normal_stop=5.0, ES_origin=0.0, engine_state=0, level_default=0.0, thrust_level=1
  预期结果: False

==================================================
处理模块: N1公差修正量计算
模块中没有if语句，跳过

==================================================
处理模块: N1R控制量N1RDem计算（推力等级为无指定推力等级、最大反推、反推、反推慢车、地面慢车、空中慢车、进近慢车、巡航、最大巡航、最大推力）
提取到的if条件: ['thrust_level == level_default || thrust_level == level_MREV || thrust_level == level_REV || thrust_level == level_RI || thrust_level == level_GI || thrust_level == level_FI || thrust_level == level_AI || thrust_level == level_CR || thrust_level == level_MCR || thrust_level == level_MAX']

处理条件 1: thrust_level == level_default || thrust_level == level_MREV || thrust_level == level_REV || thrust_level == level_RI || thrust_level == level_GI || thrust_level == level_FI || thrust_level == level_AI || thrust_level == level_CR || thrust_level == level_MCR || thrust_level == level_MAX
解析后的Python条件表达式: thrust_level == level_default or thrust_level == level_MREV or thrust_level == level_REV or thrust_level == level_RI or thrust_level == level_GI or thrust_level == level_FI or thrust_level == level_AI or thrust_level == level_CR or thrust_level == level_MCR or thrust_level == level_MAX
变量及其范围: [{'name': 'level_REV', 'min_value': 2.0, 'max_value': 2.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_REV', 'constant_value': 2.0}, {'name': 'thrust_level', 'min_value': 0.0, 'max_value': 23.0, 'var_type': 'int', 'is_last': False, 'original_var': 'thrust_level'}, {'name': 'level_AI', 'min_value': 6.0, 'max_value': 6.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_AI', 'constant_value': 6.0}, {'name': 'level_default', 'min_value': 0.0, 'max_value': 0.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_default', 'constant_value': 0.0}, {'name': 'level_RI', 'min_value': 3.0, 'max_value': 3.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_RI', 'constant_value': 3.0}, {'name': 'level_MAX', 'min_value': 22.0, 'max_value': 22.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_MAX', 'constant_value': 22.0}, {'name': 'level_CR', 'min_value': 7.0, 'max_value': 7.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_CR', 'constant_value': 7.0}, {'name': 'level_GI', 'min_value': 4.0, 'max_value': 4.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_GI', 'constant_value': 4.0}, {'name': 'level_FI', 'min_value': 5.0, 'max_value': 5.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_FI', 'constant_value': 5.0}, {'name': 'level_MCR', 'min_value': 8.0, 'max_value': 8.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_MCR', 'constant_value': 8.0}, {'name': 'level_MREV', 'min_value': 1.0, 'max_value': 1.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_MREV', 'constant_value': 1.0}]
解析后的条件: thrust_level == level_default or thrust_level == level_MREV or thrust_level == level_REV or thrust_level == level_RI or thrust_level == level_GI or thrust_level == level_FI or thrust_level == level_AI or thrust_level == level_CR or thrust_level == level_MCR or thrust_level == level_MAX
识别到的变量: [{'name': 'level_REV', 'min_value': 2.0, 'max_value': 2.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_REV', 'constant_value': 2.0}, {'name': 'thrust_level', 'min_value': 0.0, 'max_value': 23.0, 'var_type': 'int', 'is_last': False, 'original_var': 'thrust_level'}, {'name': 'level_AI', 'min_value': 6.0, 'max_value': 6.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_AI', 'constant_value': 6.0}, {'name': 'level_default', 'min_value': 0.0, 'max_value': 0.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_default', 'constant_value': 0.0}, {'name': 'level_RI', 'min_value': 3.0, 'max_value': 3.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_RI', 'constant_value': 3.0}, {'name': 'level_MAX', 'min_value': 22.0, 'max_value': 22.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_MAX', 'constant_value': 22.0}, {'name': 'level_CR', 'min_value': 7.0, 'max_value': 7.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_CR', 'constant_value': 7.0}, {'name': 'level_GI', 'min_value': 4.0, 'max_value': 4.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_GI', 'constant_value': 4.0}, {'name': 'level_FI', 'min_value': 5.0, 'max_value': 5.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_FI', 'constant_value': 5.0}, {'name': 'level_MCR', 'min_value': 8.0, 'max_value': 8.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_MCR', 'constant_value': 8.0}, {'name': 'level_MREV', 'min_value': 1.0, 'max_value': 1.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_MREV', 'constant_value': 1.0}]
处理的变量: ['level_REV', 'thrust_level', 'level_AI', 'level_default', 'level_RI', 'level_MAX', 'level_CR', 'level_GI', 'level_FI', 'level_MCR', 'level_MREV']
Z3表达式: 22 == thrust_level
表达式类型: <class 'z3.z3.BoolRef'>
生成的MCDC条件数量: 1

生成的测试用例:
- 条件: thrust_level == level_default || thrust_level == level_MREV || thrust_level == level_REV || thrust_level == level_RI || thrust_level == level_GI || thrust_level == level_FI || thrust_level == level_AI || thrust_level == level_CR || thrust_level == level_MCR || thrust_level == level_MAX
  测试用例: level_AI=6.0, level_CR=7.0, level_FI=5.0, level_GI=4.0, level_MAX=22.0, level_MCR=8.0, level_MREV=1.0, level_REV=2.0, level_RI=3.0, level_default=0.0, thrust_level=22
  预期结果: True
- 条件: thrust_level == level_default || thrust_level == level_MREV || thrust_level == level_REV || thrust_level == level_RI || thrust_level == level_GI || thrust_level == level_FI || thrust_level == level_AI || thrust_level == level_CR || thrust_level == level_MCR || thrust_level == level_MAX
  测试用例: level_AI=6.0, level_CR=7.0, level_FI=5.0, level_GI=4.0, level_MAX=22.0, level_MCR=8.0, level_MREV=1.0, level_REV=2.0, level_RI=3.0, level_default=0.0, thrust_level=21
  预期结果: False

==================================================
处理模块: N1R控制量N1RDem计算（推力等级为最大爬升、减推力爬升1、减推力爬升2、连续、最大连续、起飞、最大起飞、减推力起飞1、减推力起飞2、复飞、增推力起飞、灵活起飞）
提取到的if条件: ['thrust_level == level_MCL || thrust_level == level_DCL1 || thrust_level == level_DCL2 || thrust_level == level_CT || thrust_level == level_MCT || thrust_level == level_TO || thrust_level == level_MTO || thrust_level == level_DTO1 || thrust_level == level_DTO2 || thrust_level == level_GA || thrust_level == level_Bump || thrust_level == level_FLEXTO']

处理条件 1: thrust_level == level_MCL || thrust_level == level_DCL1 || thrust_level == level_DCL2 || thrust_level == level_CT || thrust_level == level_MCT || thrust_level == level_TO || thrust_level == level_MTO || thrust_level == level_DTO1 || thrust_level == level_DTO2 || thrust_level == level_GA || thrust_level == level_Bump || thrust_level == level_FLEXTO
解析后的Python条件表达式: thrust_level == level_MCL or thrust_level == level_DCL1 or thrust_level == level_DCL2 or thrust_level == level_CT or thrust_level == level_MCT or thrust_level == level_TO or thrust_level == level_MTO or thrust_level == level_DTO1 or thrust_level == level_DTO2 or thrust_level == level_GA or thrust_level == level_Bump or thrust_level == level_FLEXTO
变量及其范围: [{'name': 'level_FLEXTO', 'min_value': 20.0, 'max_value': 20.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_FLEXTO', 'constant_value': 20.0}, {'name': 'level_TO', 'min_value': 15.0, 'max_value': 15.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_TO', 'constant_value': 15.0}, {'name': 'thrust_level', 'min_value': 0.0, 'max_value': 23.0, 'var_type': 'int', 'is_last': False, 'original_var': 'thrust_level'}, {'name': 'level_MTO', 'min_value': 16.0, 'max_value': 16.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_MTO', 'constant_value': 16.0}, {'name': 'level_MCT', 'min_value': 14.0, 'max_value': 14.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_MCT', 'constant_value': 14.0}, {'name': 'level_DCL2', 'min_value': 12.0, 'max_value': 12.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_DCL2', 'constant_value': 12.0}, {'name': 'level_DTO2', 'min_value': 18.0, 'max_value': 18.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_DTO2', 'constant_value': 18.0}, {'name': 'level_Bump', 'min_value': 19.0, 'max_value': 19.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_Bump', 'constant_value': 19.0}, {'name': 'level_DTO1', 'min_value': 17.0, 'max_value': 17.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_DTO1', 'constant_value': 17.0}, {'name': 'level_MCL', 'min_value': 10.0, 'max_value': 10.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_MCL', 'constant_value': 10.0}, {'name': 'level_CT', 'min_value': 13.0, 'max_value': 13.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_CT', 'constant_value': 13.0}, {'name': 'level_GA', 'min_value': 21.0, 'max_value': 21.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_GA', 'constant_value': 21.0}, {'name': 'level_DCL1', 'min_value': 11.0, 'max_value': 11.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_DCL1', 'constant_value': 11.0}]
解析后的条件: thrust_level == level_MCL or thrust_level == level_DCL1 or thrust_level == level_DCL2 or thrust_level == level_CT or thrust_level == level_MCT or thrust_level == level_TO or thrust_level == level_MTO or thrust_level == level_DTO1 or thrust_level == level_DTO2 or thrust_level == level_GA or thrust_level == level_Bump or thrust_level == level_FLEXTO
识别到的变量: [{'name': 'level_FLEXTO', 'min_value': 20.0, 'max_value': 20.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_FLEXTO', 'constant_value': 20.0}, {'name': 'level_TO', 'min_value': 15.0, 'max_value': 15.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_TO', 'constant_value': 15.0}, {'name': 'thrust_level', 'min_value': 0.0, 'max_value': 23.0, 'var_type': 'int', 'is_last': False, 'original_var': 'thrust_level'}, {'name': 'level_MTO', 'min_value': 16.0, 'max_value': 16.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_MTO', 'constant_value': 16.0}, {'name': 'level_MCT', 'min_value': 14.0, 'max_value': 14.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_MCT', 'constant_value': 14.0}, {'name': 'level_DCL2', 'min_value': 12.0, 'max_value': 12.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_DCL2', 'constant_value': 12.0}, {'name': 'level_DTO2', 'min_value': 18.0, 'max_value': 18.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_DTO2', 'constant_value': 18.0}, {'name': 'level_Bump', 'min_value': 19.0, 'max_value': 19.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_Bump', 'constant_value': 19.0}, {'name': 'level_DTO1', 'min_value': 17.0, 'max_value': 17.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_DTO1', 'constant_value': 17.0}, {'name': 'level_MCL', 'min_value': 10.0, 'max_value': 10.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_MCL', 'constant_value': 10.0}, {'name': 'level_CT', 'min_value': 13.0, 'max_value': 13.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_CT', 'constant_value': 13.0}, {'name': 'level_GA', 'min_value': 21.0, 'max_value': 21.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_GA', 'constant_value': 21.0}, {'name': 'level_DCL1', 'min_value': 11.0, 'max_value': 11.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_DCL1', 'constant_value': 11.0}]
处理的变量: ['level_FLEXTO', 'level_TO', 'thrust_level', 'level_MTO', 'level_MCT', 'level_DCL2', 'level_DTO2', 'level_Bump', 'level_DTO1', 'level_MCL', 'level_CT', 'level_GA', 'level_DCL1']
Z3表达式: 20 == thrust_level
表达式类型: <class 'z3.z3.BoolRef'>
生成的MCDC条件数量: 0

==================================================
处理模块: N1R控制量N1RDem计算（推力等级为爬升）
提取到的if条件: ['thrust_level == level_CL']

处理条件 1: thrust_level == level_CL
解析后的Python条件表达式: thrust_level == level_CL
变量及其范围: [{'name': 'level_CL', 'min_value': 9.0, 'max_value': 9.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_CL', 'constant_value': 9.0}, {'name': 'thrust_level', 'min_value': 0.0, 'max_value': 23.0, 'var_type': 'int', 'is_last': False, 'original_var': 'thrust_level'}]
解析后的条件: thrust_level == level_CL
识别到的变量: [{'name': 'level_CL', 'min_value': 9.0, 'max_value': 9.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_CL', 'constant_value': 9.0}, {'name': 'thrust_level', 'min_value': 0.0, 'max_value': 23.0, 'var_type': 'int', 'is_last': False, 'original_var': 'thrust_level'}]
处理的变量: ['level_CL', 'thrust_level']
Z3表达式: 9 == thrust_level
表达式类型: <class 'z3.z3.BoolRef'>
生成的MCDC条件数量: 1

生成的测试用例:
- 条件: thrust_level == level_CL
  测试用例: level_CL=9.0, thrust_level=9
  预期结果: True
- 条件: thrust_level == level_CL
  测试用例: level_CL=9.0, thrust_level=8
  预期结果: False

==================================================
处理模块: N1R控制量N1RDem计算（推力等级为准最大推力）
提取到的if条件: ['thrust_level == level_TO2MAX']

处理条件 1: thrust_level == level_TO2MAX
解析后的Python条件表达式: thrust_level == level_TO2MAX
变量及其范围: [{'name': 'thrust_level', 'min_value': 0.0, 'max_value': 23.0, 'var_type': 'int', 'is_last': False, 'original_var': 'thrust_level'}, {'name': 'level_TO2MAX', 'min_value': 23.0, 'max_value': 23.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_TO2MAX', 'constant_value': 23.0}]
解析后的条件: thrust_level == level_TO2MAX
识别到的变量: [{'name': 'thrust_level', 'min_value': 0.0, 'max_value': 23.0, 'var_type': 'int', 'is_last': False, 'original_var': 'thrust_level'}, {'name': 'level_TO2MAX', 'min_value': 23.0, 'max_value': 23.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_TO2MAX', 'constant_value': 23.0}]
处理的变量: ['thrust_level', 'level_TO2MAX']
Z3表达式: 23 == thrust_level
表达式类型: <class 'z3.z3.BoolRef'>
生成的MCDC条件数量: 1

生成的测试用例:
- 条件: thrust_level == level_TO2MAX
  测试用例: level_TO2MAX=23.0, thrust_level=23
  预期结果: True
- 条件: thrust_level == level_TO2MAX
  测试用例: level_TO2MAX=23.0, thrust_level=22
  预期结果: False

==================================================
处理模块: 高低压切换控制（无N2双通道传感器故障）
提取到的if条件: ['engine_state == ES_idle', 'engine_state == ES_above_idle && ((PLA<2 + PD_IdleSwitchPlaThsld && PLA>2) && (last(PLA)<=2 && last(PLA)>=0)) || ((PLA>-6-PD_IdleSwitchPlaThsld && PLA<-6) && (last(PLA)<0 && last(PLA)>-6))', 'engine_state == ES_above_idle && (PLA<0 && PLA >=-6 && last(PLA)>=-33 && last(PLA)<-6 || PLA<=2 && PLA >=0 && last(PLA)>2 && last(PLA)<=85)', 'engine_state == ES_above_idle && (PLA >= 2 + PD_IdleSwitchPlaThsld || PLA <= 2 || last(PLA) > 2 || last(PLA) < 0) && (PLA <= -6 - PD_IdleSwitchPlaThsld || PLA >= -6 || last(PLA) >= 0 || last(PLA) <= -6) && (PLA < -6 || PLA > 2)', 'engine_state == ES_above_idle && ((PLA >= 2 + PD_IdleSwitchPlaThsld || PLA <= 2 || last(PLA) > 2 || last(PLA) < 0) && (PLA <= -6 - PD_IdleSwitchPlaThsld || PLA >= -6 || last(PLA) >= 0 || last(PLA) <= -6) && (PLA >= 0 || PLA < -6 || last(PLA) < -33 || last(PLA) >= -6) && (PLA > 2 || PLA < 0 || last(PLA) <= 2 || last(PLA) > 85) && PLA <= 2 && PLA >= -6)', 'engine_state == ES_Hwindmill_start && thrust_level != level_RI && thrust_level != level_GI && thrust_level != level_FI && thrust_level != level_AI', 'engine_state == ES_Hwindmill_start && thrust_level == level_RI && thrust_level == level_GI && thrust_level == level_FI && thrust_level == level_AI', 'engine_state != ES_Hwindmill_start && engine_state != ES_above_idle && engine_state != ES_idle']

处理条件 1: engine_state == ES_idle
解析后的Python条件表达式: engine_state == ES_idle
变量及其范围: [{'name': 'ES_idle', 'min_value': 14.0, 'max_value': 14.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'ES_idle', 'constant_value': 14.0}, {'name': 'engine_state', 'min_value': 0.0, 'max_value': 16.0, 'var_type': 'int', 'is_last': False, 'original_var': 'engine_state'}]
解析后的条件: engine_state == ES_idle
识别到的变量: [{'name': 'ES_idle', 'min_value': 14.0, 'max_value': 14.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'ES_idle', 'constant_value': 14.0}, {'name': 'engine_state', 'min_value': 0.0, 'max_value': 16.0, 'var_type': 'int', 'is_last': False, 'original_var': 'engine_state'}]
处理的变量: ['ES_idle', 'engine_state']
Z3表达式: 14 == engine_state
表达式类型: <class 'z3.z3.BoolRef'>
生成的MCDC条件数量: 1

处理条件 2: engine_state == ES_above_idle && ((PLA<2 + PD_IdleSwitchPlaThsld && PLA>2) && (last(PLA)<=2 && last(PLA)>=0)) || ((PLA>-6-PD_IdleSwitchPlaThsld && PLA<-6) && (last(PLA)<0 && last(PLA)>-6))
解析后的Python条件表达式: engine_state == ES_above_idle and ((PLA < 2+PD_IdleSwitchPlaThsld and PLA > 2) and (_PLA_ <= 2 and _PLA_ >= 0)) or ((PLA > -6-PD_IdleSwitchPlaThsld and PLA < -6) and (_PLA_ < 0 and _PLA_ > -6))
变量及其范围: [{'name': 'engine_state', 'min_value': 0.0, 'max_value': 16.0, 'var_type': 'int', 'is_last': False, 'original_var': 'engine_state'}, {'name': 'PLA', 'min_value': -33.0, 'max_value': 85.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PLA'}, {'name': 'PD_IdleSwitchPlaThsld', 'min_value': 0.0, 'max_value': 50.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PD_IdleSwitchPlaThsld'}, {'name': 'ES_above_idle', 'min_value': 15.0, 'max_value': 15.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'ES_above_idle', 'constant_value': 15.0}, {'name': '_PLA_', 'min_value': -33.0, 'max_value': 85.0, 'var_type': 'float', 'is_last': True, 'original_var': 'PLA'}]
解析后的条件: engine_state == ES_above_idle and ((PLA < 2+PD_IdleSwitchPlaThsld and PLA > 2) and (_PLA_ <= 2 and _PLA_ >= 0)) or ((PLA > -6-PD_IdleSwitchPlaThsld and PLA < -6) and (_PLA_ < 0 and _PLA_ > -6))
识别到的变量: [{'name': 'engine_state', 'min_value': 0.0, 'max_value': 16.0, 'var_type': 'int', 'is_last': False, 'original_var': 'engine_state'}, {'name': 'PLA', 'min_value': -33.0, 'max_value': 85.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PLA'}, {'name': 'PD_IdleSwitchPlaThsld', 'min_value': 0.0, 'max_value': 50.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PD_IdleSwitchPlaThsld'}, {'name': 'ES_above_idle', 'min_value': 15.0, 'max_value': 15.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'ES_above_idle', 'constant_value': 15.0}, {'name': '_PLA_', 'min_value': -33.0, 'max_value': 85.0, 'var_type': 'float', 'is_last': True, 'original_var': 'PLA'}]
处理的变量: ['engine_state', 'PLA', 'PD_IdleSwitchPlaThsld', 'ES_above_idle', '_PLA_']
条件解析错误: engine_state == ES_above_idle and ((PLA < 2+PD_IdleSwitchPlaThsld and PLA > 2) and (_PLA_ <= 2 and _PLA_ >= 0)) or ((PLA > -6-PD_IdleSwitchPlaThsld and PLA < -6) and (_PLA_ < 0 and _PLA_ > -6))
错误信息: Symbolic expressions cannot be cast to concrete Boolean values.
变量类型:
  engine_state: <class 'z3.z3.ArithRef'>
    - 是算术表达式
  PLA: <class 'z3.z3.ArithRef'>
    - 是算术表达式
  PD_IdleSwitchPlaThsld: <class 'z3.z3.ArithRef'>
    - 是算术表达式
  ES_above_idle: <class 'z3.z3.IntNumRef'>
    - 是算术表达式
  _PLA_: <class 'z3.z3.ArithRef'>
    - 是算术表达式
生成的MCDC条件数量: 0

处理条件 3: engine_state == ES_above_idle && (PLA<0 && PLA >=-6 && last(PLA)>=-33 && last(PLA)<-6 || PLA<=2 && PLA >=0 && last(PLA)>2 && last(PLA)<=85)
解析后的Python条件表达式: engine_state == ES_above_idle and (PLA < 0 and PLA >= -6 and _PLA_ >= -33 and _PLA_ < -6 or PLA <= 2 and PLA >= 0 and _PLA_ > 2 and _PLA_ <= 85)
变量及其范围: [{'name': '_PLA_', 'min_value': -33.0, 'max_value': 85.0, 'var_type': 'float', 'is_last': True, 'original_var': 'PLA'}, {'name': 'PLA', 'min_value': -33.0, 'max_value': 85.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PLA'}, {'name': 'engine_state', 'min_value': 0.0, 'max_value': 16.0, 'var_type': 'int', 'is_last': False, 'original_var': 'engine_state'}, {'name': 'ES_above_idle', 'min_value': 15.0, 'max_value': 15.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'ES_above_idle', 'constant_value': 15.0}]
解析后的条件: engine_state == ES_above_idle and (PLA < 0 and PLA >= -6 and _PLA_ >= -33 and _PLA_ < -6 or PLA <= 2 and PLA >= 0 and _PLA_ > 2 and _PLA_ <= 85)
识别到的变量: [{'name': '_PLA_', 'min_value': -33.0, 'max_value': 85.0, 'var_type': 'float', 'is_last': True, 'original_var': 'PLA'}, {'name': 'PLA', 'min_value': -33.0, 'max_value': 85.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PLA'}, {'name': 'engine_state', 'min_value': 0.0, 'max_value': 16.0, 'var_type': 'int', 'is_last': False, 'original_var': 'engine_state'}, {'name': 'ES_above_idle', 'min_value': 15.0, 'max_value': 15.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'ES_above_idle', 'constant_value': 15.0}]
处理的变量: ['_PLA_', 'PLA', 'engine_state', 'ES_above_idle']
Z3表达式: 15 == engine_state
表达式类型: <class 'z3.z3.BoolRef'>
生成的MCDC条件数量: 0

处理条件 4: engine_state == ES_above_idle && (PLA >= 2 + PD_IdleSwitchPlaThsld || PLA <= 2 || last(PLA) > 2 || last(PLA) < 0) && (PLA <= -6 - PD_IdleSwitchPlaThsld || PLA >= -6 || last(PLA) >= 0 || last(PLA) <= -6) && (PLA < -6 || PLA > 2)
解析后的Python条件表达式: engine_state == ES_above_idle and (PLA >= 2+PD_IdleSwitchPlaThsld or PLA <= 2 or _PLA_ > 2 or _PLA_ < 0) and (PLA <= -6-PD_IdleSwitchPlaThsld or PLA >= -6 or _PLA_ >= 0 or _PLA_ <= -6) and (PLA < -6 or PLA > 2)
变量及其范围: [{'name': 'engine_state', 'min_value': 0.0, 'max_value': 16.0, 'var_type': 'int', 'is_last': False, 'original_var': 'engine_state'}, {'name': 'PLA', 'min_value': -33.0, 'max_value': 85.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PLA'}, {'name': 'PD_IdleSwitchPlaThsld', 'min_value': 0.0, 'max_value': 50.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PD_IdleSwitchPlaThsld'}, {'name': 'ES_above_idle', 'min_value': 15.0, 'max_value': 15.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'ES_above_idle', 'constant_value': 15.0}, {'name': '_PLA_', 'min_value': -33.0, 'max_value': 85.0, 'var_type': 'float', 'is_last': True, 'original_var': 'PLA'}]
解析后的条件: engine_state == ES_above_idle and (PLA >= 2+PD_IdleSwitchPlaThsld or PLA <= 2 or _PLA_ > 2 or _PLA_ < 0) and (PLA <= -6-PD_IdleSwitchPlaThsld or PLA >= -6 or _PLA_ >= 0 or _PLA_ <= -6) and (PLA < -6 or PLA > 2)
识别到的变量: [{'name': 'engine_state', 'min_value': 0.0, 'max_value': 16.0, 'var_type': 'int', 'is_last': False, 'original_var': 'engine_state'}, {'name': 'PLA', 'min_value': -33.0, 'max_value': 85.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PLA'}, {'name': 'PD_IdleSwitchPlaThsld', 'min_value': 0.0, 'max_value': 50.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PD_IdleSwitchPlaThsld'}, {'name': 'ES_above_idle', 'min_value': 15.0, 'max_value': 15.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'ES_above_idle', 'constant_value': 15.0}, {'name': '_PLA_', 'min_value': -33.0, 'max_value': 85.0, 'var_type': 'float', 'is_last': True, 'original_var': 'PLA'}]
处理的变量: ['engine_state', 'PLA', 'PD_IdleSwitchPlaThsld', 'ES_above_idle', '_PLA_']
Z3表达式: 15 == engine_state
表达式类型: <class 'z3.z3.BoolRef'>
生成的MCDC条件数量: 0

处理条件 5: engine_state == ES_above_idle && ((PLA >= 2 + PD_IdleSwitchPlaThsld || PLA <= 2 || last(PLA) > 2 || last(PLA) < 0) && (PLA <= -6 - PD_IdleSwitchPlaThsld || PLA >= -6 || last(PLA) >= 0 || last(PLA) <= -6) && (PLA >= 0 || PLA < -6 || last(PLA) < -33 || last(PLA) >= -6) && (PLA > 2 || PLA < 0 || last(PLA) <= 2 || last(PLA) > 85) && PLA <= 2 && PLA >= -6)
解析后的Python条件表达式: engine_state == ES_above_idle and ((PLA >= 2+PD_IdleSwitchPlaThsld or PLA <= 2 or _PLA_ > 2 or _PLA_ < 0) and (PLA <= -6-PD_IdleSwitchPlaThsld or PLA >= -6 or _PLA_ >= 0 or _PLA_ <= -6) and (PLA >= 0 or PLA < -6 or _PLA_ < -33 or _PLA_ >= -6) and (PLA > 2 or PLA < 0 or _PLA_ <= 2 or _PLA_ > 85) and PLA <= 2 and PLA >= -6)
变量及其范围: [{'name': 'engine_state', 'min_value': 0.0, 'max_value': 16.0, 'var_type': 'int', 'is_last': False, 'original_var': 'engine_state'}, {'name': 'PLA', 'min_value': -33.0, 'max_value': 85.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PLA'}, {'name': 'PD_IdleSwitchPlaThsld', 'min_value': 0.0, 'max_value': 50.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PD_IdleSwitchPlaThsld'}, {'name': 'ES_above_idle', 'min_value': 15.0, 'max_value': 15.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'ES_above_idle', 'constant_value': 15.0}, {'name': '_PLA_', 'min_value': -33.0, 'max_value': 85.0, 'var_type': 'float', 'is_last': True, 'original_var': 'PLA'}]
解析后的条件: engine_state == ES_above_idle and ((PLA >= 2+PD_IdleSwitchPlaThsld or PLA <= 2 or _PLA_ > 2 or _PLA_ < 0) and (PLA <= -6-PD_IdleSwitchPlaThsld or PLA >= -6 or _PLA_ >= 0 or _PLA_ <= -6) and (PLA >= 0 or PLA < -6 or _PLA_ < -33 or _PLA_ >= -6) and (PLA > 2 or PLA < 0 or _PLA_ <= 2 or _PLA_ > 85) and PLA <= 2 and PLA >= -6)
识别到的变量: [{'name': 'engine_state', 'min_value': 0.0, 'max_value': 16.0, 'var_type': 'int', 'is_last': False, 'original_var': 'engine_state'}, {'name': 'PLA', 'min_value': -33.0, 'max_value': 85.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PLA'}, {'name': 'PD_IdleSwitchPlaThsld', 'min_value': 0.0, 'max_value': 50.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PD_IdleSwitchPlaThsld'}, {'name': 'ES_above_idle', 'min_value': 15.0, 'max_value': 15.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'ES_above_idle', 'constant_value': 15.0}, {'name': '_PLA_', 'min_value': -33.0, 'max_value': 85.0, 'var_type': 'float', 'is_last': True, 'original_var': 'PLA'}]
处理的变量: ['engine_state', 'PLA', 'PD_IdleSwitchPlaThsld', 'ES_above_idle', '_PLA_']
Z3表达式: 15 == engine_state
表达式类型: <class 'z3.z3.BoolRef'>
生成的MCDC条件数量: 1

处理条件 6: engine_state == ES_Hwindmill_start && thrust_level != level_RI && thrust_level != level_GI && thrust_level != level_FI && thrust_level != level_AI
解析后的Python条件表达式: engine_state == ES_Hwindmill_start and thrust_level != level_RI and thrust_level != level_GI and thrust_level != level_FI and thrust_level != level_AI
变量及其范围: [{'name': 'thrust_level', 'min_value': 0.0, 'max_value': 23.0, 'var_type': 'int', 'is_last': False, 'original_var': 'thrust_level'}, {'name': 'level_AI', 'min_value': 6.0, 'max_value': 6.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_AI', 'constant_value': 6.0}, {'name': 'level_RI', 'min_value': 3.0, 'max_value': 3.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_RI', 'constant_value': 3.0}, {'name': 'engine_state', 'min_value': 0.0, 'max_value': 16.0, 'var_type': 'int', 'is_last': False, 'original_var': 'engine_state'}, {'name': 'level_GI', 'min_value': 4.0, 'max_value': 4.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_GI', 'constant_value': 4.0}, {'name': 'ES_Hwindmill_start', 'min_value': 12.0, 'max_value': 12.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'ES_Hwindmill_start', 'constant_value': 12.0}, {'name': 'level_FI', 'min_value': 5.0, 'max_value': 5.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_FI', 'constant_value': 5.0}]
解析后的条件: engine_state == ES_Hwindmill_start and thrust_level != level_RI and thrust_level != level_GI and thrust_level != level_FI and thrust_level != level_AI
识别到的变量: [{'name': 'thrust_level', 'min_value': 0.0, 'max_value': 23.0, 'var_type': 'int', 'is_last': False, 'original_var': 'thrust_level'}, {'name': 'level_AI', 'min_value': 6.0, 'max_value': 6.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_AI', 'constant_value': 6.0}, {'name': 'level_RI', 'min_value': 3.0, 'max_value': 3.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_RI', 'constant_value': 3.0}, {'name': 'engine_state', 'min_value': 0.0, 'max_value': 16.0, 'var_type': 'int', 'is_last': False, 'original_var': 'engine_state'}, {'name': 'level_GI', 'min_value': 4.0, 'max_value': 4.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_GI', 'constant_value': 4.0}, {'name': 'ES_Hwindmill_start', 'min_value': 12.0, 'max_value': 12.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'ES_Hwindmill_start', 'constant_value': 12.0}, {'name': 'level_FI', 'min_value': 5.0, 'max_value': 5.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_FI', 'constant_value': 5.0}]
处理的变量: ['thrust_level', 'level_AI', 'level_RI', 'engine_state', 'level_GI', 'ES_Hwindmill_start', 'level_FI']
Z3表达式: 12 == engine_state
表达式类型: <class 'z3.z3.BoolRef'>
生成的MCDC条件数量: 1

处理条件 7: engine_state == ES_Hwindmill_start && thrust_level == level_RI && thrust_level == level_GI && thrust_level == level_FI && thrust_level == level_AI
解析后的Python条件表达式: engine_state == ES_Hwindmill_start and thrust_level == level_RI and thrust_level == level_GI and thrust_level == level_FI and thrust_level == level_AI
变量及其范围: [{'name': 'thrust_level', 'min_value': 0.0, 'max_value': 23.0, 'var_type': 'int', 'is_last': False, 'original_var': 'thrust_level'}, {'name': 'level_AI', 'min_value': 6.0, 'max_value': 6.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_AI', 'constant_value': 6.0}, {'name': 'level_RI', 'min_value': 3.0, 'max_value': 3.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_RI', 'constant_value': 3.0}, {'name': 'engine_state', 'min_value': 0.0, 'max_value': 16.0, 'var_type': 'int', 'is_last': False, 'original_var': 'engine_state'}, {'name': 'level_GI', 'min_value': 4.0, 'max_value': 4.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_GI', 'constant_value': 4.0}, {'name': 'ES_Hwindmill_start', 'min_value': 12.0, 'max_value': 12.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'ES_Hwindmill_start', 'constant_value': 12.0}, {'name': 'level_FI', 'min_value': 5.0, 'max_value': 5.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_FI', 'constant_value': 5.0}]
解析后的条件: engine_state == ES_Hwindmill_start and thrust_level == level_RI and thrust_level == level_GI and thrust_level == level_FI and thrust_level == level_AI
识别到的变量: [{'name': 'thrust_level', 'min_value': 0.0, 'max_value': 23.0, 'var_type': 'int', 'is_last': False, 'original_var': 'thrust_level'}, {'name': 'level_AI', 'min_value': 6.0, 'max_value': 6.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_AI', 'constant_value': 6.0}, {'name': 'level_RI', 'min_value': 3.0, 'max_value': 3.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_RI', 'constant_value': 3.0}, {'name': 'engine_state', 'min_value': 0.0, 'max_value': 16.0, 'var_type': 'int', 'is_last': False, 'original_var': 'engine_state'}, {'name': 'level_GI', 'min_value': 4.0, 'max_value': 4.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_GI', 'constant_value': 4.0}, {'name': 'ES_Hwindmill_start', 'min_value': 12.0, 'max_value': 12.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'ES_Hwindmill_start', 'constant_value': 12.0}, {'name': 'level_FI', 'min_value': 5.0, 'max_value': 5.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'level_FI', 'constant_value': 5.0}]
处理的变量: ['thrust_level', 'level_AI', 'level_RI', 'engine_state', 'level_GI', 'ES_Hwindmill_start', 'level_FI']
Z3表达式: 12 == engine_state
表达式类型: <class 'z3.z3.BoolRef'>
生成的MCDC条件数量: 0

处理条件 8: engine_state != ES_Hwindmill_start && engine_state != ES_above_idle && engine_state != ES_idle
解析后的Python条件表达式: engine_state != ES_Hwindmill_start and engine_state != ES_above_idle and engine_state != ES_idle
变量及其范围: [{'name': 'ES_idle', 'min_value': 14.0, 'max_value': 14.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'ES_idle', 'constant_value': 14.0}, {'name': 'ES_above_idle', 'min_value': 15.0, 'max_value': 15.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'ES_above_idle', 'constant_value': 15.0}, {'name': 'engine_state', 'min_value': 0.0, 'max_value': 16.0, 'var_type': 'int', 'is_last': False, 'original_var': 'engine_state'}, {'name': 'ES_Hwindmill_start', 'min_value': 12.0, 'max_value': 12.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'ES_Hwindmill_start', 'constant_value': 12.0}]
解析后的条件: engine_state != ES_Hwindmill_start and engine_state != ES_above_idle and engine_state != ES_idle
识别到的变量: [{'name': 'ES_idle', 'min_value': 14.0, 'max_value': 14.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'ES_idle', 'constant_value': 14.0}, {'name': 'ES_above_idle', 'min_value': 15.0, 'max_value': 15.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'ES_above_idle', 'constant_value': 15.0}, {'name': 'engine_state', 'min_value': 0.0, 'max_value': 16.0, 'var_type': 'int', 'is_last': False, 'original_var': 'engine_state'}, {'name': 'ES_Hwindmill_start', 'min_value': 12.0, 'max_value': 12.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'ES_Hwindmill_start', 'constant_value': 12.0}]
处理的变量: ['ES_idle', 'ES_above_idle', 'engine_state', 'ES_Hwindmill_start']
条件解析错误: engine_state != ES_Hwindmill_start and engine_state != ES_above_idle and engine_state != ES_idle
错误信息: Symbolic expressions cannot be cast to concrete Boolean values.
变量类型:
  ES_idle: <class 'z3.z3.IntNumRef'>
    - 是算术表达式
  ES_above_idle: <class 'z3.z3.IntNumRef'>
    - 是算术表达式
  engine_state: <class 'z3.z3.ArithRef'>
    - 是算术表达式
  ES_Hwindmill_start: <class 'z3.z3.IntNumRef'>
    - 是算术表达式
生成的MCDC条件数量: 0

生成的测试用例:
- 条件: engine_state == ES_idle
  测试用例: ES_idle=14.0, engine_state=14
  预期结果: True
- 条件: engine_state == ES_idle
  测试用例: ES_idle=14.0, engine_state=13
  预期结果: False
- 条件: engine_state == ES_above_idle && ((PLA >= 2 + PD_IdleSwitchPlaThsld || PLA <= 2 || last(PLA) > 2 || last(PLA) < 0) && (PLA <= -6 - PD_IdleSwitchPlaThsld || PLA >= -6 || last(PLA) >= 0 || last(PLA) <= -6) && (PLA >= 0 || PLA < -6 || last(PLA) < -33 || last(PLA) >= -6) && (PLA > 2 || PLA < 0 || last(PLA) <= 2 || last(PLA) > 85) && PLA <= 2 && PLA >= -6)
  测试用例: ES_above_idle=15.0, PD_IdleSwitchPlaThsld=0.0, PLA=0.0, last(PLA)=0.0, engine_state=15
  预期结果: True
- 条件: engine_state == ES_above_idle && ((PLA >= 2 + PD_IdleSwitchPlaThsld || PLA <= 2 || last(PLA) > 2 || last(PLA) < 0) && (PLA <= -6 - PD_IdleSwitchPlaThsld || PLA >= -6 || last(PLA) >= 0 || last(PLA) <= -6) && (PLA >= 0 || PLA < -6 || last(PLA) < -33 || last(PLA) >= -6) && (PLA > 2 || PLA < 0 || last(PLA) <= 2 || last(PLA) > 85) && PLA <= 2 && PLA >= -6)
  测试用例: ES_above_idle=15.0, PD_IdleSwitchPlaThsld=0.0, PLA=0.0, last(PLA)=0.0, engine_state=14
  预期结果: False
- 条件: engine_state == ES_Hwindmill_start && thrust_level != level_RI && thrust_level != level_GI && thrust_level != level_FI && thrust_level != level_AI
  测试用例: ES_Hwindmill_start=12.0, engine_state=12, level_AI=6.0, level_FI=5.0, level_GI=4.0, level_RI=3.0, thrust_level=0
  预期结果: True
- 条件: engine_state == ES_Hwindmill_start && thrust_level != level_RI && thrust_level != level_GI && thrust_level != level_FI && thrust_level != level_AI
  测试用例: ES_Hwindmill_start=12.0, engine_state=11, level_AI=6.0, level_FI=5.0, level_GI=4.0, level_RI=3.0, thrust_level=0
  预期结果: False

==================================================
处理模块: 高低压切换控制（N2双通道传感器故障）
模块中没有if语句，跳过

==================================================
处理模块: 慢车到慢车以上切换控制（进入转换逻辑一）
提取到的if条件: ['((PLA<2 + PD_IdleSwitchPlaThsld && PLA>2) && (last(PLA)<=2 && last(PLA)>=0)) || ((PLA>-6-PD_IdleSwitchPlaThsld && PLA<-6) && (last(PLA)<0 && last(PLA)>-6))']

处理条件 1: ((PLA<2 + PD_IdleSwitchPlaThsld && PLA>2) && (last(PLA)<=2 && last(PLA)>=0)) || ((PLA>-6-PD_IdleSwitchPlaThsld && PLA<-6) && (last(PLA)<0 && last(PLA)>-6))
解析后的Python条件表达式: ((PLA < 2+PD_IdleSwitchPlaThsld and PLA > 2) and (_PLA_ <= 2 and _PLA_ >= 0)) or ((PLA > -6-PD_IdleSwitchPlaThsld and PLA < -6) and (_PLA_ < 0 and _PLA_ > -6))
变量及其范围: [{'name': 'PLA', 'min_value': -33.0, 'max_value': 85.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PLA'}, {'name': 'PD_IdleSwitchPlaThsld', 'min_value': 0.0, 'max_value': 50.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PD_IdleSwitchPlaThsld'}, {'name': '_PLA_', 'min_value': -33.0, 'max_value': 85.0, 'var_type': 'float', 'is_last': True, 'original_var': 'PLA'}]
解析后的条件: ((PLA < 2+PD_IdleSwitchPlaThsld and PLA > 2) and (_PLA_ <= 2 and _PLA_ >= 0)) or ((PLA > -6-PD_IdleSwitchPlaThsld and PLA < -6) and (_PLA_ < 0 and _PLA_ > -6))
识别到的变量: [{'name': 'PLA', 'min_value': -33.0, 'max_value': 85.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PLA'}, {'name': 'PD_IdleSwitchPlaThsld', 'min_value': 0.0, 'max_value': 50.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PD_IdleSwitchPlaThsld'}, {'name': '_PLA_', 'min_value': -33.0, 'max_value': 85.0, 'var_type': 'float', 'is_last': True, 'original_var': 'PLA'}]
处理的变量: ['PLA', 'PD_IdleSwitchPlaThsld', '_PLA_']
条件解析错误: ((PLA < 2+PD_IdleSwitchPlaThsld and PLA > 2) and (_PLA_ <= 2 and _PLA_ >= 0)) or ((PLA > -6-PD_IdleSwitchPlaThsld and PLA < -6) and (_PLA_ < 0 and _PLA_ > -6))
错误信息: Symbolic expressions cannot be cast to concrete Boolean values.
变量类型:
  PLA: <class 'z3.z3.ArithRef'>
    - 是算术表达式
  PD_IdleSwitchPlaThsld: <class 'z3.z3.ArithRef'>
    - 是算术表达式
  _PLA_: <class 'z3.z3.ArithRef'>
    - 是算术表达式
生成的MCDC条件数量: 0

==================================================
处理模块: 慢车到慢车以上切换控制（处于转换逻辑一，控制模式设置）
提取到的if条件: ['((PLA<2 + PD_IdleSwitchPlaThsld && PLA>2) && (last(PLA)<=2 && last(PLA)>=0)) || ((PLA>-6-PD_IdleSwitchPlaThsld && PLA<-6) && (last(PLA)<0 && last(PLA)>-6))']

处理条件 1: ((PLA<2 + PD_IdleSwitchPlaThsld && PLA>2) && (last(PLA)<=2 && last(PLA)>=0)) || ((PLA>-6-PD_IdleSwitchPlaThsld && PLA<-6) && (last(PLA)<0 && last(PLA)>-6))
解析后的Python条件表达式: ((PLA < 2+PD_IdleSwitchPlaThsld and PLA > 2) and (_PLA_ <= 2 and _PLA_ >= 0)) or ((PLA > -6-PD_IdleSwitchPlaThsld and PLA < -6) and (_PLA_ < 0 and _PLA_ > -6))
变量及其范围: [{'name': 'PLA', 'min_value': -33.0, 'max_value': 85.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PLA'}, {'name': 'PD_IdleSwitchPlaThsld', 'min_value': 0.0, 'max_value': 50.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PD_IdleSwitchPlaThsld'}, {'name': '_PLA_', 'min_value': -33.0, 'max_value': 85.0, 'var_type': 'float', 'is_last': True, 'original_var': 'PLA'}]
解析后的条件: ((PLA < 2+PD_IdleSwitchPlaThsld and PLA > 2) and (_PLA_ <= 2 and _PLA_ >= 0)) or ((PLA > -6-PD_IdleSwitchPlaThsld and PLA < -6) and (_PLA_ < 0 and _PLA_ > -6))
识别到的变量: [{'name': 'PLA', 'min_value': -33.0, 'max_value': 85.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PLA'}, {'name': 'PD_IdleSwitchPlaThsld', 'min_value': 0.0, 'max_value': 50.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PD_IdleSwitchPlaThsld'}, {'name': '_PLA_', 'min_value': -33.0, 'max_value': 85.0, 'var_type': 'float', 'is_last': True, 'original_var': 'PLA'}]
处理的变量: ['PLA', 'PD_IdleSwitchPlaThsld', '_PLA_']
条件解析错误: ((PLA < 2+PD_IdleSwitchPlaThsld and PLA > 2) and (_PLA_ <= 2 and _PLA_ >= 0)) or ((PLA > -6-PD_IdleSwitchPlaThsld and PLA < -6) and (_PLA_ < 0 and _PLA_ > -6))
错误信息: Symbolic expressions cannot be cast to concrete Boolean values.
变量类型:
  PLA: <class 'z3.z3.ArithRef'>
    - 是算术表达式
  PD_IdleSwitchPlaThsld: <class 'z3.z3.ArithRef'>
    - 是算术表达式
  _PLA_: <class 'z3.z3.ArithRef'>
    - 是算术表达式
生成的MCDC条件数量: 0

==================================================
处理模块: 慢车到慢车以上切换控制（处于转换逻辑一，N1R最终控制目标设置）
提取到的if条件: ['((PLA<2 + PD_IdleSwitchPlaThsld && PLA>2) && (last(PLA)<=2 && last(PLA)>=0)) || ((PLA>-6-PD_IdleSwitchPlaThsld && PLA<-6) && (last(PLA)<0 && last(PLA)>-6))']

处理条件 1: ((PLA<2 + PD_IdleSwitchPlaThsld && PLA>2) && (last(PLA)<=2 && last(PLA)>=0)) || ((PLA>-6-PD_IdleSwitchPlaThsld && PLA<-6) && (last(PLA)<0 && last(PLA)>-6))
解析后的Python条件表达式: ((PLA < 2+PD_IdleSwitchPlaThsld and PLA > 2) and (_PLA_ <= 2 and _PLA_ >= 0)) or ((PLA > -6-PD_IdleSwitchPlaThsld and PLA < -6) and (_PLA_ < 0 and _PLA_ > -6))
变量及其范围: [{'name': 'PLA', 'min_value': -33.0, 'max_value': 85.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PLA'}, {'name': 'PD_IdleSwitchPlaThsld', 'min_value': 0.0, 'max_value': 50.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PD_IdleSwitchPlaThsld'}, {'name': '_PLA_', 'min_value': -33.0, 'max_value': 85.0, 'var_type': 'float', 'is_last': True, 'original_var': 'PLA'}]
解析后的条件: ((PLA < 2+PD_IdleSwitchPlaThsld and PLA > 2) and (_PLA_ <= 2 and _PLA_ >= 0)) or ((PLA > -6-PD_IdleSwitchPlaThsld and PLA < -6) and (_PLA_ < 0 and _PLA_ > -6))
识别到的变量: [{'name': 'PLA', 'min_value': -33.0, 'max_value': 85.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PLA'}, {'name': 'PD_IdleSwitchPlaThsld', 'min_value': 0.0, 'max_value': 50.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PD_IdleSwitchPlaThsld'}, {'name': '_PLA_', 'min_value': -33.0, 'max_value': 85.0, 'var_type': 'float', 'is_last': True, 'original_var': 'PLA'}]
处理的变量: ['PLA', 'PD_IdleSwitchPlaThsld', '_PLA_']
条件解析错误: ((PLA < 2+PD_IdleSwitchPlaThsld and PLA > 2) and (_PLA_ <= 2 and _PLA_ >= 0)) or ((PLA > -6-PD_IdleSwitchPlaThsld and PLA < -6) and (_PLA_ < 0 and _PLA_ > -6))
错误信息: Symbolic expressions cannot be cast to concrete Boolean values.
变量类型:
  PLA: <class 'z3.z3.ArithRef'>
    - 是算术表达式
  PD_IdleSwitchPlaThsld: <class 'z3.z3.ArithRef'>
    - 是算术表达式
  _PLA_: <class 'z3.z3.ArithRef'>
    - 是算术表达式
生成的MCDC条件数量: 0

==================================================
处理模块: 慢车到慢车以上切换控制（处于转换逻辑一，N2R25最终控制目标设置）
提取到的if条件: ['((PLA<2 + PD_IdleSwitchPlaThsld && PLA>2) && (last(PLA)<=2 && last(PLA)>=0)) || ((PLA>-6-PD_IdleSwitchPlaThsld && PLA<-6) && (last(PLA)<0 && last(PLA)>-6))']

处理条件 1: ((PLA<2 + PD_IdleSwitchPlaThsld && PLA>2) && (last(PLA)<=2 && last(PLA)>=0)) || ((PLA>-6-PD_IdleSwitchPlaThsld && PLA<-6) && (last(PLA)<0 && last(PLA)>-6))
解析后的Python条件表达式: ((PLA < 2+PD_IdleSwitchPlaThsld and PLA > 2) and (_PLA_ <= 2 and _PLA_ >= 0)) or ((PLA > -6-PD_IdleSwitchPlaThsld and PLA < -6) and (_PLA_ < 0 and _PLA_ > -6))
变量及其范围: [{'name': 'PLA', 'min_value': -33.0, 'max_value': 85.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PLA'}, {'name': 'PD_IdleSwitchPlaThsld', 'min_value': 0.0, 'max_value': 50.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PD_IdleSwitchPlaThsld'}, {'name': '_PLA_', 'min_value': -33.0, 'max_value': 85.0, 'var_type': 'float', 'is_last': True, 'original_var': 'PLA'}]
解析后的条件: ((PLA < 2+PD_IdleSwitchPlaThsld and PLA > 2) and (_PLA_ <= 2 and _PLA_ >= 0)) or ((PLA > -6-PD_IdleSwitchPlaThsld and PLA < -6) and (_PLA_ < 0 and _PLA_ > -6))
识别到的变量: [{'name': 'PLA', 'min_value': -33.0, 'max_value': 85.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PLA'}, {'name': 'PD_IdleSwitchPlaThsld', 'min_value': 0.0, 'max_value': 50.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PD_IdleSwitchPlaThsld'}, {'name': '_PLA_', 'min_value': -33.0, 'max_value': 85.0, 'var_type': 'float', 'is_last': True, 'original_var': 'PLA'}]
处理的变量: ['PLA', 'PD_IdleSwitchPlaThsld', '_PLA_']
条件解析错误: ((PLA < 2+PD_IdleSwitchPlaThsld and PLA > 2) and (_PLA_ <= 2 and _PLA_ >= 0)) or ((PLA > -6-PD_IdleSwitchPlaThsld and PLA < -6) and (_PLA_ < 0 and _PLA_ > -6))
错误信息: Symbolic expressions cannot be cast to concrete Boolean values.
变量类型:
  PLA: <class 'z3.z3.ArithRef'>
    - 是算术表达式
  PD_IdleSwitchPlaThsld: <class 'z3.z3.ArithRef'>
    - 是算术表达式
  _PLA_: <class 'z3.z3.ArithRef'>
    - 是算术表达式
生成的MCDC条件数量: 0

==================================================
处理模块: 慢车到慢车以上切换控制（PLA大于等于零，计算转换过程N1R控制目标）
提取到的if条件: ['PLA >= 0']

处理条件 1: PLA >= 0
解析后的Python条件表达式: PLA >= 0
变量及其范围: [{'name': 'PLA', 'min_value': -33.0, 'max_value': 85.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PLA'}]
解析后的条件: PLA >= 0
识别到的变量: [{'name': 'PLA', 'min_value': -33.0, 'max_value': 85.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PLA'}]
处理的变量: ['PLA']
Z3表达式: PLA >= 0
表达式类型: <class 'z3.z3.BoolRef'>
生成的MCDC条件数量: 1

生成的测试用例:
- 条件: PLA >= 0
  测试用例: PLA=0.0
  预期结果: True
- 条件: PLA >= 0
  测试用例: PLA=-1.0
  预期结果: False

==================================================
处理模块: 慢车到慢车以上切换控制（PLA小于零，计算转换过程N1R控制目标N1Rrd）
提取到的if条件: ['PLA < 0']

处理条件 1: PLA < 0
解析后的Python条件表达式: PLA < 0
变量及其范围: [{'name': 'PLA', 'min_value': -33.0, 'max_value': 85.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PLA'}]
解析后的条件: PLA < 0
识别到的变量: [{'name': 'PLA', 'min_value': -33.0, 'max_value': 85.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PLA'}]
处理的变量: ['PLA']
Z3表达式: PLA < 0
表达式类型: <class 'z3.z3.BoolRef'>
生成的MCDC条件数量: 1

生成的测试用例:
- 条件: PLA < 0
  测试用例: PLA=-1.0
  预期结果: True
- 条件: PLA < 0
  测试用例: PLA=0.0
  预期结果: False

==================================================
处理模块: 慢车到慢车以上切换控制（应用软件应退出转换逻辑一）
提取到的if条件: ['(abs(N1Rrd - N1Rtr) < PD_N1RpIdleOut * N1RDesign) || (duration(PD_IdleOutTime , ms, PLA > 2)) || (duration(PD_IdleOutTime, ms, PLA < -6)) || (N2R25p > PD_IdleSwitchN2R25pMax) || (N1Rp > PD_IdleSwitchN1RpMax) || (PLA <= -6 - PD_IdleSwitchPlaThsld) || (PLA >= 2 + PD_IdleSwitchPlaThsld) || ((PLA <= 2) && (PLA >= -6)) || (duration(PD_IdleOutTime , ms, logic_transition_mode == Logic1_Control_Mode))']

处理条件 1: (abs(N1Rrd - N1Rtr) < PD_N1RpIdleOut * N1RDesign) || (duration(PD_IdleOutTime , ms, PLA > 2)) || (duration(PD_IdleOutTime, ms, PLA < -6)) || (N2R25p > PD_IdleSwitchN2R25pMax) || (N1Rp > PD_IdleSwitchN1RpMax) || (PLA <= -6 - PD_IdleSwitchPlaThsld) || (PLA >= 2 + PD_IdleSwitchPlaThsld) || ((PLA <= 2) && (PLA >= -6)) || (duration(PD_IdleOutTime , ms, logic_transition_mode == Logic1_Control_Mode))
警告：未找到变量或常量定义：abs
警告：未找到变量或常量定义：duration
警告：未找到变量或常量定义：ms
解析后的Python条件表达式: (abs(N1Rrd-N1Rtr) < PD_N1RpIdleOut*N1RDesign) or (duration(PD_IdleOutTime,ms,PLA > 2)) or (duration(PD_IdleOutTime,ms,PLA < -6)) or (N2R25p > PD_IdleSwitchN2R25pMax) or (N1Rp > PD_IdleSwitchN1RpMax) or (PLA <= -6-PD_IdleSwitchPlaThsld) or (PLA >= 2+PD_IdleSwitchPlaThsld) or ((PLA <= 2) and (PLA >= -6)) or (duration(PD_IdleOutTime,ms,logic_transition_mode == Logic1_Control_Mode))
变量及其范围: [{'name': 'Logic1_Control_Mode', 'min_value': 2.0, 'max_value': 2.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'Logic1_Control_Mode', 'constant_value': 2.0}, {'name': 'PD_IdleSwitchN2R25pMax', 'min_value': 0.0, 'max_value': 1.2, 'var_type': 'float', 'is_last': False, 'original_var': 'PD_IdleSwitchN2R25pMax'}, {'name': 'logic_transition_mode', 'min_value': 0.0, 'max_value': 6.0, 'var_type': 'int', 'is_last': False, 'original_var': 'logic_transition_mode'}, {'name': 'N1RDesign', 'min_value': 3866.0, 'max_value': 3866.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'N1RDesign', 'constant_value': 3866.0}, {'name': 'N1Rrd', 'min_value': -30000.0, 'max_value': 30000.0, 'var_type': 'float', 'is_last': False, 'original_var': 'N1Rrd'}, {'name': 'PD_IdleSwitchN1RpMax', 'min_value': 0.0, 'max_value': 1.2, 'var_type': 'float', 'is_last': False, 'original_var': 'PD_IdleSwitchN1RpMax'}, {'name': 'PLA', 'min_value': -33.0, 'max_value': 85.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PLA'}, {'name': 'N2R25p', 'min_value': -30000.0, 'max_value': 30000.0, 'var_type': 'float', 'is_last': False, 'original_var': 'N2R25p'}, {'name': 'PD_IdleSwitchPlaThsld', 'min_value': 0.0, 'max_value': 50.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PD_IdleSwitchPlaThsld'}, {'name': 'PD_IdleOutTime', 'min_value': 0.0, 'max_value': 100.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PD_IdleOutTime'}, {'name': 'PD_N1RpIdleOut', 'min_value': 0.0, 'max_value': 1.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PD_N1RpIdleOut'}, {'name': 'N1Rp', 'min_value': -30000.0, 'max_value': 30000.0, 'var_type': 'float', 'is_last': False, 'original_var': 'N1Rp'}, {'name': 'N1Rtr', 'min_value': -30000.0, 'max_value': 30000.0, 'var_type': 'float', 'is_last': False, 'original_var': 'N1Rtr'}]
解析后的条件: (abs(N1Rrd-N1Rtr) < PD_N1RpIdleOut*N1RDesign) or (duration(PD_IdleOutTime,ms,PLA > 2)) or (duration(PD_IdleOutTime,ms,PLA < -6)) or (N2R25p > PD_IdleSwitchN2R25pMax) or (N1Rp > PD_IdleSwitchN1RpMax) or (PLA <= -6-PD_IdleSwitchPlaThsld) or (PLA >= 2+PD_IdleSwitchPlaThsld) or ((PLA <= 2) and (PLA >= -6)) or (duration(PD_IdleOutTime,ms,logic_transition_mode == Logic1_Control_Mode))
识别到的变量: [{'name': 'Logic1_Control_Mode', 'min_value': 2.0, 'max_value': 2.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'Logic1_Control_Mode', 'constant_value': 2.0}, {'name': 'PD_IdleSwitchN2R25pMax', 'min_value': 0.0, 'max_value': 1.2, 'var_type': 'float', 'is_last': False, 'original_var': 'PD_IdleSwitchN2R25pMax'}, {'name': 'logic_transition_mode', 'min_value': 0.0, 'max_value': 6.0, 'var_type': 'int', 'is_last': False, 'original_var': 'logic_transition_mode'}, {'name': 'N1RDesign', 'min_value': 3866.0, 'max_value': 3866.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'N1RDesign', 'constant_value': 3866.0}, {'name': 'N1Rrd', 'min_value': -30000.0, 'max_value': 30000.0, 'var_type': 'float', 'is_last': False, 'original_var': 'N1Rrd'}, {'name': 'PD_IdleSwitchN1RpMax', 'min_value': 0.0, 'max_value': 1.2, 'var_type': 'float', 'is_last': False, 'original_var': 'PD_IdleSwitchN1RpMax'}, {'name': 'PLA', 'min_value': -33.0, 'max_value': 85.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PLA'}, {'name': 'N2R25p', 'min_value': -30000.0, 'max_value': 30000.0, 'var_type': 'float', 'is_last': False, 'original_var': 'N2R25p'}, {'name': 'PD_IdleSwitchPlaThsld', 'min_value': 0.0, 'max_value': 50.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PD_IdleSwitchPlaThsld'}, {'name': 'PD_IdleOutTime', 'min_value': 0.0, 'max_value': 100.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PD_IdleOutTime'}, {'name': 'PD_N1RpIdleOut', 'min_value': 0.0, 'max_value': 1.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PD_N1RpIdleOut'}, {'name': 'N1Rp', 'min_value': -30000.0, 'max_value': 30000.0, 'var_type': 'float', 'is_last': False, 'original_var': 'N1Rp'}, {'name': 'N1Rtr', 'min_value': -30000.0, 'max_value': 30000.0, 'var_type': 'float', 'is_last': False, 'original_var': 'N1Rtr'}]
处理的变量: ['Logic1_Control_Mode', 'PD_IdleSwitchN2R25pMax', 'logic_transition_mode', 'N1RDesign', 'N1Rrd', 'PD_IdleSwitchN1RpMax', 'PLA', 'N2R25p', 'PD_IdleSwitchPlaThsld', 'PD_IdleOutTime', 'PD_N1RpIdleOut', 'N1Rp', 'N1Rtr']
条件解析错误: (abs(N1Rrd-N1Rtr) < PD_N1RpIdleOut*N1RDesign) or (duration(PD_IdleOutTime,ms,PLA > 2)) or (duration(PD_IdleOutTime,ms,PLA < -6)) or (N2R25p > PD_IdleSwitchN2R25pMax) or (N1Rp > PD_IdleSwitchN1RpMax) or (PLA <= -6-PD_IdleSwitchPlaThsld) or (PLA >= 2+PD_IdleSwitchPlaThsld) or ((PLA <= 2) and (PLA >= -6)) or (duration(PD_IdleOutTime,ms,logic_transition_mode == Logic1_Control_Mode))
错误信息: name 'abs' is not defined
变量类型:
  Logic1_Control_Mode: <class 'z3.z3.IntNumRef'>
    - 是算术表达式
  PD_IdleSwitchN2R25pMax: <class 'z3.z3.ArithRef'>
    - 是算术表达式
  logic_transition_mode: <class 'z3.z3.ArithRef'>
    - 是算术表达式
  N1RDesign: <class 'z3.z3.IntNumRef'>
    - 是算术表达式
  N1Rrd: <class 'z3.z3.ArithRef'>
    - 是算术表达式
  PD_IdleSwitchN1RpMax: <class 'z3.z3.ArithRef'>
    - 是算术表达式
  PLA: <class 'z3.z3.ArithRef'>
    - 是算术表达式
  N2R25p: <class 'z3.z3.ArithRef'>
    - 是算术表达式
  PD_IdleSwitchPlaThsld: <class 'z3.z3.ArithRef'>
    - 是算术表达式
  PD_IdleOutTime: <class 'z3.z3.ArithRef'>
    - 是算术表达式
  PD_N1RpIdleOut: <class 'z3.z3.ArithRef'>
    - 是算术表达式
  N1Rp: <class 'z3.z3.ArithRef'>
    - 是算术表达式
  N1Rtr: <class 'z3.z3.ArithRef'>
    - 是算术表达式
生成的MCDC条件数量: 0

==================================================
处理模块: 慢车以上到慢车切换控制（油门杆从(2,85]推至[0,2]时）
提取到的if条件: ['(PLA <= 2 && PLA >= 0) && (last(PLA) > 2 && last(PLA) <= 85) && (N2r25 <= (N2R25Dem + N2R25Design * PD_DN2R25Switch)) && (N2r25 >= (N2R25Dem - N2R25Design * PD_DN2R25Switch))']

处理条件 1: (PLA <= 2 && PLA >= 0) && (last(PLA) > 2 && last(PLA) <= 85) && (N2r25 <= (N2R25Dem + N2R25Design * PD_DN2R25Switch)) && (N2r25 >= (N2R25Dem - N2R25Design * PD_DN2R25Switch))
解析后的Python条件表达式: (PLA <= 2 and PLA >= 0) and (_PLA_ > 2 and _PLA_ <= 85) and (N2r25 <= (N2R25Dem+N2R25Design*PD_DN2R25Switch)) and (N2r25 >= (N2R25Dem-N2R25Design*PD_DN2R25Switch))
变量及其范围: [{'name': 'N2r25', 'min_value': -30000.0, 'max_value': 30000.0, 'var_type': 'float', 'is_last': False, 'original_var': 'N2r25'}, {'name': 'PD_DN2R25Switch', 'min_value': 0.0, 'max_value': 0.5, 'var_type': 'float', 'is_last': False, 'original_var': 'PD_DN2R25Switch'}, {'name': 'PLA', 'min_value': -33.0, 'max_value': 85.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PLA'}, {'name': 'N2R25Dem', 'min_value': 0.0, 'max_value': 20000.0, 'var_type': 'float', 'is_last': False, 'original_var': 'N2R25Dem'}, {'name': 'N2R25Design', 'min_value': 16680.0, 'max_value': 16680.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'N2R25Design', 'constant_value': 16680.0}, {'name': '_PLA_', 'min_value': -33.0, 'max_value': 85.0, 'var_type': 'float', 'is_last': True, 'original_var': 'PLA'}]
解析后的条件: (PLA <= 2 and PLA >= 0) and (_PLA_ > 2 and _PLA_ <= 85) and (N2r25 <= (N2R25Dem+N2R25Design*PD_DN2R25Switch)) and (N2r25 >= (N2R25Dem-N2R25Design*PD_DN2R25Switch))
识别到的变量: [{'name': 'N2r25', 'min_value': -30000.0, 'max_value': 30000.0, 'var_type': 'float', 'is_last': False, 'original_var': 'N2r25'}, {'name': 'PD_DN2R25Switch', 'min_value': 0.0, 'max_value': 0.5, 'var_type': 'float', 'is_last': False, 'original_var': 'PD_DN2R25Switch'}, {'name': 'PLA', 'min_value': -33.0, 'max_value': 85.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PLA'}, {'name': 'N2R25Dem', 'min_value': 0.0, 'max_value': 20000.0, 'var_type': 'float', 'is_last': False, 'original_var': 'N2R25Dem'}, {'name': 'N2R25Design', 'min_value': 16680.0, 'max_value': 16680.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'N2R25Design', 'constant_value': 16680.0}, {'name': '_PLA_', 'min_value': -33.0, 'max_value': 85.0, 'var_type': 'float', 'is_last': True, 'original_var': 'PLA'}]
处理的变量: ['N2r25', 'PD_DN2R25Switch', 'PLA', 'N2R25Dem', 'N2R25Design', '_PLA_']
条件解析错误: (PLA <= 2 and PLA >= 0) and (_PLA_ > 2 and _PLA_ <= 85) and (N2r25 <= (N2R25Dem+N2R25Design*PD_DN2R25Switch)) and (N2r25 >= (N2R25Dem-N2R25Design*PD_DN2R25Switch))
错误信息: Symbolic expressions cannot be cast to concrete Boolean values.
变量类型:
  N2r25: <class 'z3.z3.ArithRef'>
    - 是算术表达式
  PD_DN2R25Switch: <class 'z3.z3.ArithRef'>
    - 是算术表达式
  PLA: <class 'z3.z3.ArithRef'>
    - 是算术表达式
  N2R25Dem: <class 'z3.z3.ArithRef'>
    - 是算术表达式
  N2R25Design: <class 'z3.z3.IntNumRef'>
    - 是算术表达式
  _PLA_: <class 'z3.z3.ArithRef'>
    - 是算术表达式
生成的MCDC条件数量: 0

==================================================
处理模块: 慢车以上到慢车切换控制（油门杆从[-33,-6)推至[-6,0)时）
提取到的if条件: ['(PLA < 0) && (PLA >= -6) && (last(PLA) >= -33) && (last(PLA) < -6) && (N2r25 <= (N2R25Dem + N2R25Design * PD_DN2R25Switch)) && (N2r25 >= (N2R25Dem - N2R25Design * PD_DN2R25Switch))']

处理条件 1: (PLA < 0) && (PLA >= -6) && (last(PLA) >= -33) && (last(PLA) < -6) && (N2r25 <= (N2R25Dem + N2R25Design * PD_DN2R25Switch)) && (N2r25 >= (N2R25Dem - N2R25Design * PD_DN2R25Switch))
解析后的Python条件表达式: (PLA < 0) and (PLA >= -6) and (_PLA_ >= -33) and (_PLA_ < -6) and (N2r25 <= (N2R25Dem+N2R25Design*PD_DN2R25Switch)) and (N2r25 >= (N2R25Dem-N2R25Design*PD_DN2R25Switch))
变量及其范围: [{'name': 'N2r25', 'min_value': -30000.0, 'max_value': 30000.0, 'var_type': 'float', 'is_last': False, 'original_var': 'N2r25'}, {'name': 'PD_DN2R25Switch', 'min_value': 0.0, 'max_value': 0.5, 'var_type': 'float', 'is_last': False, 'original_var': 'PD_DN2R25Switch'}, {'name': 'PLA', 'min_value': -33.0, 'max_value': 85.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PLA'}, {'name': 'N2R25Dem', 'min_value': 0.0, 'max_value': 20000.0, 'var_type': 'float', 'is_last': False, 'original_var': 'N2R25Dem'}, {'name': 'N2R25Design', 'min_value': 16680.0, 'max_value': 16680.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'N2R25Design', 'constant_value': 16680.0}, {'name': '_PLA_', 'min_value': -33.0, 'max_value': 85.0, 'var_type': 'float', 'is_last': True, 'original_var': 'PLA'}]
解析后的条件: (PLA < 0) and (PLA >= -6) and (_PLA_ >= -33) and (_PLA_ < -6) and (N2r25 <= (N2R25Dem+N2R25Design*PD_DN2R25Switch)) and (N2r25 >= (N2R25Dem-N2R25Design*PD_DN2R25Switch))
识别到的变量: [{'name': 'N2r25', 'min_value': -30000.0, 'max_value': 30000.0, 'var_type': 'float', 'is_last': False, 'original_var': 'N2r25'}, {'name': 'PD_DN2R25Switch', 'min_value': 0.0, 'max_value': 0.5, 'var_type': 'float', 'is_last': False, 'original_var': 'PD_DN2R25Switch'}, {'name': 'PLA', 'min_value': -33.0, 'max_value': 85.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PLA'}, {'name': 'N2R25Dem', 'min_value': 0.0, 'max_value': 20000.0, 'var_type': 'float', 'is_last': False, 'original_var': 'N2R25Dem'}, {'name': 'N2R25Design', 'min_value': 16680.0, 'max_value': 16680.0, 'var_type': 'constant', 'is_last': False, 'original_var': 'N2R25Design', 'constant_value': 16680.0}, {'name': '_PLA_', 'min_value': -33.0, 'max_value': 85.0, 'var_type': 'float', 'is_last': True, 'original_var': 'PLA'}]
处理的变量: ['N2r25', 'PD_DN2R25Switch', 'PLA', 'N2R25Dem', 'N2R25Design', '_PLA_']
条件解析错误: (PLA < 0) and (PLA >= -6) and (_PLA_ >= -33) and (_PLA_ < -6) and (N2r25 <= (N2R25Dem+N2R25Design*PD_DN2R25Switch)) and (N2r25 >= (N2R25Dem-N2R25Design*PD_DN2R25Switch))
错误信息: Symbolic expressions cannot be cast to concrete Boolean values.
变量类型:
  N2r25: <class 'z3.z3.ArithRef'>
    - 是算术表达式
  PD_DN2R25Switch: <class 'z3.z3.ArithRef'>
    - 是算术表达式
  PLA: <class 'z3.z3.ArithRef'>
    - 是算术表达式
  N2R25Dem: <class 'z3.z3.ArithRef'>
    - 是算术表达式
  N2R25Design: <class 'z3.z3.IntNumRef'>
    - 是算术表达式
  _PLA_: <class 'z3.z3.ArithRef'>
    - 是算术表达式
生成的MCDC条件数量: 0

==================================================
处理模块: 慢车以上到慢车切换控制（处于转换逻辑二，控制模式设置）
提取到的if条件: ['(PLA<0 && PLA >=-6 && last(PLA)>=-33 && last(PLA)<-6 || PLA<=2 && PLA >=0 && last(PLA)>2 && last(PLA)<=85)']

处理条件 1: (PLA<0 && PLA >=-6 && last(PLA)>=-33 && last(PLA)<-6 || PLA<=2 && PLA >=0 && last(PLA)>2 && last(PLA)<=85)
解析后的Python条件表达式: (PLA < 0 and PLA >= -6 and _PLA_ >= -33 and _PLA_ < -6 or PLA <= 2 and PLA >= 0 and _PLA_ > 2 and _PLA_ <= 85)
变量及其范围: [{'name': 'PLA', 'min_value': -33.0, 'max_value': 85.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PLA'}, {'name': '_PLA_', 'min_value': -33.0, 'max_value': 85.0, 'var_type': 'float', 'is_last': True, 'original_var': 'PLA'}]
解析后的条件: (PLA < 0 and PLA >= -6 and _PLA_ >= -33 and _PLA_ < -6 or PLA <= 2 and PLA >= 0 and _PLA_ > 2 and _PLA_ <= 85)
识别到的变量: [{'name': 'PLA', 'min_value': -33.0, 'max_value': 85.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PLA'}, {'name': '_PLA_', 'min_value': -33.0, 'max_value': 85.0, 'var_type': 'float', 'is_last': True, 'original_var': 'PLA'}]
处理的变量: ['PLA', '_PLA_']
条件解析错误: (PLA < 0 and PLA >= -6 and _PLA_ >= -33 and _PLA_ < -6 or PLA <= 2 and PLA >= 0 and _PLA_ > 2 and _PLA_ <= 85)
错误信息: Symbolic expressions cannot be cast to concrete Boolean values.
变量类型:
  PLA: <class 'z3.z3.ArithRef'>
    - 是算术表达式
  _PLA_: <class 'z3.z3.ArithRef'>
    - 是算术表达式
生成的MCDC条件数量: 0

==================================================
处理模块: 慢车以上到慢车切换控制（处于转换逻辑二，N1R最终控制目标设置）
提取到的if条件: ['(PLA<0 && PLA >=-6 && last(PLA)>=-33 && last(PLA)<-6 || PLA<=2 && PLA >=0 && last(PLA)>2 && last(PLA)<=85)']

处理条件 1: (PLA<0 && PLA >=-6 && last(PLA)>=-33 && last(PLA)<-6 || PLA<=2 && PLA >=0 && last(PLA)>2 && last(PLA)<=85)
解析后的Python条件表达式: (PLA < 0 and PLA >= -6 and _PLA_ >= -33 and _PLA_ < -6 or PLA <= 2 and PLA >= 0 and _PLA_ > 2 and _PLA_ <= 85)
变量及其范围: [{'name': 'PLA', 'min_value': -33.0, 'max_value': 85.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PLA'}, {'name': '_PLA_', 'min_value': -33.0, 'max_value': 85.0, 'var_type': 'float', 'is_last': True, 'original_var': 'PLA'}]
解析后的条件: (PLA < 0 and PLA >= -6 and _PLA_ >= -33 and _PLA_ < -6 or PLA <= 2 and PLA >= 0 and _PLA_ > 2 and _PLA_ <= 85)
识别到的变量: [{'name': 'PLA', 'min_value': -33.0, 'max_value': 85.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PLA'}, {'name': '_PLA_', 'min_value': -33.0, 'max_value': 85.0, 'var_type': 'float', 'is_last': True, 'original_var': 'PLA'}]
处理的变量: ['PLA', '_PLA_']
条件解析错误: (PLA < 0 and PLA >= -6 and _PLA_ >= -33 and _PLA_ < -6 or PLA <= 2 and PLA >= 0 and _PLA_ > 2 and _PLA_ <= 85)
错误信息: Symbolic expressions cannot be cast to concrete Boolean values.
变量类型:
  PLA: <class 'z3.z3.ArithRef'>
    - 是算术表达式
  _PLA_: <class 'z3.z3.ArithRef'>
    - 是算术表达式
生成的MCDC条件数量: 0

==================================================
处理模块: 慢车以上到慢车切换控制（处于转换逻辑二，N2R25最终控制目标设置）
提取到的if条件: ['(PLA<0 && PLA >=-6 && last(PLA)>=-33 && last(PLA)<-6 || PLA<=2 && PLA >=0 && last(PLA)>2 && last(PLA)<=85)']

处理条件 1: (PLA<0 && PLA >=-6 && last(PLA)>=-33 && last(PLA)<-6 || PLA<=2 && PLA >=0 && last(PLA)>2 && last(PLA)<=85)
解析后的Python条件表达式: (PLA < 0 and PLA >= -6 and _PLA_ >= -33 and _PLA_ < -6 or PLA <= 2 and PLA >= 0 and _PLA_ > 2 and _PLA_ <= 85)
变量及其范围: [{'name': 'PLA', 'min_value': -33.0, 'max_value': 85.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PLA'}, {'name': '_PLA_', 'min_value': -33.0, 'max_value': 85.0, 'var_type': 'float', 'is_last': True, 'original_var': 'PLA'}]
解析后的条件: (PLA < 0 and PLA >= -6 and _PLA_ >= -33 and _PLA_ < -6 or PLA <= 2 and PLA >= 0 and _PLA_ > 2 and _PLA_ <= 85)
识别到的变量: [{'name': 'PLA', 'min_value': -33.0, 'max_value': 85.0, 'var_type': 'float', 'is_last': False, 'original_var': 'PLA'}, {'name': '_PLA_', 'min_value': -33.0, 'max_value': 85.0, 'var_type': 'float', 'is_last': True, 'original_var': 'PLA'}]
处理的变量: ['PLA', '_PLA_']
条件解析错误: (PLA < 0 and PLA >= -6 and _PLA_ >= -33 and _PLA_ < -6 or PLA <= 2 and PLA >= 0 and _PLA_ > 2 and _PLA_ <= 85)
错误信息: Symbolic expressions cannot be cast to concrete Boolean values.
变量类型:
  PLA: <class 'z3.z3.ArithRef'>
    - 是算术表达式
  _PLA_: <class 'z3.z3.ArithRef'>
    - 是算术表达式
生成的MCDC条件数量: 0

==================================================
处理模块: 慢车以上到慢车切换控制（计算转换过程N2R25控制目标N2R25rd）
提取到的if条件: ['N2r25<=N2R25_1']

处理条件 1: N2r25<=N2R25_1
解析后的Python条件表达式: N2r25 <= N2R25_1
变量及其范围: [{'name': 'N2r25', 'min_value': -30000.0, 'max_value': 30000.0, 'var_type': 'float', 'is_last': False, 'original_var': 'N2r25'}, {'name': 'N2R25_1', 'min_value': -30000.0, 'max_value': 30000.0, 'var_type': 'float', 'is_last': False, 'original_var': 'N2R25_1'}]
解析后的条件: N2r25 <= N2R25_1
识别到的变量: [{'name': 'N2r25', 'min_value': -30000.0, 'max_value': 30000.0, 'var_type': 'float', 'is_last': False, 'original_var': 'N2r25'}, {'name': 'N2R25_1', 'min_value': -30000.0, 'max_value': 30000.0, 'var_type': 'float', 'is_last': False, 'original_var': 'N2R25_1'}]
处理的变量: ['N2r25', 'N2R25_1']
Z3表达式: N2r25 <= N2R25_1
表达式类型: <class 'z3.z3.BoolRef'>
生成的MCDC条件数量: 1

生成的测试用例:
- 条件: N2r25<=N2R25_1
  测试用例: N2R25_1=0.0, N2r25=0.0
  预期结果: True
- 条件: N2r25<=N2R25_1
  测试用例: N2R25_1=-1.0, N2r25=0.0
  预期结果: False
